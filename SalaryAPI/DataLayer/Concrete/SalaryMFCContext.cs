using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DataLayer.Entities.Models;

#nullable disable

namespace DataLayer.Concrete
{
    public partial class SalaryMFCContext : DbContext
    {
        public SalaryMFCContext()
        {
        }

        public SalaryMFCContext(DbContextOptions<SalaryMFCContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApiManagerPanelActiveOperator> ApiManagerPanelActiveOperators { get; set; }
        public virtual DbSet<ApiManagerPanelQueue> ApiManagerPanelQueues { get; set; }
        public virtual DbSet<ApiManagerPanelServiceDate> ApiManagerPanelServiceDates { get; set; }  
        public virtual DbSet<ApiManagerPanelQueueInfo> ApiManagerPanelQueueInfos { get; set; }
        public virtual DbSet<ApiManagerPanelServicePeriod> ApiManagerPanelServicePeriods { get; set; }
        public virtual DbSet<ApiManagerPanelStateTask> ApiManagerPanelStateTasks { get; set; }
        public virtual DbSet<ApiUser> ApiUsers { get; set; }
        public virtual DbSet<ArchiveCoverLetter> ArchiveCoverLetters { get; set; }
        public virtual DbSet<ArchiveForSearch> ArchiveForSearches { get; set; }
        public virtual DbSet<ArchivePremium> ArchivePremia { get; set; }
        public virtual DbSet<ArchivePremiumFine> ArchivePremiumFines { get; set; }
        public virtual DbSet<ArchivePremiumFineSum> ArchivePremiumFineSums { get; set; }
        public virtual DbSet<ArchivePremiumStep> ArchivePremiumSteps { get; set; }
        public virtual DbSet<ArchivePremiumStepService> ArchivePremiumStepServices { get; set; }
        public virtual DbSet<ArchivePremiumStepSum> ArchivePremiumStepSums { get; set; }
        public virtual DbSet<ArchiveRatingExecutedEmployee> ArchiveRatingExecutedEmployees { get; set; }
        public virtual DbSet<ArchiveRatingExecutedEmployeesMfc> ArchiveRatingExecutedEmployeesMfcs { get; set; }
        public virtual DbSet<ArchiveRatingReceivedEmployee> ArchiveRatingReceivedEmployees { get; set; }
        public virtual DbSet<ArchiveRatingReceivedEmployeesMfc> ArchiveRatingReceivedEmployeesMfcs { get; set; }
        public virtual DbSet<ArchiveService> ArchiveServices { get; set; }
        public virtual DbSet<ArchiveServicesAisOpvChat> ArchiveServicesAisOpvChats { get; set; }
        public virtual DbSet<ArchiveServicesCommentt> ArchiveServicesCommentts { get; set; }
        public virtual DbSet<ArchiveServicesCommenttRecipient> ArchiveServicesCommenttRecipients { get; set; }
        public virtual DbSet<ArchiveServicesCustomer> ArchiveServicesCustomers { get; set; }
        public virtual DbSet<ArchiveServicesCustomerCall> ArchiveServicesCustomerCalls { get; set; }
        public virtual DbSet<ArchiveServicesCustomerGisgmp> ArchiveServicesCustomerGisgmps { get; set; }
        public virtual DbSet<ArchiveServicesCustomerMessage> ArchiveServicesCustomerMessages { get; set; }
        public virtual DbSet<ArchiveServicesDocument> ArchiveServicesDocuments { get; set; }
        public virtual DbSet<ArchiveServicesElplat> ArchiveServicesElplats { get; set; }
        public virtual DbSet<ArchiveServicesFile> ArchiveServicesFiles { get; set; }
        public virtual DbSet<ArchiveServicesFileResult> ArchiveServicesFileResults { get; set; }
        public virtual DbSet<ArchiveServicesInfo> ArchiveServicesInfos { get; set; }
        public virtual DbSet<ArchiveServicesParametr> ArchiveServicesParametrs { get; set; }
        public virtual DbSet<ArchiveServicesParametr1> ArchiveServicesParametrs1 { get; set; }
        public virtual DbSet<ArchiveServicesPayment> ArchiveServicesPayments { get; set; }
        public virtual DbSet<ArchiveServicesRoutesStage> ArchiveServicesRoutesStages { get; set; }
        public virtual DbSet<ArchiveServicesSmevRequest> ArchiveServicesSmevRequests { get; set; }
        public virtual DbSet<ArchiveServicesSmevRequestStatus> ArchiveServicesSmevRequestStatuses { get; set; }
        public virtual DbSet<ArchiveServicesViewLog> ArchiveServicesViewLogs { get; set; }
        public virtual DbSet<DataAutomaticLog> DataAutomaticLogs { get; set; }
        public virtual DbSet<DataBirthZag> DataBirthZags { get; set; }
        public virtual DbSet<DataCalendar> DataCalendars { get; set; }
        public virtual DbSet<DataCalendarDayType> DataCalendarDayTypes { get; set; }
        public virtual DbSet<DataCallback> DataCallbacks { get; set; }
        public virtual DbSet<DataCallbackCall> DataCallbackCalls { get; set; }
        public virtual DbSet<DataChangeLog> DataChangeLogs { get; set; }
        public virtual DbSet<DataCoverLetter> DataCoverLetters { get; set; }
        public virtual DbSet<DataDayProblem> DataDayProblems { get; set; }
        public virtual DbSet<DataDeathZag> DataDeathZags { get; set; }
        public virtual DbSet<DataDivorceZag> DataDivorceZags { get; set; }
        public virtual DbSet<DataElkOrder> DataElkOrders { get; set; }
        public virtual DbSet<DataElkStatusChange> DataElkStatusChanges { get; set; }
        public virtual DbSet<DataEmployeesAlert> DataEmployeesAlerts { get; set; }
        public virtual DbSet<DataEmployeesInterviewAnswer> DataEmployeesInterviewAnswers { get; set; }
        public virtual DbSet<DataEmployeesInterviewQuestion> DataEmployeesInterviewQuestions { get; set; }
        public virtual DbSet<DataEmployeesLog> DataEmployeesLogs { get; set; }
        public virtual DbSet<DataEmployeesMfcIasMkguOur> DataEmployeesMfcIasMkguOurs { get; set; }
        public virtual DbSet<DataEmployeesMfcIasMkguWebsite> DataEmployeesMfcIasMkguWebsites { get; set; }
        public virtual DbSet<DataEmployeesReminder> DataEmployeesReminders { get; set; }
        public virtual DbSet<DataEpguDocumentsLoad> DataEpguDocumentsLoads { get; set; }
        public virtual DbSet<DataEpguDocumentsResponse> DataEpguDocumentsResponses { get; set; }
        public virtual DbSet<DataEpguSubsFedDocumentIdentity> DataEpguSubsFedDocumentIdentities { get; set; }
        public virtual DbSet<DataEpguSubsFedRelation> DataEpguSubsFedRelations { get; set; }
        public virtual DbSet<DataEpguSubsFedRelationDocument> DataEpguSubsFedRelationDocuments { get; set; }
        public virtual DbSet<DataEpguSubsFedRepresentative> DataEpguSubsFedRepresentatives { get; set; }
        public virtual DbSet<DataEpguSubsRegAllowanseDocument> DataEpguSubsRegAllowanseDocuments { get; set; }
        public virtual DbSet<DataEpguSubsRegAllowanseJoin> DataEpguSubsRegAllowanseJoins { get; set; }
        public virtual DbSet<DataEpguSubsRegCategoryCopyright> DataEpguSubsRegCategoryCopyrights { get; set; }
        public virtual DbSet<DataEpguSubsRegCategoryJoin> DataEpguSubsRegCategoryJoins { get; set; }
        public virtual DbSet<DataEpguSubsRegDocument> DataEpguSubsRegDocuments { get; set; }
        public virtual DbSet<DataEpguSubsRegDocumentJoin> DataEpguSubsRegDocumentJoins { get; set; }
        public virtual DbSet<DataEpguSubsRegIncomeDocument> DataEpguSubsRegIncomeDocuments { get; set; }
        public virtual DbSet<DataEpguSubsRegIncomeType> DataEpguSubsRegIncomeTypes { get; set; }
        public virtual DbSet<DataEpguSubsRegOffice> DataEpguSubsRegOffices { get; set; }
        public virtual DbSet<DataEpguSubsRegOfficeServiceJoin> DataEpguSubsRegOfficeServiceJoins { get; set; }
        public virtual DbSet<DataEpguSubsRegOptionsService> DataEpguSubsRegOptionsServices { get; set; }
        public virtual DbSet<DataFeedbackAnswer> DataFeedbackAnswers { get; set; }
        public virtual DbSet<DataFeedbackExecution> DataFeedbackExecutions { get; set; }
        public virtual DbSet<DataFeedbackQuestion> DataFeedbackQuestions { get; set; }
        public virtual DbSet<DataFsspUpload> DataFsspUploads { get; set; }
        public virtual DbSet<DataIasMkguInfomatAnswer> DataIasMkguInfomatAnswers { get; set; }
        public virtual DbSet<DataIasMkguInfomatAnswerCommentt> DataIasMkguInfomatAnswerCommentts { get; set; }
        public virtual DbSet<DataIasMkguInfomatLogUpload> DataIasMkguInfomatLogUploads { get; set; }
        public virtual DbSet<DataIasMkguInfomatUpload> DataIasMkguInfomatUploads { get; set; }
        public virtual DbSet<DataIasMkguProviderLoad> DataIasMkguProviderLoads { get; set; }
        public virtual DbSet<DataIasMkguRatingLoad> DataIasMkguRatingLoads { get; set; }
        public virtual DbSet<DataIasMkguRatingLogLoad> DataIasMkguRatingLogLoads { get; set; }
        public virtual DbSet<DataIasMkguSmsLogUpload> DataIasMkguSmsLogUploads { get; set; }
        public virtual DbSet<DataIasMkguSmsUpload> DataIasMkguSmsUploads { get; set; }
        public virtual DbSet<DataIncomingCall> DataIncomingCalls { get; set; }
        public virtual DbSet<DataInfo> DataInfos { get; set; }
        public virtual DbSet<DataInfoFile> DataInfoFiles { get; set; }
        public virtual DbSet<DataInfoRecipient> DataInfoRecipients { get; set; }
        public virtual DbSet<DataInfoType> DataInfoTypes { get; set; }
        public virtual DbSet<DataInfoView> DataInfoViews { get; set; }
        public virtual DbSet<DataMarriageZag> DataMarriageZags { get; set; }
        public virtual DbSet<DataMdmObjectsAttributesUpload> DataMdmObjectsAttributesUploads { get; set; }
        public virtual DbSet<DataMdmObjectsAttributesUploadV2> DataMdmObjectsAttributesUploadV2s { get; set; }
        public virtual DbSet<DataMdmObjectsLogUpload> DataMdmObjectsLogUploads { get; set; }
        public virtual DbSet<DataMdmObjectsLogUploadV2> DataMdmObjectsLogUploadV2s { get; set; }
        public virtual DbSet<DataMdmObjectsUpload> DataMdmObjectsUploads { get; set; }
        public virtual DbSet<DataMdmObjectsUploadV2> DataMdmObjectsUploadV2s { get; set; }
        public virtual DbSet<DataNameChangeZag> DataNameChangeZags { get; set; }
        public virtual DbSet<DataNews> DataNews { get; set; }
        public virtual DbSet<DataNewsFile> DataNewsFiles { get; set; }
        public virtual DbSet<DataNewsRecipient> DataNewsRecipients { get; set; }
        public virtual DbSet<DataNewsView> DataNewsViews { get; set; }
        public virtual DbSet<DataPaternityZag> DataPaternityZags { get; set; }
        public virtual DbSet<DataPersonalAccount> DataPersonalAccounts { get; set; }
        public virtual DbSet<DataPollRegionSm> DataPollRegionSms { get; set; }
        public virtual DbSet<DataPremiumFine> DataPremiumFines { get; set; }
        public virtual DbSet<DataPremiumStep> DataPremiumSteps { get; set; }
        public virtual DbSet<DataQueueAvgTime> DataQueueAvgTimes { get; set; }
        public virtual DbSet<DataRatingExecutedEmployee> DataRatingExecutedEmployees { get; set; }
        public virtual DbSet<DataRatingExecutedEmployeesMfc> DataRatingExecutedEmployeesMfcs { get; set; }
        public virtual DbSet<DataRatingReceivedEmployee> DataRatingReceivedEmployees { get; set; }
        public virtual DbSet<DataRatingReceivedEmployeesMfc> DataRatingReceivedEmployeesMfcs { get; set; }
        public virtual DbSet<DataRatingTable> DataRatingTables { get; set; }
        public virtual DbSet<DataReestr> DataReestrs { get; set; }
        public virtual DbSet<DataReportCall> DataReportCalls { get; set; }
        public virtual DbSet<DataReportCommentt> DataReportCommentts { get; set; }
        public virtual DbSet<DataReportExecuted> DataReportExecuteds { get; set; }
        public virtual DbSet<DataReportIasMkguConsent> DataReportIasMkguConsents { get; set; }
        public virtual DbSet<DataReportIasMkguInfomat> DataReportIasMkguInfomats { get; set; }
        public virtual DbSet<DataReportIasMkguService> DataReportIasMkguServices { get; set; }
        public virtual DbSet<DataReportIasMkguSm> DataReportIasMkguSms { get; set; }
        public virtual DbSet<DataReportMessage> DataReportMessages { get; set; }
        public virtual DbSet<DataReportOverdueRoutesStage> DataReportOverdueRoutesStages { get; set; }
        public virtual DbSet<DataReportReceived> DataReportReceiveds { get; set; }
        public virtual DbSet<DataReportRegionSm> DataReportRegionSms { get; set; }
        public virtual DbSet<DataReportSmev> DataReportSmevs { get; set; }
        public virtual DbSet<DataReportSmevStatistic> DataReportSmevStatistics { get; set; }
        public virtual DbSet<DataReportTransfer> DataReportTransfers { get; set; }
        public virtual DbSet<DataSalaryRecalcLog> DataSalaryRecalcLogs { get; set; }
        public virtual DbSet<DataService> DataServices { get; set; }
        public virtual DbSet<DataServiceSmevLog> DataServiceSmevLogs { get; set; }
        public virtual DbSet<DataServicesAisOpvAnketStatus> DataServicesAisOpvAnketStatuses { get; set; }
        public virtual DbSet<DataServicesAisOpvChat> DataServicesAisOpvChats { get; set; }
        public virtual DbSet<DataServicesCommentt> DataServicesCommentts { get; set; }
        public virtual DbSet<DataServicesCommenttRecipient> DataServicesCommenttRecipients { get; set; }
        public virtual DbSet<DataServicesCustomer> DataServicesCustomers { get; set; }
        public virtual DbSet<DataServicesCustomerCall> DataServicesCustomerCalls { get; set; }
        public virtual DbSet<DataServicesCustomerGisgmp> DataServicesCustomerGisgmps { get; set; }
        public virtual DbSet<DataServicesCustomerMessage> DataServicesCustomerMessages { get; set; }
        public virtual DbSet<DataServicesDocument> DataServicesDocuments { get; set; }
        public virtual DbSet<DataServicesElplat> DataServicesElplats { get; set; }
        public virtual DbSet<DataServicesElplatInfo> DataServicesElplatInfos { get; set; }
        public virtual DbSet<DataServicesFile> DataServicesFiles { get; set; }
        public virtual DbSet<DataServicesFileResult> DataServicesFileResults { get; set; }
        public virtual DbSet<DataServicesIncomingSmevRequest> DataServicesIncomingSmevRequests { get; set; }
        public virtual DbSet<DataServicesInfo> DataServicesInfos { get; set; }
        public virtual DbSet<DataServicesInfoFavorite> DataServicesInfoFavorites { get; set; }
        public virtual DbSet<DataServicesParametr> DataServicesParametrs { get; set; }
        public virtual DbSet<DataServicesParametr1> DataServicesParametrs1 { get; set; }
        public virtual DbSet<DataServicesPayment> DataServicesPayments { get; set; }
        public virtual DbSet<DataServicesRating> DataServicesRatings { get; set; }
        public virtual DbSet<DataServicesReestr> DataServicesReestrs { get; set; }
        public virtual DbSet<DataServicesRoutesStage> DataServicesRoutesStages { get; set; }
        public virtual DbSet<DataServicesSmevRequest> DataServicesSmevRequests { get; set; }
        public virtual DbSet<DataServicesSmevRequestStatus> DataServicesSmevRequestStatuses { get; set; }
        public virtual DbSet<DataServicesTempStatistic> DataServicesTempStatistics { get; set; }
        public virtual DbSet<DataServicesViewLog> DataServicesViewLogs { get; set; }
        public virtual DbSet<DataTaskboard> DataTaskboards { get; set; }
        public virtual DbSet<DataTest> DataTests { get; set; }
        public virtual DbSet<DataTestDirection> DataTestDirections { get; set; }
        public virtual DbSet<DataTestEmployee> DataTestEmployees { get; set; }
        public virtual DbSet<DataTestPrepared> DataTestPrepareds { get; set; }
        public virtual DbSet<DataTestQuestion> DataTestQuestions { get; set; }
        public virtual DbSet<DataTestQuestionEmployee> DataTestQuestionEmployees { get; set; }
        public virtual DbSet<DataTestQuestionEmployeesAnswer> DataTestQuestionEmployeesAnswers { get; set; }
        public virtual DbSet<DeleteComment> DeleteComments { get; set; }
        public virtual DbSet<ErrorMessage> ErrorMessages { get; set; }
        public virtual DbSet<FnsDebit> FnsDebits { get; set; }
        public virtual DbSet<PgBuffercache> PgBuffercaches { get; set; }
        public virtual DbSet<PgStatStatement> PgStatStatements { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<SprAlert> SprAlerts { get; set; }
        public virtual DbSet<SprAlertEmployee> SprAlertEmployees { get; set; }
        public virtual DbSet<SprBlank> SprBlanks { get; set; }
        public virtual DbSet<SprCoverLetterTemplate> SprCoverLetterTemplates { get; set; }
        public virtual DbSet<SprDocument> SprDocuments { get; set; }
        public virtual DbSet<SprDocumentCode> SprDocumentCodes { get; set; }
        public virtual DbSet<SprDocumentCode2> SprDocumentCode2s { get; set; }
        public virtual DbSet<SprDocumentIdentity> SprDocumentIdentities { get; set; }
        public virtual DbSet<SprDocumentsSmevRequestJoin> SprDocumentsSmevRequestJoins { get; set; }
        public virtual DbSet<SprEmployee> SprEmployees { get; set; }
        public virtual DbSet<SprEmployeesAuthorizationLog> SprEmployeesAuthorizationLogs { get; set; }
        public virtual DbSet<SprEmployeesExecution> SprEmployeesExecutions { get; set; }
        public virtual DbSet<SprEmployeesExecutorRole> SprEmployeesExecutorRoles { get; set; }
        public virtual DbSet<SprEmployeesFile> SprEmployeesFiles { get; set; }
        public virtual DbSet<SprEmployeesFileFolder> SprEmployeesFileFolders { get; set; }
        public virtual DbSet<SprEmployeesJobPo> SprEmployeesJobPos { get; set; }
        public virtual DbSet<SprEmployeesJobPosCombination> SprEmployeesJobPosCombinations { get; set; }
        public virtual DbSet<SprEmployeesJobPosFine> SprEmployeesJobPosFines { get; set; }
        public virtual DbSet<SprEmployeesJobPosSalary> SprEmployeesJobPosSalaries { get; set; }
        public virtual DbSet<SprEmployeesMessageTemplate> SprEmployeesMessageTemplates { get; set; }
        public virtual DbSet<SprEmployeesMfc> SprEmployeesMfcs { get; set; }
        public virtual DbSet<SprEmployeesMfcCurator> SprEmployeesMfcCurators { get; set; }
        public virtual DbSet<SprEmployeesMfcFtp> SprEmployeesMfcFtps { get; set; }
        public virtual DbSet<SprEmployeesMfcFtpJoin> SprEmployeesMfcFtpJoins { get; set; }
        public virtual DbSet<SprEmployeesMfcJoin> SprEmployeesMfcJoins { get; set; }
        public virtual DbSet<SprEmployeesMfcRemoteWorkplace> SprEmployeesMfcRemoteWorkplaces { get; set; }
        public virtual DbSet<SprEmployeesMfcType> SprEmployeesMfcTypes { get; set; }
        public virtual DbSet<SprEmployeesRole> SprEmployeesRoles { get; set; }
        public virtual DbSet<SprEmployeesRoleJoin> SprEmployeesRoleJoins { get; set; }
        public virtual DbSet<SprEmployeesSalary> SprEmployeesSalaries { get; set; }
        public virtual DbSet<SprEmployeesStatus> SprEmployeesStatuses { get; set; }
        public virtual DbSet<SprEmployeesStatusJoin> SprEmployeesStatusJoins { get; set; }
        public virtual DbSet<SprEmployeesWorkingTime> SprEmployeesWorkingTimes { get; set; }
        public virtual DbSet<SprEmployeesWorkingTimeJoin> SprEmployeesWorkingTimeJoins { get; set; }
        public virtual DbSet<SprExecutorRole> SprExecutorRoles { get; set; }
        public virtual DbSet<SprFeedbackQuestionType> SprFeedbackQuestionTypes { get; set; }
        public virtual DbSet<SprForm> SprForms { get; set; }
        public virtual DbSet<SprGroupParametr> SprGroupParametrs { get; set; }
        public virtual DbSet<SprGroupParametrsJoin> SprGroupParametrsJoins { get; set; }
        public virtual DbSet<SprIasMkguCategory> SprIasMkguCategories { get; set; }
        public virtual DbSet<SprIasMkguIndicator> SprIasMkguIndicators { get; set; }
        public virtual DbSet<SprIasMkguQuestion> SprIasMkguQuestions { get; set; }
        public virtual DbSet<SprIasMkguQuestionAnswer> SprIasMkguQuestionAnswers { get; set; }
        public virtual DbSet<SprList> SprLists { get; set; }
        public virtual DbSet<SprListsValue> SprListsValues { get; set; }
        public virtual DbSet<SprMdmObjectAttribute> SprMdmObjectAttributes { get; set; }
        public virtual DbSet<SprMdmObjectAttributeV2> SprMdmObjectAttributeV2s { get; set; }
        public virtual DbSet<SprMdmObjectType> SprMdmObjectTypes { get; set; }
        public virtual DbSet<SprMdmObjectTypeV2> SprMdmObjectTypeV2s { get; set; }
        public virtual DbSet<SprMfcZag> SprMfcZags { get; set; }
        public virtual DbSet<SprMinobrCamp> SprMinobrCamps { get; set; }
        public virtual DbSet<SprParametr> SprParametrs { get; set; }
        public virtual DbSet<SprParametr1> SprParametrs1 { get; set; }
        public virtual DbSet<SprPeriod> SprPeriods { get; set; }
        public virtual DbSet<SprPfrDepartment> SprPfrDepartments { get; set; }
        public virtual DbSet<SprQueueJoinMfc> SprQueueJoinMfcs { get; set; }
        public virtual DbSet<SprRosreestrEmployee> SprRosreestrEmployees { get; set; }
        public virtual DbSet<SprRosreestrMfc> SprRosreestrMfcs { get; set; }
        public virtual DbSet<SprRoutesStage> SprRoutesStages { get; set; }
        public virtual DbSet<SprRoutesStageNext> SprRoutesStageNexts { get; set; }
        public virtual DbSet<SprRoutesStageRoleJoin> SprRoutesStageRoleJoins { get; set; }
        public virtual DbSet<SprService> SprServices { get; set; }
        public virtual DbSet<SprServicesForm> SprServicesForms { get; set; }
        public virtual DbSet<SprServicesProvider> SprServicesProviders { get; set; }
        public virtual DbSet<SprServicesProviderDepartment> SprServicesProviderDepartments { get; set; }
        public virtual DbSet<SprServicesProviderMfc> SprServicesProviderMfcs { get; set; }
        public virtual DbSet<SprServicesProviderRecipientPayment> SprServicesProviderRecipientPayments { get; set; }
        public virtual DbSet<SprServicesProviderVipnet> SprServicesProviderVipnets { get; set; }
        public virtual DbSet<SprServicesSub> SprServicesSubs { get; set; }
        public virtual DbSet<SprServicesSubActive> SprServicesSubActives { get; set; }
        public virtual DbSet<SprServicesSubCommercial> SprServicesSubCommercials { get; set; }
        public virtual DbSet<SprServicesSubCustomer> SprServicesSubCustomers { get; set; }
        public virtual DbSet<SprServicesSubDocument> SprServicesSubDocuments { get; set; }
        public virtual DbSet<SprServicesSubDocumentCustomer> SprServicesSubDocumentCustomers { get; set; }
        public virtual DbSet<SprServicesSubExecutorRole> SprServicesSubExecutorRoles { get; set; }
        public virtual DbSet<SprServicesSubFailure> SprServicesSubFailures { get; set; }
        public virtual DbSet<SprServicesSubFailureDoc> SprServicesSubFailureDocs { get; set; }
        public virtual DbSet<SprServicesSubFile> SprServicesSubFiles { get; set; }
        public virtual DbSet<SprServicesSubFileFolder> SprServicesSubFileFolders { get; set; }
        public virtual DbSet<SprServicesSubGroupParametrsJoin> SprServicesSubGroupParametrsJoins { get; set; }
        public virtual DbSet<SprServicesSubHashtag> SprServicesSubHashtags { get; set; }
        public virtual DbSet<SprServicesSubLivingSituation> SprServicesSubLivingSituations { get; set; }
        public virtual DbSet<SprServicesSubLivingSituationsJoin> SprServicesSubLivingSituationsJoins { get; set; }
        public virtual DbSet<SprServicesSubParametr> SprServicesSubParametrs { get; set; }
        public virtual DbSet<SprServicesSubPremium> SprServicesSubPremia { get; set; }
        public virtual DbSet<SprServicesSubResultDoc> SprServicesSubResultDocs { get; set; }
        public virtual DbSet<SprServicesSubSmevRequestJoin> SprServicesSubSmevRequestJoins { get; set; }
        public virtual DbSet<SprServicesSubStateTask> SprServicesSubStateTasks { get; set; }
        public virtual DbSet<SprServicesSubStatus> SprServicesSubStatuses { get; set; }
        public virtual DbSet<SprServicesSubStatusJoin> SprServicesSubStatusJoins { get; set; }
        public virtual DbSet<SprServicesSubStop> SprServicesSubStops { get; set; }
        public virtual DbSet<SprServicesSubSurveying> SprServicesSubSurveyings { get; set; }
        public virtual DbSet<SprServicesSubTariff> SprServicesSubTariffs { get; set; }
        public virtual DbSet<SprServicesSubTariffType> SprServicesSubTariffTypes { get; set; }
        public virtual DbSet<SprServicesSubTypeQuality> SprServicesSubTypeQualities { get; set; }
        public virtual DbSet<SprServicesSubTypeQualityJoin> SprServicesSubTypeQualityJoins { get; set; }
        public virtual DbSet<SprServicesSubTypeRecipient> SprServicesSubTypeRecipients { get; set; }
        public virtual DbSet<SprServicesSubWayGet> SprServicesSubWayGets { get; set; }
        public virtual DbSet<SprServicesSubWayGetJoin> SprServicesSubWayGetJoins { get; set; }
        public virtual DbSet<SprServicesSubWayGetResult> SprServicesSubWayGetResults { get; set; }
        public virtual DbSet<SprServicesSubWayGetResultJoin> SprServicesSubWayGetResultJoins { get; set; }
        public virtual DbSet<SprServicesSubWeek> SprServicesSubWeeks { get; set; }
        public virtual DbSet<SprServicesType> SprServicesTypes { get; set; }
        public virtual DbSet<SprSetting> SprSettings { get; set; }
        public virtual DbSet<SprSmev> SprSmevs { get; set; }
        public virtual DbSet<SprSmevClassFnsReg> SprSmevClassFnsRegs { get; set; }
        public virtual DbSet<SprSmevClassOkopf> SprSmevClassOkopfs { get; set; }
        public virtual DbSet<SprSmevClassOkpd2> SprSmevClassOkpd2s { get; set; }
        public virtual DbSet<SprSmevClassOkved2> SprSmevClassOkved2s { get; set; }
        public virtual DbSet<SprSmevClassOszn> SprSmevClassOszns { get; set; }
        public virtual DbSet<SprSmevClassUik> SprSmevClassUiks { get; set; }
        public virtual DbSet<SprSmevClassZag> SprSmevClassZags { get; set; }
        public virtual DbSet<SprSmevRequest> SprSmevRequests { get; set; }
        public virtual DbSet<SprSmevSystemAccess> SprSmevSystemAccesses { get; set; }
        public virtual DbSet<SprSmevTypeRequest> SprSmevTypeRequests { get; set; }
        public virtual DbSet<SprStandardsFile> SprStandardsFiles { get; set; }
        public virtual DbSet<SprTestAnswer> SprTestAnswers { get; set; }
        public virtual DbSet<SprTestDirection> SprTestDirections { get; set; }
        public virtual DbSet<SprTestQuestion> SprTestQuestions { get; set; }
        public virtual DbSet<SprTestQuestionJobPo> SprTestQuestionJobPos { get; set; }
        public virtual DbSet<StatisticsClick> StatisticsClicks { get; set; }
        public virtual DbSet<Temp> Temps { get; set; }
        public virtual DbSet<TempOktmo> TempOktmos { get; set; }
        public virtual DbSet<Tempje> Tempjes { get; set; }
        public virtual DbSet<Test1> Test1s { get; set; }
        public virtual DbSet<Test2> Test2s { get; set; }
        public virtual DbSet<TestFataly> TestFatalies { get; set; }
        public virtual DbSet<TestFtpFile> TestFtpFiles { get; set; }
        public virtual DbSet<TestKamil> TestKamils { get; set; }
        public virtual DbSet<TestKamil1> TestKamil1s { get; set; }
        public virtual DbSet<ZEsium> ZEsia { get; set; }
        public virtual DbSet<Zzz> Zzzs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=192.168.34.5;Port=5432;Database=MFC;User Id=postgres;Password=!ShamiL7");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("adminpack")
                .HasPostgresExtension("pg_buffercache")
                .HasPostgresExtension("pg_stat_statements")
                .HasPostgresExtension("pldbgapi")
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251");

            modelBuilder.Entity<ApiManagerPanelActiveOperator>(entity =>
            {
                entity.ToTable("api_manager_panel_active_operator");

                entity.HasComment("Общие данные");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий (Запрос через каждые 10 мин)");

                entity.Property(e => e.CountActiveOperator)
                    .HasColumnName("count_active_operator")
                    .HasComment("Количество активных операторов");

                entity.Property(e => e.DateQuery)
                    .HasPrecision(6)
                    .HasColumnName("date_query")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время запроса");
            });

            modelBuilder.Entity<ApiManagerPanelQueue>(entity =>
            {
                entity.ToTable("api_manager_panel_queue");

                entity.HasComment("Данные по электронной очереди");

                entity.HasIndex(e => e.Id, "api_queue_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий (Запрос через каждые 10 мин)");

                entity.Property(e => e.DateAnswer)
                    .HasPrecision(6)
                    .HasColumnName("date_answer")
                    .HasComment("Дата ответа");

                entity.Property(e => e.DateQuery)
                    .HasPrecision(6)
                    .HasColumnName("date_query")
                    .HasComment("Дата запроса");

                entity.Property(e => e.AverageWaitingTime)
                   .HasColumnType("time(6) without time zone")
                   .HasColumnName("average_waiting_time")
                   .HasComment("Среднее время ожидания");

                entity.Property(e => e.CountCustomerLittle)
                    .HasColumnName("count_customer_little")
                    .HasComment("Кол-во заявителей ожидающих менее 15 мин");

                entity.Property(e => e.CountCustomerLong)
                    .HasColumnName("count_customer_long")
                    .HasComment("Кол-во заявителей ожидающих более 15 мин");

                entity.Property(e => e.CountWorkWindows)
                    .HasColumnName("count_work_windows")
                    .HasComment("Кол-во окон ведущих прием");

                entity.Property(e => e.MaxWaitTime)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("max_wait_time")
                    .HasComment("Максимальное время ожидания");

                entity.Property(e => e.MinWaitTime)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("min_wait_time")
                    .HasComment("Минимальное время ожидания");

                entity.Property(e => e.CountActiveOperator)
                   .HasColumnName("count_active_operator")
                   .HasComment("Количество активных операторов");
            });


            modelBuilder.Entity<ApiManagerPanelServiceDate>(entity =>
            {
                entity.ToTable("api_manager_panel_service_date");

                entity.HasComment("Дата и время запросов по услугам");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий (Один раз в день)");

                entity.Property(e => e.DateAnswer)
                    .HasPrecision(6)
                    .HasColumnName("date_answer")
                    .HasComment("Дата ответа");

                entity.Property(e => e.DateQuery)
                    .HasPrecision(6)
                    .HasColumnName("date_query")
                    .HasComment("Дата запроса");

                entity.Property(e => e.ReceivedCountMonth)
                    .HasColumnName("received_count_month")
                    .HasComment("Количество принятых услуг за месяц");

                entity.Property(e => e.ExecutedCountMonth)
                    .HasColumnName("executed_count_month")
                    .HasComment("Количество исполненных  услуг за месяц");

                entity.Property(e => e.CountExecutionService)
                    .HasColumnName("count_execution_service")
                    .HasComment("Количество услуг на исполнение");

                entity.Property(e => e.CountExpiredService)
                    .HasColumnName("count_expired_service")
                    .HasComment("Количество просроченных услуг");

                entity.Property(e => e.CountExpiredStages)
                    .HasColumnName("count_expired_stages")
                    .HasComment("Количество просроченных этапов");

                entity.Property(e => e.PercentExpiredService)
                  .HasPrecision(15, 2)
                    .HasColumnName("percent_expired_service")
                    .HasComment("Процент просроченных услуг");

                entity.Property(e => e.PercentExpiredStages)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_expired_stages")
                    .HasComment("Процент просроченных этапов");

            });

            modelBuilder.Entity<ApiManagerPanelQueueInfo>(entity =>
            {
                entity.ToTable("api_manager_panel_queue_info");

                entity.HasComment("Доп инфа Данные по электронной очереди");

                entity.HasIndex(e => e.ApiManagerPanelQueueId, "api_queue_info_api_queue_id_idx");

                entity.HasIndex(e => e.Id, "api_queue_info_id_idx");

                entity.HasIndex(e => e.SprEmployeesMfcId, "api_queue_info_spr_employees_mfc_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ApiManagerPanelQueueId)
                    .HasColumnName("api_manager_panel_queue_id")
                    .HasComment("Данные по электронной очереди");

                entity.Property(e => e.AverageWaitingTime)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("average_waiting_time")
                    .HasComment("Среднее время ожидания");

                entity.Property(e => e.CountCustomerLittle)
                    .HasColumnName("count_customer_little")
                    .HasComment("Кол-во заявителей ожидающих менее 15 мин");

                entity.Property(e => e.CountCustomerLong)
                    .HasColumnName("count_customer_long")
                    .HasComment("Кол-во заявителей ожидающих более 15 мин");

                entity.Property(e => e.CountWorkWindows)
                    .HasColumnName("count_work_windows")
                    .HasComment("Кол-во окон ведущих прием");

                entity.Property(e => e.MaxWaitTime)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("max_wait_time")
                    .HasComment("Максимальное время ожидания");

                entity.Property(e => e.MfcId)
                    .HasColumnName("mfc_id")
                    .HasComment("id мфц(в очереди int)");

                entity.Property(e => e.MfcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.MinWaitTime)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("min_wait_time")
                    .HasComment("Минимальное время ожидания");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.CountActiveOperator)
                   .HasColumnName("count_active_operator")
                   .HasComment("Количество активных операторов");

                entity.HasOne(d => d.ApiManagerPanelQueue)
                    .WithMany(p => p.ApiManagerPanelQueueInfos)
                    .HasForeignKey(d => d.ApiManagerPanelQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("api_manager_panel_queue_info_api_manager_panel_queue_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ApiManagerPanelQueueInfos)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("api_manager_panel_queue_info_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ApiManagerPanelServicePeriod>(entity =>
            {
                entity.ToTable("api_manager_panel_service_period");

                entity.HasComment("Данные по услугам остальные");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий (Запрос один раз в день)");

                entity.Property(e => e.CountExecutedMonth)
                    .HasColumnName("count_executed_month")
                    .HasComment("Общее кол-во исполненных услуг за месяц");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.CountExecutedQuarter)
                    .HasColumnName("count_executed_quarter")
                    .HasComment("Общее кол-во исполненных услуг за квартал");

                entity.Property(e => e.CountExecutedWeek)
                    .HasColumnName("count_executed_week")
                    .HasComment("Общее кол-во исполненных услуг за неделю");

                entity.Property(e => e.CountExecutedYear)
                    .HasColumnName("count_executed_year")
                    .HasComment("Общее кол-во исполненных услуг за год");

                entity.Property(e => e.CountExpired)
                    .HasColumnName("count_expired")
                    .HasComment("Количество просроченных услуг");

                entity.Property(e => e.CountExpiredStage)
                    .HasColumnName("count_expired_stage")
                    .HasComment("Количество просроченных этапов");

                entity.Property(e => e.CountExecutionStage)
                    .HasColumnName("count_execution_stage")
                    .HasComment("Общее количество этапов на исполнение");

                entity.Property(e => e.CountExecutionService)
                    .HasColumnName("count_execution_service")
                    .HasComment("Общее количество услуг на исполнение");

                entity.Property(e => e.CountReceivedMonth)
                    .HasColumnName("count_received_month")
                    .HasComment("Общее кол-во принятых услуг за месяц");

                entity.Property(e => e.CountReceivedQuarter)
                    .HasColumnName("count_received_quarter")
                    .HasComment("Общее кол-во принятых услуг за квартал");

                entity.Property(e => e.CountReceivedWeek)
                    .HasColumnName("count_received_week")
                    .HasComment("Общее кол-во принятых услуг за неделю");

                entity.Property(e => e.CountReceivedYear)
                    .HasColumnName("count_received_year")
                    .HasComment("Общее кол-во принятых услуг за год");

                entity.Property(e => e.PercentExpired)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_expired")
                    .HasComment("Процент просроченных услуг");

                entity.Property(e => e.PercentExpiredStage)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_expired_stage")
                    .HasComment("Процент просроченных этапов");

                entity.Property(e => e.ApiManagerPanelServiceDateId)
                    .HasColumnName("api_manager_panel_service_date_id")
                    .HasComment("Дата запроса");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ApiManagerPanelServicePeriods)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("api_manager_panel_service_period_fk");

                entity.HasOne(d => d.ApiManagerPanelServiceDate)
                    .WithMany(p => p.ApiManagerPanelServicePeriods)
                    .HasForeignKey(d => d.ApiManagerPanelServiceDateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("api_manager_panel_service_period_date_fk");
            });

            modelBuilder.Entity<ApiManagerPanelStateTask>(entity =>
            {
                entity.ToTable("api_manager_panel_state_task");

                entity.HasComment("Процент исполнения госзадания");

                entity.HasIndex(e => e.Id, "api_queue_state_task_id_idx");

                entity.HasIndex(e => e.SprEmployeesMfcId, "api_queue_state_task_spr_employees_mfc_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий (Запрос один раз в день)");

                entity.Property(e => e.DateQuery)
                    .HasPrecision(6)
                    .HasColumnName("date_query")
                    .HasComment("Дата и время запроса");

                entity.Property(e => e.Percent)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent")
                    .HasComment("Процент");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.CountServiceFact)
                    .HasColumnName("count_service_fact")
                    .HasComment("Количество факт услуг");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ApiManagerPanelStateTasks)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("api_queue_state_task_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ApiUser>(entity =>
            {
                entity.ToTable("api_users");

                entity.HasComment("Пользователи");

                entity.HasIndex(e => e.Id, "api_users_idx1");

                entity.HasIndex(e => e.UserLogin, "api_users_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("id");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasColumnName("active")
                    .HasDefaultValueSql("true")
                    .HasComment("активная учетная запись ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата создания");

                entity.Property(e => e.UserLogin)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("user_login")
                    .HasComment("логин");

                entity.Property(e => e.UserPass)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("user_pass")
                    .HasComment("пароль");
            });

            modelBuilder.Entity<ArchiveCoverLetter>(entity =>
            {
                entity.ToTable("archive_cover_letter");

                entity.HasComment("Архив сопроводительных писем");

                entity.HasIndex(e => e.ArchiveServicesId, "archive_cover_letter_archive_services_id_idx");

                entity.HasIndex(e => e.Id, "archive_cover_letter_id_idx");

                entity.HasIndex(e => e.SprEmployeesId, "archive_cover_letter_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("Связь с таблицей услуг");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasComment("Время добавление записи");

                entity.Property(e => e.EmployeeFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employee_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.JsonData)
                    .HasColumnType("jsonb")
                    .HasColumnName("json_data")
                    .HasComment("Содержание сопроводительного письма");

                entity.Property(e => e.NumberCoverLetter)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("number_cover_letter")
                    .HasComment("Код письма");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Связь со справочником сотрудников");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveCoverLetters)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_cover_letter_archive_services_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveCoverLetters)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_cover_letter_spr_employees_id_fkey");
            });

            modelBuilder.Entity<ArchiveForSearch>(entity =>
            {
                entity.ToTable("archive_for_search");

                entity.HasComment("Поиск по архиву");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_for_search_archive_services_info_id_idx");

                entity.HasIndex(e => e.Id, "archive_for_search_id_idx");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_for_search_spr_employees_mfc_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела,связь с archive_services_info id");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(500)
                    .HasColumnName("customer_address")
                    .HasComment("адрес заявителя");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("телефон 1");

                entity.Property(e => e.DateEnter)
                    .HasColumnType("date")
                    .HasColumnName("date_enter")
                    .HasComment("дата ввода");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("document_number")
                    .HasComment("номер документа");

                entity.Property(e => e.DocumentSerial)
                    .HasMaxLength(10)
                    .HasColumnName("document_serial")
                    .HasComment("серия документа");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio");

                entity.Property(e => e.EmployeesFioExecuted)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_executed");

                entity.Property(e => e.MfcNameSmall)
                    .HasMaxLength(500)
                    .HasColumnName("mfc_name_small");

                entity.Property(e => e.SprEmployeesMfcId).HasColumnName("spr_employees_mfc_id");

                entity.Property(e => e.SprServicesProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("spr_services_provider_name")
                    .HasComment("наименование ОИВ, храним на всякий случай");

                entity.Property(e => e.SprServicesSubName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("spr_services_sub_name");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .HasColumnName("status_name");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveForSearches)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_for_search_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ArchivePremium>(entity =>
            {
                entity.ToTable("archive_premium");

                entity.HasComment("Зарплата сотрудников");

                entity.HasIndex(e => e.Id, "archive_premium_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.PeriodDate, e.Type }, "archive_premium_idx2");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesJobPosId, e.SprEmployeesMfcId, e.SprEmployeesId, e.Type, e.EmployeesSalary }, "archive_premium_idx3");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.PeriodDate }, "archive_premium_idx4");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_premium_idx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование МФЦ");

                entity.Property(e => e.EmployeesPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_premium")
                    .HasComment("зарплата без штрафов");

                entity.Property(e => e.EmployeesPremiumIasMkgu)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_premium_ias_mkgu")
                    .HasComment("интенсивность за иас мкгу с сайта");

                entity.Property(e => e.EmployeesPremiumIasMkguOur)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_premium_ias_mkgu_our")
                    .HasComment("интенсивность за иас мкгу наш");

                entity.Property(e => e.EmployeesPremiumQueue)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_premium_queue")
                    .HasComment("интенсивность за эл очередь");

                entity.Property(e => e.EmployeesPremiumTotal)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_premium_total")
                    .HasComment("зарплата с учетом штрафов");

                entity.Property(e => e.EmployeesSalary)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_salary")
                    .HasComment("оклад сотрудника за день");

                entity.Property(e => e.EmployeesStake)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_stake")
                    .HasComment("ставка сотрудника");

                entity.Property(e => e.FinePercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_percent")
                    .HasComment("процент штрафов");

                entity.Property(e => e.FineSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_sum")
                    .HasComment("сумма штрафа");

                entity.Property(e => e.PeriodCountDay)
                    .HasColumnName("period_count_day")
                    .HasComment("количество дней в периоде");

                entity.Property(e => e.PeriodDate)
                    .HasColumnType("date")
                    .HasColumnName("period_date")
                    .HasComment("день");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления данных");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees _job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц , spr_employees _mfc id");

                entity.Property(e => e.StepPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("step_premium")
                    .HasComment("Сумма за выполненые действия");

                entity.Property(e => e.StepPremiumOther)
                    .HasPrecision(15, 2)
                    .HasColumnName("step_premium_other")
                    .HasComment("Надбавка за чужие действия");

                entity.Property(e => e.Type)
                    .HasColumnName("type_")
                    .HasComment("тип 1 -основная работа, 2 - совмещение");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchivePremia)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.ArchivePremia)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchivePremia)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ArchivePremiumFine>(entity =>
            {
                entity.ToTable("archive_premium_fine");

                entity.HasComment("Архив штрафов");

                entity.HasIndex(e => e.DataServicesInfoId, "archive_premium_fine_data_services_info_id_idx");

                entity.HasIndex(e => e.DateFine, "archive_premium_fine_date_fine_idx");

                entity.HasIndex(e => e.Id, "archive_premium_fine_id_idx")
                    .IsUnique();

                entity.HasIndex(e => e.ArchivePremiumId, "archive_premium_fine_premium_id_idx");

                entity.HasIndex(e => e.SprRoutesStageId, "archive_premium_fine_spr_routes_stage_id_idx");

                entity.HasIndex(e => e.SprServicesSubId, "archive_premium_fine_spr_services_sub_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchivePremiumId)
                    .HasColumnName("archive_premium_id")
                    .HasComment("Зарплата сотрудников");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Обращение");

                entity.Property(e => e.DateFine)
                    .HasColumnType("date")
                    .HasColumnName("date_fine")
                    .HasComment("Дата штрафа");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("Сотрудник");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность сотрудника");

                entity.Property(e => e.FinePercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_percent")
                    .HasComment("Процент штрафа");

                entity.Property(e => e.FineSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_sum")
                    .HasComment("Сумма штрафа");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("Наименование подуслуги");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("Этап");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Подуслуга");

                entity.Property(e => e.StageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("stage_name")
                    .HasComment("Наименование этапа");
            });

            modelBuilder.Entity<ArchivePremiumFineSum>(entity =>
            {
                entity.ToTable("archive_premium_fine_sum");

                entity.HasComment("Штрафы сотрудников");

                entity.HasIndex(e => e.Id, "archive_premium_fine_sum_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchivePremiumId, "archive_premium_fine_sum_idx2");

                entity.HasIndex(e => e.SprServicesSubId, "archive_premium_fine_sum_idx3");

                entity.HasIndex(e => e.DataServicesInfoId, "archive_premium_fine_sum_idx4");

                entity.HasIndex(e => e.SprRoutesStageId, "archive_premium_fine_sum_idx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchivePremiumId)
                    .HasColumnName("archive_premium_id")
                    .HasComment("связь с archive_premium_id");

                entity.Property(e => e.CommenttDel)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_del")
                    .HasComment("комментарий при удалении записи");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, data_services_info_id");

                entity.Property(e => e.DateDel)
                    .HasColumnName("date_del")
                    .HasComment("дата и время удаления");

                entity.Property(e => e.DateFine)
                    .HasColumnType("date")
                    .HasColumnName("date_fine")
                    .HasComment("дата штрафа");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesFioDel)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_del")
                    .HasComment("кто удалил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.FinePercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_percent")
                    .HasComment("дни штрафа");

                entity.Property(e => e.FineSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_sum")
                    .HasComment("сумма штрафа");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("связь с этапом, spr_routes_stage id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.Property(e => e.StageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("stage_name")
                    .HasComment("наименование этапа");

                entity.HasOne(d => d.ArchivePremium)
                    .WithMany(p => p.ArchivePremiumFineSums)
                    .HasForeignKey(d => d.ArchivePremiumId)
                    .HasConstraintName("archive_premium_fine_sum_archive_premium_id_fkey");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.ArchivePremiumFineSums)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_fine_sum_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.ArchivePremiumFineSums)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_fine_sum_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<ArchivePremiumStep>(entity =>
            {
                entity.ToTable("archive_premium_step");

                entity.HasComment("Действия совершенные содрудниками");

                entity.HasIndex(e => e.Id, "archive_premium_step_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesId, e.SprEmployeesJobPosId, e.SprServicesSubId }, "archive_premium_step_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "archive_premium_step_idx3");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_premium_step_idx4");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_premium_step_idx5");

                entity.HasIndex(e => e.SprServicesSubId, "archive_premium_step_idx6");

                entity.HasIndex(e => e.DateStep, "archive_premium_step_idx7");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesInfoId)
                    .HasColumnType("character varying")
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела , связь с data_services_info id");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStep)
                    .HasColumnType("date")
                    .HasColumnName("date_step")
                    .HasComment("дата действия");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("spr_employees_job_pos_id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц сотрудника , связь с  spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("действие в таблице spr_services_sub_premium в описании прописаны какие id");

                entity.Property(e => e.StepPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("step_premium")
                    .HasComment("сумма за совершенные действия");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchivePremiumSteps)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_step_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.ArchivePremiumSteps)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_step_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchivePremiumSteps)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_step_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.ArchivePremiumSteps)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_step_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<ArchivePremiumStepService>(entity =>
            {
                entity.ToTable("archive_premium_step_services");

                entity.HasComment("Итоговые действия сотрудника к зарплате , итог");

                entity.HasIndex(e => e.Id, "archive_premium_step_services_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchivePremiumId, "archive_premium_step_services_idx3");

                entity.HasIndex(e => e.SprServicesSubId, "archive_premium_step_services_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchivePremiumId)
                    .HasColumnName("archive_premium_id")
                    .HasComment("связь с основными данными ,archive_premium_id\n");

                entity.Property(e => e.CallCustomer)
                    .HasPrecision(15, 2)
                    .HasColumnName("call_customer")
                    .HasComment("звонок заявителю");

                entity.Property(e => e.CallCustomerCount)
                    .HasColumnName("call_customer_count")
                    .HasComment("звонки количество");

                entity.Property(e => e.CommenttAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("commentt_add")
                    .HasComment("добавление примечания");

                entity.Property(e => e.CommenttAddCount)
                    .HasColumnName("commentt_add_count")
                    .HasComment("примечания количество");

                entity.Property(e => e.CustomerAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("customer_add")
                    .HasComment("добавление заявителя");

                entity.Property(e => e.CustomerAddCount)
                    .HasColumnName("customer_add_count")
                    .HasComment("добавление заявителя количество");

                entity.Property(e => e.DocumentScan)
                    .HasPrecision(15, 2)
                    .HasColumnName("document_scan")
                    .HasComment("сканирование документа");

                entity.Property(e => e.DocumentScanCount)
                    .HasColumnName("document_scan_count")
                    .HasComment("сканирование количество");

                entity.Property(e => e.FormsAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("forms_add")
                    .HasComment("Добавление бланков");

                entity.Property(e => e.FormsAddCount)
                    .HasColumnName("forms_add_count")
                    .HasComment("бланки количество");

                entity.Property(e => e.IasMkguAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("ias_mkgu_add")
                    .HasComment("добавление анкеты иас мкгу");

                entity.Property(e => e.IasMkguAddCount)
                    .HasColumnName("ias_mkgu_add_count")
                    .HasComment("анкеты иас мкгу количество");

                entity.Property(e => e.PkpvdAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("pkpvd_add")
                    .HasComment("сумма за добавления дела в пкпвд");

                entity.Property(e => e.PkpvdAddCount)
                    .HasColumnName("pkpvd_add_count")
                    .HasComment("пкпвд количество");

                entity.Property(e => e.ProcessingPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("processing_premium")
                    .HasComment("обработка документов");

                entity.Property(e => e.ProcessingPremiumCount)
                    .HasColumnName("processing_premium_count")
                    .HasComment("обработка количество");

                entity.Property(e => e.ServiceAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_add")
                    .HasComment("добавление услуги");

                entity.Property(e => e.ServiceAddCount)
                    .HasColumnName("service_add_count")
                    .HasComment("добавление услуги количество");

                entity.Property(e => e.ServiceConsultation)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_consultation")
                    .HasComment("консультация");

                entity.Property(e => e.ServiceConsultationCount)
                    .HasColumnName("service_consultation_count")
                    .HasComment("консультации количество");

                entity.Property(e => e.ServiceExecuted)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_executed")
                    .HasComment("исполнение услуги");

                entity.Property(e => e.ServiceExecutedCount)
                    .HasColumnName("service_executed_count")
                    .HasComment("исполнение количество");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.SmevExecution)
                    .HasPrecision(15, 2)
                    .HasColumnName("smev_execution")
                    .HasComment("выполнение запроса СМЭВ");

                entity.Property(e => e.SmevExecutionCount)
                    .HasColumnName("smev_execution_count")
                    .HasComment("запросы смэв количество");

                entity.Property(e => e.SmsCustomer)
                    .HasPrecision(15, 2)
                    .HasColumnName("sms_customer")
                    .HasComment("смс заявителю");

                entity.Property(e => e.SmsCustomerCount)
                    .HasColumnName("sms_customer_count")
                    .HasComment("сообщения количество");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, с spr-services_sub id");

                entity.HasOne(d => d.ArchivePremium)
                    .WithMany(p => p.ArchivePremiumStepServices)
                    .HasForeignKey(d => d.ArchivePremiumId)
                    .HasConstraintName("archive_premium_step_services_archive_premium_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.ArchivePremiumStepServices)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_premium_step_services_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<ArchivePremiumStepSum>(entity =>
            {
                entity.ToTable("archive_premium_step_sum");

                entity.HasComment("Итоговые действия сотрудника к зарплате , итог");

                entity.HasIndex(e => e.Id, "archive_premium_step_sum_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchivePremiumId, "archive_premium_step_sum_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchivePremiumId)
                    .HasColumnName("archive_premium_id")
                    .HasComment("связь с основными данными , archive_premium_id");

                entity.Property(e => e.CallCustomer)
                    .HasPrecision(15, 2)
                    .HasColumnName("call_customer")
                    .HasComment("звонок заявителю");

                entity.Property(e => e.CallCustomerCount)
                    .HasColumnName("call_customer_count")
                    .HasComment("звонки количество");

                entity.Property(e => e.CommenttAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("commentt_add")
                    .HasComment("добавление примечания");

                entity.Property(e => e.CommenttAddCount)
                    .HasColumnName("commentt_add_count")
                    .HasComment("примечания количество");

                entity.Property(e => e.CustomerAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("customer_add")
                    .HasComment("добавление заявителя");

                entity.Property(e => e.CustomerAddCount)
                    .HasColumnName("customer_add_count")
                    .HasComment("добавление заявителя количество");

                entity.Property(e => e.DocumentScan)
                    .HasPrecision(15, 2)
                    .HasColumnName("document_scan")
                    .HasComment("сканирование документа");

                entity.Property(e => e.DocumentScanCount)
                    .HasColumnName("document_scan_count")
                    .HasComment("сканирование количество");

                entity.Property(e => e.FormsAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("forms_add")
                    .HasComment("Добавление бланков");

                entity.Property(e => e.FormsAddCount)
                    .HasColumnName("forms_add_count")
                    .HasComment("бланки количество");

                entity.Property(e => e.IasMkguAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("ias_mkgu_add")
                    .HasComment("добавление анкеты иас мкгу");

                entity.Property(e => e.IasMkguAddCount)
                    .HasColumnName("ias_mkgu_add_count")
                    .HasComment("анкеты иас мкгу количество");

                entity.Property(e => e.PkpvdAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("pkpvd_add")
                    .HasComment("сумма за добавления дела в пкпвд");

                entity.Property(e => e.PkpvdAddCount)
                    .HasColumnName("pkpvd_add_count")
                    .HasComment("пкпвд количество");

                entity.Property(e => e.ProcessingPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("processing_premium")
                    .HasComment(" обработка документов");

                entity.Property(e => e.ProcessingPremiumCount)
                    .HasColumnName("processing_premium_count")
                    .HasComment("обработка количество");

                entity.Property(e => e.ServiceAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_add")
                    .HasComment("добавление услуги");

                entity.Property(e => e.ServiceAddCount)
                    .HasColumnName("service_add_count")
                    .HasComment("добавление услуги количество");

                entity.Property(e => e.ServiceConsultation)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_consultation")
                    .HasComment("консультация");

                entity.Property(e => e.ServiceConsultationCount)
                    .HasColumnName("service_consultation_count")
                    .HasComment("консультации количество");

                entity.Property(e => e.ServiceExecuted)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_executed")
                    .HasComment("исполнение услуги");

                entity.Property(e => e.ServiceExecutedCount)
                    .HasColumnName("service_executed_count")
                    .HasComment("исполнение количество");

                entity.Property(e => e.SmevExecution)
                    .HasPrecision(15, 2)
                    .HasColumnName("smev_execution")
                    .HasComment("выполнение запроса СМЭВ");

                entity.Property(e => e.SmevExecutionCount)
                    .HasColumnName("smev_execution_count")
                    .HasComment("запросы смэв количество");

                entity.Property(e => e.SmsCustomer)
                    .HasPrecision(15, 2)
                    .HasColumnName("sms_customer")
                    .HasComment("смс заявителю");

                entity.Property(e => e.SmsCustomerCount)
                    .HasColumnName("sms_customer_count")
                    .HasComment("сообщения количество");

                entity.HasOne(d => d.ArchivePremium)
                    .WithMany(p => p.ArchivePremiumStepSums)
                    .HasForeignKey(d => d.ArchivePremiumId)
                    .HasConstraintName("archive_premium_step_sum_archive_premium_id_fkey");
            });

            modelBuilder.Entity<ArchiveRatingExecutedEmployee>(entity =>
            {
                entity.ToTable("archive_rating_executed_employees");

                entity.HasComment("Рейтинг по исполненым услугам в разрезе сотрудников");

                entity.HasIndex(e => e.Id, "archive_rating_executed_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "archive_rating_executed_employees_idx2");

                entity.HasIndex(e => e.PeriodDate, "archive_rating_executed_employees_idx3");

                entity.HasIndex(e => e.PeriodMonth, "archive_rating_executed_employees_idx4");

                entity.HasIndex(e => e.PeriodYear, "archive_rating_executed_employees_idx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AllPosition)
                    .HasColumnName("all_position")
                    .HasComment("позиция за все время");

                entity.Property(e => e.AllPositionMfc)
                    .HasColumnName("all_position_mfc")
                    .HasComment("позиция за месяц в своем мфц");

                entity.Property(e => e.AllPositionMoving)
                    .HasColumnName("all_position_moving")
                    .HasComment("за все время перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.AllPositionMovingMfc)
                    .HasColumnName("all_position_moving_mfc")
                    .HasComment("за все время перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.AllRating)
                    .HasColumnName("all_rating")
                    .HasComment("рейтинг за все время");

                entity.Property(e => e.DayPosition)
                    .HasColumnName("day_position")
                    .HasComment("позиция за день");

                entity.Property(e => e.DayPositionMfc)
                    .HasColumnName("day_position_mfc")
                    .HasComment("рейтинг за день в своем мфц");

                entity.Property(e => e.DayPositionMoving)
                    .HasColumnName("day_position_moving")
                    .HasComment("за день перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.DayPositionMovingMfc)
                    .HasColumnName("day_position_moving_mfc")
                    .HasComment("за день перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.DayRating)
                    .HasColumnName("day_rating")
                    .HasComment("рейтинг за день");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.MonthPosition)
                    .HasColumnName("month_position")
                    .HasComment("позиция за месяц");

                entity.Property(e => e.MonthPositionMfc)
                    .HasColumnName("month_position_mfc")
                    .HasComment("рейтинг за месяц в своем мфц");

                entity.Property(e => e.MonthPositionMoving)
                    .HasColumnName("month_position_moving")
                    .HasComment("за месяц перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.MonthPositionMovingMfc)
                    .HasColumnName("month_position_moving_mfc")
                    .HasComment("за месяц перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.MonthRating)
                    .HasColumnName("month_rating")
                    .HasComment("рейтинг за месяц");

                entity.Property(e => e.PeriodDate)
                    .HasColumnType("date")
                    .HasColumnName("period_date")
                    .HasComment("дата");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник , связб с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц, связь с spr_employees_mfc id");

                entity.Property(e => e.YearPosition)
                    .HasColumnName("year_position")
                    .HasComment("годовая позиция");

                entity.Property(e => e.YearPositionMfc)
                    .HasColumnName("year_position_mfc")
                    .HasComment("рейтинг за год в своем мфц");

                entity.Property(e => e.YearPositionMoving)
                    .HasColumnName("year_position_moving")
                    .HasComment("за год перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.YearPositionMovingMfc)
                    .HasColumnName("year_position_moving_mfc")
                    .HasComment("за год перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.YearRating)
                    .HasColumnName("year_rating")
                    .HasComment("годовой рейтинг");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveRatingExecutedEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_rating_executed_employees_spr_employees_id_fkey");
            });

            modelBuilder.Entity<ArchiveRatingExecutedEmployeesMfc>(entity =>
            {
                entity.ToTable("archive_rating_executed_employees_mfc");

                entity.HasComment("Бланк");

                entity.HasIndex(e => e.Id, "archive_rating_executed_employees_mfc_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_rating_executed_employees_mfc_idx2");

                entity.HasIndex(e => e.PeriodDate, "archive_rating_executed_employees_mfc_idx3");

                entity.HasIndex(e => e.PeriodMonth, "archive_rating_executed_employees_mfc_idx4");

                entity.HasIndex(e => e.PeriodYear, "archive_rating_executed_employees_mfc_idx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AllPosition)
                    .HasColumnName("all_position")
                    .HasComment("позиция за все время");

                entity.Property(e => e.AllPositionMoving)
                    .HasColumnName("all_position_moving")
                    .HasComment("за все время перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.AllRating)
                    .HasColumnName("all_rating")
                    .HasComment("рейтинг за все время");

                entity.Property(e => e.DayPosition)
                    .HasColumnName("day_position")
                    .HasComment("позиция за день");

                entity.Property(e => e.DayPositionMoving)
                    .HasColumnName("day_position_moving")
                    .HasComment("за день перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.DayRating)
                    .HasColumnName("day_rating")
                    .HasComment("рейтинг за день");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.MonthPosition)
                    .HasColumnName("month_position")
                    .HasComment("позиция за месяц");

                entity.Property(e => e.MonthPositionMoving)
                    .HasColumnName("month_position_moving")
                    .HasComment("за месяц перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.MonthRating)
                    .HasColumnName("month_rating")
                    .HasComment("рейтинг за месяц");

                entity.Property(e => e.PeriodDate)
                    .HasColumnType("date")
                    .HasColumnName("period_date")
                    .HasComment("дата");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц, связь с spr_employees_mfc id");

                entity.Property(e => e.YearPosition)
                    .HasColumnName("year_position")
                    .HasComment("годовая позиция");

                entity.Property(e => e.YearPositionMoving)
                    .HasColumnName("year_position_moving")
                    .HasComment("за год перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.YearRating)
                    .HasColumnName("year_rating")
                    .HasComment("годовой рейтинг");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveRatingExecutedEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_rating_executed_employees_mfc_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ArchiveRatingReceivedEmployee>(entity =>
            {
                entity.ToTable("archive_rating_received_employees");

                entity.HasComment("Рейтинг по принятым услугам в разрезе сотрудников");

                entity.HasIndex(e => e.Id, "archive_rating_received_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_rating_received_employees_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "archive_rating_received_employees_idx3");

                entity.HasIndex(e => e.PeriodDate, "archive_rating_received_employees_idx4");

                entity.HasIndex(e => e.PeriodMonth, "archive_rating_received_employees_idx5");

                entity.HasIndex(e => e.PeriodYear, "archive_rating_received_employees_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AllPosition)
                    .HasColumnName("all_position")
                    .HasComment("позиция за все время");

                entity.Property(e => e.AllPositionMfc)
                    .HasColumnName("all_position_mfc")
                    .HasComment("позиция за месяц в своем мфц");

                entity.Property(e => e.AllPositionMoving)
                    .HasColumnName("all_position_moving")
                    .HasComment("за все время перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.AllPositionMovingMfc)
                    .HasColumnName("all_position_moving_mfc")
                    .HasComment("за все время перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.AllRating)
                    .HasColumnName("all_rating")
                    .HasComment("рейтинг за все время");

                entity.Property(e => e.DayPosition)
                    .HasColumnName("day_position")
                    .HasComment("позиция за день");

                entity.Property(e => e.DayPositionMfc)
                    .HasColumnName("day_position_mfc")
                    .HasComment("рейтинг за день в своем мфц");

                entity.Property(e => e.DayPositionMoving)
                    .HasColumnName("day_position_moving")
                    .HasComment("за день перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.DayPositionMovingMfc)
                    .HasColumnName("day_position_moving_mfc")
                    .HasComment("за день перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.DayRating)
                    .HasColumnName("day_rating")
                    .HasComment("рейтинг за день");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.MonthPosition)
                    .HasColumnName("month_position")
                    .HasComment("позиция за месяц");

                entity.Property(e => e.MonthPositionMfc)
                    .HasColumnName("month_position_mfc")
                    .HasComment("рейтинг за месяц в своем мфц");

                entity.Property(e => e.MonthPositionMoving)
                    .HasColumnName("month_position_moving")
                    .HasComment("за месяц перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.MonthPositionMovingMfc)
                    .HasColumnName("month_position_moving_mfc")
                    .HasComment("за месяц перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.MonthRating)
                    .HasColumnName("month_rating")
                    .HasComment("рейтинг за месяц");

                entity.Property(e => e.PeriodDate)
                    .HasColumnType("date")
                    .HasColumnName("period_date")
                    .HasComment("дата");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник , связб с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц, связь с spr_employees_mfc id");

                entity.Property(e => e.YearPosition)
                    .HasColumnName("year_position")
                    .HasComment("годовая позиция");

                entity.Property(e => e.YearPositionMfc)
                    .HasColumnName("year_position_mfc")
                    .HasComment("рейтинг за год в своем мфц");

                entity.Property(e => e.YearPositionMoving)
                    .HasColumnName("year_position_moving")
                    .HasComment("за год перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.YearPositionMovingMfc)
                    .HasColumnName("year_position_moving_mfc")
                    .HasComment("за год перемещение по позиции -1 вниз 0 на месте 1 вверх по своему мфц");

                entity.Property(e => e.YearRating)
                    .HasColumnName("year_rating")
                    .HasComment("годовой рейтинг");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveRatingReceivedEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_rating_received_employees_spr_employees_id_fkey");
            });

            modelBuilder.Entity<ArchiveRatingReceivedEmployeesMfc>(entity =>
            {
                entity.ToTable("archive_rating_received_employees_mfc");

                entity.HasComment("Рейтинг по принятым услугам в разрезе мфц");

                entity.HasIndex(e => e.Id, "archive_rating_received_employees_mfc_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.PeriodDate, "archive_rating_received_employees_mfc_idx2");

                entity.HasIndex(e => e.PeriodMonth, "archive_rating_received_employees_mfc_idx3");

                entity.HasIndex(e => e.PeriodYear, "archive_rating_received_employees_mfc_idx4");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_rating_received_employees_mfc_idx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AllPosition)
                    .HasColumnName("all_position")
                    .HasComment("позиция за все время");

                entity.Property(e => e.AllPositionMoving)
                    .HasColumnName("all_position_moving")
                    .HasComment("за все время перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.AllRating)
                    .HasColumnName("all_rating")
                    .HasComment("рейтинг за все время");

                entity.Property(e => e.DayPosition)
                    .HasColumnName("day_position")
                    .HasComment("позиция за день");

                entity.Property(e => e.DayPositionMoving)
                    .HasColumnName("day_position_moving")
                    .HasComment("за день перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.DayRating)
                    .HasColumnName("day_rating")
                    .HasComment("рейтинг за день");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.MonthPosition)
                    .HasColumnName("month_position")
                    .HasComment("позиция за месяц");

                entity.Property(e => e.MonthPositionMoving)
                    .HasColumnName("month_position_moving")
                    .HasComment("за месяц перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.MonthRating)
                    .HasColumnName("month_rating")
                    .HasComment("рейтинг за месяц");

                entity.Property(e => e.PeriodDate)
                    .HasColumnType("date")
                    .HasColumnName("period_date")
                    .HasComment("дата");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц, связь с spr_employees_mfc id");

                entity.Property(e => e.YearPosition)
                    .HasColumnName("year_position")
                    .HasComment("годовая позиция");

                entity.Property(e => e.YearPositionMoving)
                    .HasColumnName("year_position_moving")
                    .HasComment("за год перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.YearRating)
                    .HasColumnName("year_rating")
                    .HasComment("годовой рейтинг");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveRatingReceivedEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_rating_received_employees_mfc_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ArchiveService>(entity =>
            {
                entity.ToTable("archive_services");

                entity.HasComment("Список текущих услуг");

                entity.HasIndex(e => e.Id, "archive_services_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_idx10");

                entity.HasIndex(e => e.SprEmployeesIdExecution, "archive_services_idx11");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_idx12");

                entity.HasIndex(e => e.SprEmployeesJobPosIdExecution, "archive_services_idx13");

                entity.HasIndex(e => e.SprEmployeesMfcIdExecution, "archive_services_idx14");

                entity.HasIndex(e => e.SprServicesSubTrId, "archive_services_idx15");

                entity.HasIndex(e => e.SprServicesSubStatusId, "archive_services_idx16");

                entity.HasIndex(e => e.SprServicesSubWeekId, "archive_services_idx17");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.SprServicesSubTrId }, "archive_services_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubId, e.SprServicesProviderId, e.SprServicesSubStatusId, e.DateEnter, e.DateFinishFact }, "archive_services_idx3");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.SprServicesSubStatusId, e.SprServicesSubWeekId }, "archive_services_idx4");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.SprServicesSubId, e.SprServicesSubStatusId }, "archive_services_idx5");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.ArchiveServicesIdParent, e.SprServicesSubId, e.SprServicesProviderId, e.SprServicesSubStatusId }, "archive_services_idx6");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.ArchiveServicesIdParent, e.DateEnter }, "archive_services_idx7");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.SprEmployeesMfcId, e.SprServicesSubStatusId, e.SprServicesProviderId, e.DateFinishFact, e.DateEnter }, "archive_services_idx8");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubId, e.SprServicesProviderId, e.SprServicesSubStatusId, e.DateEnter }, "archive_services_idx9");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesDocumentIdParent)
                    .HasColumnName("archive_services_document_id_parent")
                    .HasComment("связь с головным документом, archive_services_documents id");

                entity.Property(e => e.ArchiveServicesIdParent)
                    .HasColumnName("archive_services_id_parent")
                    .HasComment("связь с голвной услугой archive_services id_parent");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела, связь с archive_services_info id");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("колв-во дней на исполнение услуги(ОИВ) по регламенту");

                entity.Property(e => e.CountDayProcessing)
                    .HasColumnName("count_day_processing")
                    .HasComment("количество дней на обработку");

                entity.Property(e => e.CountDayReturn)
                    .HasColumnName("count_day_return")
                    .HasComment("количество дней на возврат от исполнителя");

                entity.Property(e => e.DateEnter)
                    .HasColumnType("date")
                    .HasColumnName("date_enter")
                    .HasComment("дата ввода");

                entity.Property(e => e.DateFinishFact)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_fact")
                    .HasComment("дата завешения услуги,фактическая");

                entity.Property(e => e.DateFinishTotal)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_total")
                    .HasComment("дата планового заврешения услуги с учетом выше стоящих услуг");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто добавил запись ФИО");

                entity.Property(e => e.EmployeesFioExecuted)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_executed")
                    .HasComment("Кто исполнил услугу");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должнолсть того кто принял услугу");

                entity.Property(e => e.EmployeesJobPosNameExecuted)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name_executed")
                    .HasComment("Должность того кто исполнил услугу");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Мфц в котором принята услуга");

                entity.Property(e => e.EmployeesMfcNameExecuted)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name_executed")
                    .HasComment("Мфц в котором исполнена услуга");

                entity.Property(e => e.FrguProviderId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("ID ФРГУ, ID Поставщика");

                entity.Property(e => e.FrguServicesId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_id")
                    .HasComment("ID услуги ФРГУ");

                entity.Property(e => e.FrguTargetId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_target_id")
                    .HasComment("id цели из ФРГУ");

                entity.Property(e => e.IasMkgu)
                    .HasColumnName("ias_mkgu")
                    .HasComment("учавствует услуга в иас мкгу или нет");

                entity.Property(e => e.NodeNumber)
                    .HasColumnName("node_number")
                    .HasComment("глубина дерева");

                entity.Property(e => e.ReportSelect)
                    .HasColumnName("report_select")
                    .HasComment("выводить в отчетах, да или нет");

                entity.Property(e => e.ServicesProviderName)
                    .HasMaxLength(350)
                    .HasColumnName("services_provider_name")
                    .HasComment("Наименование поставщика");

                entity.Property(e => e.ServicesSubName)
                    .HasMaxLength(1000)
                    .HasColumnName("services_sub_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id, кто занес услугу");

                entity.Property(e => e.SprEmployeesIdExecution)
                    .HasColumnName("spr_employees_id_execution")
                    .HasComment("кто исполнил,связь с spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника , кто принял услугу,связь spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesJobPosIdExecution)
                    .HasColumnName("spr_employees_job_pos_id_execution")
                    .HasComment("должность сотрудника , кто исполнил услугу , связь spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("в каком МФЦ принята услуга,связь с spr_employees_mfc id");

                entity.Property(e => e.SprEmployeesMfcIdExecution)
                    .HasColumnName("spr_employees_mfc_id_execution")
                    .HasComment("в каком мфц исполнили,связь с spr_employees_mfc id ");

                entity.Property(e => e.SprEmployeesMfcRemoteWorkplaceId)
                    .HasColumnName("spr_employees_mfc_remote_workplace_id")
                    .HasComment("Отдаленные рабочие места МФЦ");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("Удалить");

                entity.Property(e => e.SprServicesProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("spr_services_provider_name")
                    .HasComment("наименование ОИВ, храним на всякий случай");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с подуслугой,spr_services_sub id");

                entity.Property(e => e.SprServicesSubName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("spr_services_sub_name")
                    .HasComment("Удалить");

                entity.Property(e => e.SprServicesSubStatusId)
                    .HasColumnName("spr_services_sub_status_id")
                    .HasComment("статус услуги, spr_services_sub_status id");

                entity.Property(e => e.SprServicesSubTariffTypeId)
                    .HasColumnName("spr_services_sub_tariff_type_id")
                    .HasComment("тип тарифа связь с spr_services_sub_tariff_type id");

                entity.Property(e => e.SprServicesSubTrId)
                    .HasColumnName("spr_services_sub_tr_id")
                    .HasComment("тип получателя, spr_services_type_recipient id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("Связь с spr_services_sub_week id,  тип расчета дней услуги в ОИВ");

                entity.Property(e => e.TariffEdit)
                    .HasColumnName("tariff_edit")
                    .HasComment("возможность редактирования тарифа");

                entity.Property(e => e.TariffMfc)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_mfc")
                    .HasComment("Тариф для МФЦ");

                entity.Property(e => e.TariffState)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_state")
                    .HasComment("гос пошлина");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServices)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServiceSprEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesIdExecutionNavigation)
                    .WithMany(p => p.ArchiveServiceSprEmployeesIdExecutionNavigations)
                    .HasForeignKey(d => d.SprEmployeesIdExecution)
                    .HasConstraintName("archive_data_services_spr_employees_id_execution_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.ArchiveServiceSprEmployeesJobPos)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPosIdExecutionNavigation)
                    .WithMany(p => p.ArchiveServiceSprEmployeesJobPosIdExecutionNavigations)
                    .HasForeignKey(d => d.SprEmployeesJobPosIdExecution)
                    .HasConstraintName("archive_data_services_spr_employees_job_pos_id_execution_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveServiceSprEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcIdExecutionNavigation)
                    .WithMany(p => p.ArchiveServiceSprEmployeesMfcIdExecutionNavigations)
                    .HasForeignKey(d => d.SprEmployeesMfcIdExecution)
                    .HasConstraintName("archive_data_services_spr_employees_mfc_id_execution_fkey");

                entity.HasOne(d => d.SprEmployeesMfcRemoteWorkplace)
                    .WithMany(p => p.ArchiveServices)
                    .HasForeignKey(d => d.SprEmployeesMfcRemoteWorkplaceId)
                    .HasConstraintName("archive_services_spr_employees_mfc_remote_workplace_id_fkey");

                entity.HasOne(d => d.SprServicesSubStatus)
                    .WithMany(p => p.ArchiveServices)
                    .HasForeignKey(d => d.SprServicesSubStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_spr_services_sub_status_id_fkey");

                entity.HasOne(d => d.SprServicesSubTr)
                    .WithMany(p => p.ArchiveServices)
                    .HasForeignKey(d => d.SprServicesSubTrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_spr_services_sub_tr_id_fkey");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.ArchiveServices)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_data_services_spr_services_sub_week_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesAisOpvChat>(entity =>
            {
                entity.ToTable("archive_services_ais_opv_chat");

                entity.HasComment("Таблица для хранения чата с АИС ОПВ");

                entity.HasIndex(e => new { e.ChatDirection, e.ReceivedOrSentTime, e.OutcomingMessageInvalid }, "archive_services_ais_opv_chat_chat_direction_received_or_se_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.ArchiveServicesSmevRequestId)
                    .HasColumnName("archive_services_smev_request_id")
                    .HasComment("Идентификатор запроса, посредством которого отправлена анкета в СМЭВ");

                entity.Property(e => e.ChatDirection)
                    .HasColumnName("chat_direction")
                    .HasComment("Направление сообщения:\n1 - входящее\n2 - исходящее");

                entity.Property(e => e.ChatMessage)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .HasColumnName("chat_message")
                    .HasComment("Сообщение в чате");

                entity.Property(e => e.OutcomingMessageInvalid)
                    .HasColumnName("outcoming_message_invalid")
                    .HasComment("Признак, что исходящее сообщение не валидно");

                entity.Property(e => e.ReceivedOrSentTime)
                    .HasPrecision(6)
                    .HasColumnName("received_or_sent_time")
                    .HasComment("Дата и время получения или отправки сообщения");

                entity.Property(e => e.Sender)
                    .HasMaxLength(255)
                    .HasColumnName("sender")
                    .HasDefaultValueSql("'МВД'::character varying")
                    .HasComment("Отправитель");

                entity.HasOne(d => d.ArchiveServicesSmevRequest)
                    .WithMany(p => p.ArchiveServicesAisOpvChats)
                    .HasForeignKey(d => d.ArchiveServicesSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_ais_opv_chat_archive_services_smev_reques_fkey");
            });

            modelBuilder.Entity<ArchiveServicesCommentt>(entity =>
            {
                entity.ToTable("archive_services_commentt");

                entity.HasComment("Список комментариев к услугам");

                entity.HasIndex(e => e.Id, "archive_services_commentt_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.ArchiveServicesId }, "archive_services_commentt_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateEnter }, "archive_services_commentt_idx3");

                entity.HasIndex(e => e.ArchiveServicesId, "archive_services_commentt_idx4");

                entity.HasIndex(e => e.DateEnter, "archive_services_commentt_idx5");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_commentt_idx6");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_commentt_idx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела, связь с archive_services_info id");

                entity.Property(e => e.Commentt)
                    .IsRequired()
                    .HasMaxLength(20000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DateEnter)
                    .HasPrecision(6)
                    .HasColumnName("date_enter")
                    .HasComment("дата ввода");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто занес комментарий, храним строку на всякий случай");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.Personal)
                    .HasColumnName("personal_")
                    .HasComment("есть получатели или нет");

                entity.Property(e => e.PublicCommentt)
                    .HasColumnName("public_commentt")
                    .HasComment("публичное или не публичное примечание");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id, кто ввел комментарий");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц,spr_employees_mfc id");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesCommentts)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .HasConstraintName("archive_services_commentt_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesCommentts)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .HasConstraintName("archive_services_commentt_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesCommentts)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_commentt_spr_employees_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesCommenttRecipient>(entity =>
            {
                entity.ToTable("archive_services_commentt_recipient");

                entity.HasComment("Получатели примечания ");

                entity.HasIndex(e => e.Id, "archive_services_commentt_recipient_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchiveServicesCommenttId, "archive_services_commentt_recipient_idx2");

                entity.HasIndex(e => e.SprEmployeesIdRecipient, "archive_services_commentt_recipient_idx3");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesCommenttId)
                    .HasColumnName("archive_services_commentt_id")
                    .HasComment("связь с примечанием, archive_services_commentt id");

                entity.Property(e => e.DateRead)
                    .HasColumnName("date_read")
                    .HasComment("дата и время прочтения");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesFioRead)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_read")
                    .HasComment("кто прочитал ФИО");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.SprEmployeesIdRecipient)
                    .HasColumnName("spr_employees_id_recipient")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.HasOne(d => d.ArchiveServicesCommentt)
                    .WithMany(p => p.ArchiveServicesCommenttRecipients)
                    .HasForeignKey(d => d.ArchiveServicesCommenttId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_commentt_rec_archive_services_commentt_id_fkey");

                entity.HasOne(d => d.SprEmployeesIdRecipientNavigation)
                    .WithMany(p => p.ArchiveServicesCommenttRecipients)
                    .HasForeignKey(d => d.SprEmployeesIdRecipient)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_commentt_recip_spr_employees_id_recipient_fkey");
            });

            modelBuilder.Entity<ArchiveServicesCustomer>(entity =>
            {
                entity.ToTable("archive_services_customer");

                entity.HasComment("Перечень заявителей");

                entity.HasIndex(e => e.Id, "archive_services_customer_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.CustomerTel2, "archive_services_customer_idx10");

                entity.HasIndex(e => new { e.ArchiveServicesId, e.SprServicesSubTrId }, "archive_services_customer_idx2");

                entity.HasIndex(e => new { e.DocumentSerial, e.DocumentNumber, e.ArchiveServicesId }, "archive_services_customer_idx3");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.CustomerType, e.PollIasMkgu }, "archive_services_customer_idx4");

                entity.HasIndex(e => new { e.ArchiveServicesId, e.CustomerType }, "archive_services_customer_idx5");

                entity.HasIndex(e => new { e.CustomerTel1, e.CustomerTel2 }, "archive_services_customer_idx6");

                entity.HasIndex(e => e.SprServicesSubTrId, "archive_services_customer_idx7");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_customer_idx8");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_customer_idx9");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела,связь с archive_services_info id");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(500)
                    .HasColumnName("customer_address")
                    .HasComment("адрес заявителя");

                entity.Property(e => e.CustomerAddressJson)
                    .HasColumnType("jsonb")
                    .HasColumnName("customer_address_json")
                    .HasComment("Разбитый адрес заявителя");

                entity.Property(e => e.CustomerAddressOkato)
                    .HasMaxLength(30)
                    .HasColumnName("customer_address_okato")
                    .HasComment("ОКАТО");

                entity.Property(e => e.CustomerCodeRegion)
                    .HasMaxLength(3)
                    .HasColumnName("customer_code_region")
                    .HasComment("КОД региона");

                entity.Property(e => e.CustomerDirectorJob)
                    .HasMaxLength(255)
                    .HasColumnName("customer_director_job")
                    .HasComment("должность руководителя");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("электронная почта");

                entity.Property(e => e.CustomerFio)
                    .HasMaxLength(255)
                    .HasColumnName("customer_fio")
                    .HasComment("ФИО ФИЗ лица");

                entity.Property(e => e.CustomerInn)
                    .HasMaxLength(30)
                    .HasColumnName("customer_inn")
                    .HasComment("BИНН");

                entity.Property(e => e.CustomerInnLegal)
                    .HasMaxLength(30)
                    .HasColumnName("customer_inn_legal")
                    .HasComment("инн организации");

                entity.Property(e => e.CustomerKppLegal)
                    .HasMaxLength(20)
                    .HasColumnName("customer_kpp_legal")
                    .HasComment("КПП");

                entity.Property(e => e.CustomerNameDirector)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name_director")
                    .HasComment("фио руководителя");

                entity.Property(e => e.CustomerNameLegal)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name_legal")
                    .HasComment("наименование юр лица");

                entity.Property(e => e.CustomerOgrnLegal)
                    .HasMaxLength(20)
                    .HasColumnName("customer_ogrn_legal")
                    .HasComment("ОГРН");

                entity.Property(e => e.CustomerOktmo)
                    .HasMaxLength(30)
                    .HasColumnName("customer_oktmo")
                    .HasComment("ОКТМО");

                entity.Property(e => e.CustomerSex)
                    .HasMaxLength(6)
                    .HasColumnName("customer_sex")
                    .HasComment("пол заявителя");

                entity.Property(e => e.CustomerSnils)
                    .HasMaxLength(20)
                    .HasColumnName("customer_snils")
                    .HasComment("СНИЛС заявителя");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("телефон 1");

                entity.Property(e => e.CustomerTel2)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel2")
                    .HasComment("телефон 2");

                entity.Property(e => e.CustomerType)
                    .HasColumnName("customer_type")
                    .HasComment("тип заявителя, 1 Заявитель(главный),2 Заявитель, 3 Представитель заявителя");

                entity.Property(e => e.DocumentBirthDate)
                    .HasColumnType("date")
                    .HasColumnName("document_birth_date")
                    .HasComment("дата рождения");

                entity.Property(e => e.DocumentBirthPlace)
                    .HasMaxLength(255)
                    .HasColumnName("document_birth_place")
                    .HasComment("место рождения");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(30)
                    .HasColumnName("document_code")
                    .HasComment("код документа");

                entity.Property(e => e.DocumentIssueBody)
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_body")
                    .HasComment("кто выдал");

                entity.Property(e => e.DocumentIssueDate)
                    .HasColumnType("date")
                    .HasColumnName("document_issue_date")
                    .HasComment("дата выдачи");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("document_number")
                    .HasComment("номер документа");

                entity.Property(e => e.DocumentSerial)
                    .HasMaxLength(10)
                    .HasColumnName("document_serial")
                    .HasComment("серия документа");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.PollIasMkgu)
                    .HasColumnName("poll_ias_mkgu")
                    .HasComment("согласие на участие иас мкгу,0-отказ 1 в смс, 2 через теминал");

                entity.Property(e => e.PollRegionSms)
                    .HasColumnName("poll_region_sms")
                    .HasComment("согласие на участие в региональном опросе");

                entity.Property(e => e.RelationDegree)
                    .HasMaxLength(20)
                    .HasColumnName("relation_degree")
                    .HasComment("Степень родства");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprAlertId)
                    .HasColumnName("spr_alert_id")
                    .HasComment("способ оповещения, связь с spr_alert id");

                entity.Property(e => e.SprDocumentIdentityId)
                    .HasColumnName("spr_document_identity_id")
                    .HasComment("связь с документов удостоворяющим личность,spr_document_identity id");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника , связь c spr_employees_id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника связь с spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц,spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubTrId)
                    .HasColumnName("spr_services_sub_tr_id")
                    .HasComment("тип заявителя,физ , юр. spr_services_sub_type_recipient id");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesCustomers)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesCustomers)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_data_services_info_id_fkey");

                entity.HasOne(d => d.SprServicesSubTr)
                    .WithMany(p => p.ArchiveServicesCustomers)
                    .HasForeignKey(d => d.SprServicesSubTrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_spr_services_sub_tr_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesCustomerCall>(entity =>
            {
                entity.ToTable("archive_services_customer_call");

                entity.HasComment("Звонки заявителям");

                entity.HasIndex(e => e.Id, "archive_services_customer_call_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.SprEmployeesMfcFtpId }, "archive_services_customer_call_idx2");

                entity.HasIndex(e => e.ArchiveServicesId, "archive_services_customer_call_idx3");

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_customer_call_idx4");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "archive_services_customer_call_idx5");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_customer_call_idx6");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_customer_call_idx7");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("связь сномером дела,archive_services_info id");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("Заявитель");

                entity.Property(e => e.CustomerTel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.DateCall)
                    .HasPrecision(6)
                    .HasColumnName("date_call")
                    .HasComment("Дата и время звонка");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.SaveFtp)
                    .HasColumnName("save_ftp")
                    .HasComment("признак сохранения на  ftp");

                entity.Property(e => e.SoundFormat)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("sound_format")
                    .HasComment("формат звонка");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником ,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью, spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("связь с ftp сервером, spr_employees_ftp id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связб с мфц, spr_employees mfc id");

                entity.Property(e => e.TimeTalk)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("time_talk")
                    .HasComment("время звонка");

                entity.Property(e => e.TypeCall)
                    .HasColumnName("type_call")
                    .HasComment("Тип звонка");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesCustomerCalls)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_call_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesCustomerCalls)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_call_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesCustomerCalls)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_call_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.ArchiveServicesCustomerCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_call_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveServicesCustomerCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_call_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesCustomerGisgmp>(entity =>
            {
                entity.ToTable("archive_services_customer_gisgmp");

                entity.HasComment("ГИС ГМП архив");

                entity.HasIndex(e => e.Id, "archive_services_customer_gisgmp_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchiveServicesCustomerId, "archive_services_customer_gisgmp_idx2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesCustomerId)
                    .HasColumnName("archive_services_customer_id")
                    .HasComment("Заявитель");

                entity.Property(e => e.Gisgmp)
                    .HasPrecision(15, 2)
                    .HasColumnName("gisgmp")
                    .HasComment("ГИС ГМП");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления");

                entity.Property(e => e.SetEmployeeFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employee_fio")
                    .HasComment("Кто добавил запись");

                entity.HasOne(d => d.ArchiveServicesCustomer)
                    .WithMany(p => p.ArchiveServicesCustomerGisgmps)
                    .HasForeignKey(d => d.ArchiveServicesCustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_gis_archive_services_customer_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesCustomerMessage>(entity =>
            {
                entity.ToTable("archive_services_customer_message");

                entity.HasComment("Сообщения заявителям");

                entity.HasIndex(e => e.Id, "archive_services_customer_message_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.DateMessage }, "archive_services_customer_message_idx2");

                entity.HasIndex(e => e.ArchiveServicesId, "archive_services_customer_message_idx3");

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_customer_message_idx4");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_customer_message_idx5");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_customer_message_idx6");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("связь сномером дела,archive_services_info id");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("Заявитель");

                entity.Property(e => e.CustomerTel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.DateMessage)
                    .HasPrecision(6)
                    .HasColumnName("date_message")
                    .HasComment("Дата и время сообщения");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником ,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью,spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.TextMessage)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnName("text_message")
                    .HasComment("текст сообщения");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesCustomerMessages)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_message_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesCustomerMessages)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_message_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesCustomerMessages)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_customer_message_spr_employees_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesDocument>(entity =>
            {
                entity.ToTable("archive_services_document");

                entity.HasComment("Список документов к услуге");

                entity.HasIndex(e => e.Id, "archive_services_document_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprDocumentsId, "archive_services_document_idx2");

                entity.HasIndex(e => new { e.ArchiveServicesId, e.SprDocumentsId }, "archive_services_document_idx3");

                entity.HasIndex(e => new { e.ArchiveServicesInfoId, e.SprDocumentsId }, "archive_services_document_idx4");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_document_idx5");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела, связь с archive_services_info id");

                entity.Property(e => e.Check)
                    .HasColumnName("check_")
                    .HasComment("check_");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DocumentCount)
                    .HasColumnName("document_count")
                    .HasComment("количество копий");

                entity.Property(e => e.DocumentNeeds)
                    .HasColumnName("document_needs")
                    .HasComment("обязательный(0),не обязательный документ(1), при наличии (2)");

                entity.Property(e => e.DocumentType)
                    .HasColumnName("document_type")
                    .HasComment("тип документа, 0- оригинал 1- копия");

                entity.Property(e => e.SprDocumentsId)
                    .HasColumnName("spr_documents_id")
                    .HasComment("связь с документом, spr_document id");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesDocuments)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_document_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesDocuments)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_document_data_services_info_id_fkey");

                entity.HasOne(d => d.SprDocuments)
                    .WithMany(p => p.ArchiveServicesDocuments)
                    .HasForeignKey(d => d.SprDocumentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_document_spr_documents_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesElplat>(entity =>
            {
                entity.ToTable("archive_services_elplat");

                entity.HasComment("Архив оплата Элплат");

                entity.HasIndex(e => e.Id, "archive_services_lplat_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address")
                    .HasComment("Адрес плательщика");

                entity.Property(e => e.Amount)
                    .HasPrecision(15, 2)
                    .HasColumnName("amount")
                    .HasComment("Сумма оплаты (тело перевода)");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("id услуги");

                entity.Property(e => e.Bik)
                    .HasMaxLength(30)
                    .HasColumnName("bik")
                    .HasComment("БИК банка получателя");

                entity.Property(e => e.CurrencyCode)
                    .HasColumnName("currency_code")
                    .HasComment("Код валюты");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email")
                    .HasComment("Email плательщика");

                entity.Property(e => e.Fee)
                    .HasPrecision(15, 2)
                    .HasColumnName("fee")
                    .HasComment("Сумма комиссии");

                entity.Property(e => e.Fio)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО плательщика");

                entity.Property(e => e.Ground)
                    .HasMaxLength(255)
                    .HasColumnName("ground")
                    .HasComment("Назначение платежа");

                entity.Property(e => e.HashCode)
                    .HasMaxLength(255)
                    .HasColumnName("hash_code")
                    .HasComment("Расчетный hashcode, алгоритм расчета");

                entity.Property(e => e.Inn)
                    .HasMaxLength(30)
                    .HasColumnName("inn")
                    .HasComment("ИНН получателя");

                entity.Property(e => e.InteractionTypeCode)
                    .HasMaxLength(255)
                    .HasColumnName("interaction_type_code")
                    .HasComment("тип взаимодействия кода");

                entity.Property(e => e.Kbk)
                    .HasMaxLength(30)
                    .HasColumnName("kbk")
                    .HasComment("КБК получателя");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(30)
                    .HasColumnName("kpp")
                    .HasComment("КПП получателя");

                entity.Property(e => e.Okato)
                    .HasMaxLength(30)
                    .HasColumnName("okato")
                    .HasComment("ОКАТО/ОКТМО получателя");

                entity.Property(e => e.PayerId)
                    .HasColumnName("payer_id")
                    .HasComment("Номер плательщика у партнера");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("date")
                    .HasColumnName("payment_date")
                    .HasComment("Дата оплаты");

                entity.Property(e => e.PaymentId)
                    .HasColumnName("payment_id")
                    .HasComment("Номер заказа(платежа) у партнера");

                entity.Property(e => e.PaymentInstrumentCode)
                    .HasMaxLength(255)
                    .HasColumnName("payment_instrument_code")
                    .HasComment("Код предмета оплаты");

                entity.Property(e => e.Phone)
                    .HasMaxLength(32)
                    .HasColumnName("phone")
                    .HasComment("Номер телефона плательщика");

                entity.Property(e => e.Receiver)
                    .HasMaxLength(255)
                    .HasColumnName("receiver")
                    .HasComment("Получатель текст");

                entity.Property(e => e.Rs)
                    .HasMaxLength(30)
                    .HasColumnName("rs")
                    .HasComment("Расчетный счет получателя");

                entity.Property(e => e.Service)
                    .HasColumnName("service")
                    .HasComment("код в системе партнера, нужен для расшифровки и детализации");

                entity.Property(e => e.SprServicesSubName)
                    .HasMaxLength(1000)
                    .HasColumnName("spr_services_sub_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.TaxDocnum)
                    .HasMaxLength(30)
                    .HasColumnName("tax_docnum")
                    .HasComment(" <тип документа>;<номер документа>");

                entity.Property(e => e.TransactionId)
                    .HasColumnType("character varying")
                    .HasColumnName("transaction_id")
                    .HasComment("Номер транзакции для осуществления перевода");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasComment("1 – госпошлина все виды, налоги 2 – штрафы (ГИБДД, ФССП) 100 - ЖКХ");

                entity.Property(e => e.Uin)
                    .HasMaxLength(25)
                    .HasColumnName("uin")
                    .HasComment("УИН 20 или 25 символов.");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Номер оператора-пользователя у партнера");
            });

            modelBuilder.Entity<ArchiveServicesFile>(entity =>
            {
                entity.ToTable("archive_services_file");

                entity.HasComment("Ссылки на электроные образы документов к услугам");

                entity.HasIndex(e => e.Id, "archive_services_file_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_file_idx2");

                entity.HasIndex(e => new { e.ArchiveServicesTableId, e.DateEnter }, "archive_services_file_idx3");

                entity.HasIndex(e => new { e.ArchiveServicesTableId, e.ArchiveServicesInfoId }, "archive_services_file_idx4");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "archive_services_file_idx5");

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_file_idx6");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_file_idx7");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_file_idx8");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела, связь с archive_services_info id");

                entity.Property(e => e.ArchiveServicesTableId)
                    .HasColumnName("archive_services_table_id")
                    .HasComment("связь или с документом(archive-services_document_id) или с услугой(archive_services_id)");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DateEnter)
                    .HasPrecision(6)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата ввода");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("расширение файла");

                entity.Property(e => e.FileFlag)
                    .HasColumnName("file_flag")
                    .HasComment("0 файла нет , 1 есть на фтп");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("file_name")
                    .HasComment("имя файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("размер файла");

                entity.Property(e => e.IsPaid)
                    .HasColumnName("is_paid")
                    .HasDefaultValueSql("true")
                    .HasComment("Признак оплачиваемости файла");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("связь с сервером где храняться файлы.spr_employees_mfc_ftp_id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.TypeAddFile)
                    .HasColumnName("type_add_file")
                    .HasComment("1 - Сканирование 2 - с рабочего стола 3 - с архива");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesFiles)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_file_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesFiles)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_file_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.ArchiveServicesFiles)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_file_spr_employees_mfc_ftp_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesFileResult>(entity =>
            {
                entity.ToTable("archive_services_file_result");

                entity.HasComment("Удалить");

                entity.HasIndex(e => e.Id, "archive_services_file_result_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchiveServicesId, "archive_services_file_result_idx2");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "archive_services_file_result_idx3");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_file_result_idx4");

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_file_result_idx5");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_file_result_idx6");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_file_result_idx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("Услуга");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.DateEnter)
                    .HasPrecision(6)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время ввода");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("Кто добавил");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(255)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("Тип файла");

                entity.Property(e => e.FileFlag)
                    .HasColumnName("file_flag")
                    .HasComment("0 файла нет, 1 есть фтп");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("file_name")
                    .HasComment("Наименование файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("Размер файла");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("id должности");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("FTP сервер");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("id мфц");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesFileResults)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_file_result_archive_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesFileResults)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_file_result_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.ArchiveServicesFileResults)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_file_result_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.ArchiveServicesFileResults)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_file_result_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveServicesFileResults)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_file_result_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesInfo>(entity =>
            {
                entity.ToTable("archive_services_info");

                entity.HasComment("Список текущих обращений");

                entity.HasIndex(e => e.Id, "archive_services_info_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcRemoteWorkplaceId, "archive_services_info_idx2");

                entity.Property(e => e.Id)
                    .HasMaxLength(70)
                    .HasColumnName("id")
                    .HasComment("номер дела");

                entity.Property(e => e.AlertName)
                    .HasMaxLength(70)
                    .HasColumnName("alert_name")
                    .HasComment("наименование способа оповещения");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(500)
                    .HasColumnName("customer_address")
                    .HasComment("адрес заявителя");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("электроная почта");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name")
                    .HasComment("наименование заявителя");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("телефон 1");

                entity.Property(e => e.CustomerTel2)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel2")
                    .HasComment("телефон 2");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasComment("Дата и время добавления записи");

                entity.Property(e => e.DateFinishFact)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_fact")
                    .HasComment("дата фактического исполнения обращения");

                entity.Property(e => e.DateFinishTotal)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_total")
                    .HasComment("дата регламентного окончания дела, обновляеться в тригере");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто принял услугу");

                entity.Property(e => e.EmployeesFioExecution)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_execution")
                    .HasComment("кто исполнил услугу");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(255)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("где принята услуга, МФЦ");

                entity.Property(e => e.NumberTicketQueue)
                    .HasMaxLength(10)
                    .HasColumnName("number_ticket_queue")
                    .HasComment("номер талона электронной очереди");

                entity.Property(e => e.PollIasMkgu)
                    .HasColumnName("poll_ias_mkgu")
                    .HasComment("согласие на участие иас мкгу,0-отказ 1 в смс, 2 через теминал");

                entity.Property(e => e.PollIasMkguName)
                    .HasMaxLength(15)
                    .HasColumnName("poll_ias_mkgu_name")
                    .HasComment("согласие на участие в иас мкгу");

                entity.Property(e => e.PollRegionSms)
                    .HasColumnName("poll_region_sms")
                    .HasComment("согласие на участие в региональном опросе");

                entity.Property(e => e.RemoteWorkplaceName)
                    .HasMaxLength(255)
                    .HasColumnName("remote_workplace_name")
                    .HasComment("место приема обращения");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименвоание услуги");

                entity.Property(e => e.ServiceProviderName)
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("Наименование органа власти");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasComment("дата и время фактического ввода ");

                entity.Property(e => e.SmsRating)
                    .HasColumnName("sms_rating")
                    .HasComment("оценка полученая по смс с таблицы data_poll_region_sms");

                entity.Property(e => e.SprAlertId)
                    .HasColumnName("spr_alert_id")
                    .HasComment("способ оповещения, связь с spr_alert id");

                entity.Property(e => e.SprEmployeesMfcRemoteWorkplaceId)
                    .HasColumnName("spr_employees_mfc_remote_workplace_id")
                    .HasComment("место оказания услуги, связь с  spr_employees_mfc_remote_workplace id");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(30)
                    .HasColumnName("status_name")
                    .HasComment("наименование статуса");
            });

            modelBuilder.Entity<ArchiveServicesParametr>(entity =>
            {
                entity.ToTable("archive_services_parametr");

                entity.HasComment("Параметры к услуге в архиве");

                entity.HasIndex(e => e.Id, "archive_services_parametr_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_parametr_idx2");

                entity.HasIndex(e => e.ArchiveServicesId, "archive_services_parametr_idx3");

                entity.HasIndex(e => e.SprParametrId, "archive_services_parametr_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("Архивная услуга");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("архивное обращение");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Mnemo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("mnemo")
                    .HasComment("Мнемоника");

                entity.Property(e => e.ParametrName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("parametr_name")
                    .HasComment("Имя параметра");

                entity.Property(e => e.ParametrType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("parametr_type")
                    .HasComment("Тип параметра");

                entity.Property(e => e.ParametrValue)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("parametr_value");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprParametrId)
                    .HasColumnName("spr_parametr_id")
                    .HasComment("Параметр");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesParametrs)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_parametr_archive_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesParametrs)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_parametr_archive_services_info_id_fkey");

                entity.HasOne(d => d.SprParametr)
                    .WithMany(p => p.ArchiveServicesParametrs)
                    .HasForeignKey(d => d.SprParametrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_parametr_spr_parametr_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesParametr1>(entity =>
            {
                entity.ToTable("archive_services_parametrs");

                entity.HasComment("Таблица хранения значений параметров для архивных обращений");

                entity.HasIndex(e => e.Id, "archive_services_parametrs_idx1");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_parametrs_idx2");

                entity.HasIndex(e => e.ArchiveServicesId, "archive_services_parametrs_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("Текущая услуга");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("Номер обращения");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("Комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(0)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("Дата и время изменение записи");

                entity.Property(e => e.DdListParametrValues)
                    .HasColumnName("dd_list_parametr_values")
                    .HasComment("Список возможных значений параметра");

                entity.Property(e => e.EmployeesFioAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_add")
                    .HasComment("ФИО добавившего запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("ФИО сотрудника изменившего запись");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("group_name")
                    .HasComment("Наименование группы");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("IP адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("IP адрес изменившего запись");

                entity.Property(e => e.JsonValues)
                    .HasColumnName("json_values")
                    .HasComment("Список возможных значений параметра\r\n");

                entity.Property(e => e.ParametrMark)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mark")
                    .HasComment("Метка параметра");

                entity.Property(e => e.ParametrMask)
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mask")
                    .HasComment("Маска ввода параметра");

                entity.Property(e => e.ParametrName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("parametr_name")
                    .HasComment("Наименование параметра");

                entity.Property(e => e.ParametrType)
                    .HasColumnName("parametr_type")
                    .HasComment("Тип параметра");

                entity.Property(e => e.ParametrValue)
                    .HasMaxLength(500)
                    .HasColumnName("parametr_value")
                    .HasComment("Значение параметра");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("Признак удаления (1 - Запись удалена, 2 - Запись не удалена)");

                entity.Property(e => e.SprGroupParametrsId)
                    .HasColumnName("spr_group_parametrs_id")
                    .HasComment("Связь с таблицей spr_group_parametrs. Поле - ID");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesParametr1s)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_parametrs_archive_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesParametr1s)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_parametrs_archive_services_info_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesPayment>(entity =>
            {
                entity.ToTable("archive_services_payment");

                entity.HasComment("архив оплат по услугам");

                entity.HasIndex(e => e.Id, "archive_services_payment_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ArchiveServicesId, e.SprEmployeesId }, "archive_services_payment_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_payment_idx3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_payment_idx4");

                entity.HasIndex(e => e.ArchiveServicesCustomerId, "archive_services_payment_idx5");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_payment_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchiveServicesCustomerId).HasColumnName("archive_services_customer_id");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой ,data_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("Номер обращения");

                entity.Property(e => e.CodeCheckmaster)
                    .HasMaxLength(20)
                    .HasColumnName("code_checkmaster")
                    .HasComment("Код чекмастера");

                entity.Property(e => e.CustomerFirstName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_first_name")
                    .HasComment("имя плательщика");

                entity.Property(e => e.CustomerInn)
                    .HasMaxLength(30)
                    .HasColumnName("customer_inn")
                    .HasComment("инн");

                entity.Property(e => e.CustomerLastName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_last_name")
                    .HasComment("фамилия плательщика");

                entity.Property(e => e.CustomerMiddleName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_middle_name")
                    .HasComment("отчество плательщика");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name")
                    .HasComment("ФИО заявителя");

                entity.Property(e => e.CustomerSnils)
                    .HasMaxLength(30)
                    .HasColumnName("customer_snils")
                    .HasComment("инн");

                entity.Property(e => e.CustomerTel)
                    .HasMaxLength(15)
                    .HasColumnName("customer_tel")
                    .HasComment("Телефонв формате 9161234567");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(10)
                    .HasColumnName("document_code")
                    .HasComment("код документа плательщика,\r\n«01» – паспорт гражданина РФ;\r\n«02» – свидетельство органов ЗАГС о рождении гражданина;\r\n«03» – паспорт моряка;\r\n«04» – удостоверение личности военнослужащего;\r\n«05» – военный билет военнослужащего;\r\n«06» – временное удостоверение личности гражданина РФ;\r\n«07» – справка об освобождении из мест лишения свободы;\r\n«08» – паспорт иностранного гражданина;\r\n«09» – вид на жительство;\r\n«10» – разрешение на временное проживание;\r\n«11» – удостоверение беженца;\r\n«12» – миграционная карта;");

                entity.Property(e => e.DocumentInfo)
                    .HasMaxLength(255)
                    .HasColumnName("document_info")
                    .HasComment("Код документа серия и номер");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("document_number")
                    .HasComment("номер документа плательщика");

                entity.Property(e => e.DocumentSerial)
                    .HasMaxLength(10)
                    .HasColumnName("document_serial")
                    .HasComment("серия документа плательщика");

                entity.Property(e => e.PaymentAddress)
                    .HasMaxLength(255)
                    .HasColumnName("payment_address")
                    .HasComment("адрес плательщика");

                entity.Property(e => e.PaymentAgent)
                    .HasColumnName("payment_agent")
                    .HasComment("платежный агент, 1- чемастер, 2 сотас");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(100)
                    .HasColumnName("payment_bank_name")
                    .HasComment("наименование банка");

                entity.Property(e => e.PaymentBik)
                    .HasMaxLength(20)
                    .HasColumnName("payment_bik")
                    .HasComment("бик");

                entity.Property(e => e.PaymentDate)
                    .HasPrecision(6)
                    .HasColumnName("payment_date")
                    .HasComment("дата оплаты по платежу");

                entity.Property(e => e.PaymentDateEnter)
                    .HasPrecision(6)
                    .HasColumnName("payment_date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время создания");

                entity.Property(e => e.PaymentIdParent)
                    .HasColumnName("payment_id_parent")
                    .HasDefaultValueSql("'00000000-0000-0000-0000-000000000000'::uuid")
                    .HasComment("Комбинированный платеж");

                entity.Property(e => e.PaymentInn)
                    .HasMaxLength(30)
                    .HasColumnName("payment_inn")
                    .HasComment("инн");

                entity.Property(e => e.PaymentKbk)
                    .HasMaxLength(30)
                    .HasColumnName("payment_kbk")
                    .HasComment("КБК");

                entity.Property(e => e.PaymentKpp)
                    .HasMaxLength(30)
                    .HasColumnName("payment_kpp")
                    .HasComment("кпп");

                entity.Property(e => e.PaymentKs)
                    .HasMaxLength(30)
                    .HasColumnName("payment_ks")
                    .HasComment("кор счет");

                entity.Property(e => e.PaymentNumber)
                    .HasColumnName("payment_number")
                    .HasComment("номер платежа");

                entity.Property(e => e.PaymentOktmo)
                    .HasMaxLength(30)
                    .HasColumnName("payment_oktmo")
                    .HasComment("октмо");

                entity.Property(e => e.PaymentOsmpId)
                    .HasMaxLength(20)
                    .HasColumnName("payment_osmp_id")
                    .HasComment("идентификатор платежа");

                entity.Property(e => e.PaymentPrvTxn)
                    .HasColumnName("payment_prv_txn")
                    .HasComment("идентификатор платежа");

                entity.Property(e => e.PaymentPurpose)
                    .HasMaxLength(1500)
                    .HasColumnName("payment_purpose")
                    .HasComment("назначение платежа(название услуги)");

                entity.Property(e => e.PaymentRecipient)
                    .HasMaxLength(350)
                    .HasColumnName("payment_recipient")
                    .HasComment("получатель платежа(название органа власти)");

                entity.Property(e => e.PaymentRs)
                    .HasMaxLength(30)
                    .HasColumnName("payment_rs")
                    .HasComment("расчетный счет");

                entity.Property(e => e.PaymentSign)
                    .HasColumnName("payment_sign")
                    .HasDefaultValueSql("false")
                    .HasComment("признак платежа, оплачено или нет");

                entity.Property(e => e.PaymentValue)
                    .HasPrecision(15, 2)
                    .HasColumnName("payment_value")
                    .HasComment("сумма платежа");

                entity.Property(e => e.PersonalAccount)
                    .HasMaxLength(255)
                    .HasColumnName("personal_account")
                    .HasComment("Лицевой счет филиала");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связьс сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.Uin)
                    .HasMaxLength(255)
                    .HasColumnName("uin");

                entity.HasOne(d => d.ArchiveServicesCustomer)
                    .WithMany(p => p.ArchiveServicesPayments)
                    .HasForeignKey(d => d.ArchiveServicesCustomerId)
                    .HasConstraintName("archive_services_payment_archive_services_customer_id_fkey");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesPayments)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .HasConstraintName("archive_services_payment_archive_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesPayments)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .HasConstraintName("archive_services_payment_archive_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesPayments)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_payment_spr_employees_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesRoutesStage>(entity =>
            {
                entity.ToTable("archive_services_routes_stage");

                entity.HasComment("Таблица с текущим положеним услуги на маршруте");

                entity.HasIndex(e => e.Id, "archive_services_routes_stage_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ArchiveServicesId, e.SprRoutesStageId }, "archive_services_routes_stage_idx2");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_routes_stage_idx3");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateFinishFact, e.DateFinishReg }, "archive_services_routes_stage_idx4");

                entity.HasIndex(e => e.SprServicesSubWeekId, "archive_services_routes_stage_idx5");

                entity.HasIndex(e => e.SprEmployeesMfcId, "archive_services_routes_stage_idx6");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_routes_stage_idx7");

                entity.HasIndex(e => e.SprRoutesStageId, "archive_services_routes_stage_idx8");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesIdParent)
                    .HasColumnName("archive_services_id_parent")
                    .HasComment("связь с id parent услуги, archive_sevices id_parent");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("номер дела, archive_services_info id");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("количество дней на исполнение этапа");

                entity.Property(e => e.CountDayFact)
                    .HasColumnName("count_day_fact")
                    .HasComment("фактическое пройденное количество дней на этап");

                entity.Property(e => e.DateFinishFact)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_fact")
                    .HasComment("Фактическая дата окончания этапа");

                entity.Property(e => e.DateFinishReg)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_reg")
                    .HasComment("Регламентная дата окончания этапа");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала этапа");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesFioFact)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_fact")
                    .HasComment("кто фактически добавил этап");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("МФЦ сотрудника");

                entity.Property(e => e.PassAutomatically)
                    .HasColumnName("pass_automatically")
                    .HasComment("Передача сотруднику была автоматически или в ручную");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasComment("Дата фактического занесения записи");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника,связь spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("связь с названием точки(этапа), spr_routes_stage id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("связь с типом расчета дней, spr_services_sub_week id");

                entity.Property(e => e.TimeFinishFact)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_finish_fact")
                    .HasComment("Фактическое время окончания этапа");

                entity.Property(e => e.TimeStart)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_start")
                    .HasComment("время начала этапа");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.ArchiveServicesRoutesStages)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_routes_stage_spr_services_sub_week_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesSmevRequest>(entity =>
            {
                entity.ToTable("archive_services_smev_request");

                entity.HasComment("Таблица запросов  СМЭВ\r\n-- Добавил поле is_repeat_query. 22.08.2019 Балахаев");

                entity.HasIndex(e => e.Id, "archive_services_smev_request_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DateRequest, "archive_services_smev_request_idx10");

                entity.HasIndex(e => new { e.ArchiveServicesId, e.SprSmevRequestId }, "archive_services_smev_request_idx2");

                entity.HasIndex(e => e.SprSmevRequestId, "archive_services_smev_request_idx3");

                entity.HasIndex(e => e.SprEmployeesId, "archive_services_smev_request_idx4");

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_smev_request_idx5");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "archive_services_smev_request_idx7");

                entity.HasIndex(e => e.MessageId, "archive_services_smev_request_idx8");

                entity.HasIndex(e => e.RequestIdRef, "archive_services_smev_request_idx9");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ArchiveServicesId)
                    .HasColumnName("archive_services_id")
                    .HasComment("связь с услугой, archive_services id");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("связь с номером обращения, archive_services_info id");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("кол-во дней на исполнение");

                entity.Property(e => e.DateRead)
                    .HasColumnType("date")
                    .HasColumnName("date_read")
                    .HasDefaultValueSql("'0001-01-01'::date")
                    .HasComment("дата чтения, пришел эответ и его кто когда заметил");

                entity.Property(e => e.DateRequest)
                    .HasColumnType("date")
                    .HasColumnName("date_request")
                    .HasComment("дата запроса");

                entity.Property(e => e.DateResponse)
                    .HasColumnType("date")
                    .HasColumnName("date_response")
                    .HasComment("дата ответа");

                entity.Property(e => e.DateResponseReg)
                    .HasColumnType("date")
                    .HasColumnName("date_response_reg")
                    .HasComment("дата ответа по регламенту на запрос");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто отправил запрос");

                entity.Property(e => e.EmployeesFioRead)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_read")
                    .HasComment("кто прочитал");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("ID сообщения");

                entity.Property(e => e.MessageIdProvider)
                    .HasMaxLength(70)
                    .HasColumnName("message_id_provider")
                    .HasComment("ID поставщика");

                entity.Property(e => e.Repeat)
                    .HasColumnName("repeat")
                    .HasComment("Является ли запрос повторным?");

                entity.Property(e => e.RequestHtml)
                    .HasColumnName("request_html")
                    .HasComment("Сериализованный XML, описывающий HTML отчет для запроса.");

                entity.Property(e => e.RequestIdRef)
                    .HasMaxLength(70)
                    .HasColumnName("request_id_ref")
                    .HasComment("id запроса для повторного запроса сведений");

                entity.Property(e => e.ResponseFileName)
                    .HasMaxLength(255)
                    .HasColumnName("response_file_name")
                    .HasComment("файл в котором храниться ответ");

                entity.Property(e => e.ResponseHtml)
                    .HasColumnName("response_html")
                    .HasComment("Сериализованный XML, описывающий HTML отчет для окончательного ответа.");

                entity.Property(e => e.ResponseHtmlInt)
                    .HasColumnName("response_html_int")
                    .HasComment("Сериализованный XML, описывающий HTML отчет для промежуточного ответа, полученного после выполнения первой фазы асинхронного запроса.");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником кто отправил запрос, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с дожностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("тип отсчета дней, spr_servicers_sub_week id");

                entity.Property(e => e.SprSmevRequestId)
                    .HasColumnName("spr_smev_request_id")
                    .HasComment("связь с запросом, spr_smev_request id");

                entity.Property(e => e.TimeRequest)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_request")
                    .HasComment("время запроса");

                entity.Property(e => e.TimeResponse)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_response")
                    .HasComment("время ответа");

                entity.HasOne(d => d.ArchiveServices)
                    .WithMany(p => p.ArchiveServicesSmevRequests)
                    .HasForeignKey(d => d.ArchiveServicesId)
                    .HasConstraintName("archive_services_smev_request_data_services_id_fkey");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesSmevRequests)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .HasConstraintName("archive_services_smev_request_archive_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesSmevRequests)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_smev_request_spr_employees_id_fkey");

                entity.HasOne(d => d.SprSmevRequest)
                    .WithMany(p => p.ArchiveServicesSmevRequests)
                    .HasForeignKey(d => d.SprSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_smev_request_spr_smev_request_id_fkey");
            });

            modelBuilder.Entity<ArchiveServicesSmevRequestStatus>(entity =>
            {
                entity.ToTable("archive_services_smev_request_status");

                entity.HasComment("Таблица запросов результата для асинхронных сервисев ");

                entity.HasIndex(e => e.Id, "archive_services_smev_request_status_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ArchiveServicesSmevRequestId, e.MessageId }, "archive_services_smev_request_status_idx2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesSmevRequestId)
                    .HasColumnName("archive_services_smev_request_id")
                    .HasComment("связь с запросом, archive_services_smev_request id");

                entity.Property(e => e.DateRequest)
                    .HasColumnType("date")
                    .HasColumnName("date_request")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата запроса");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("id сообщения");

                entity.Property(e => e.RequestIdRef)
                    .HasMaxLength(70)
                    .HasColumnName("request_id_ref")
                    .HasComment("id запроса для повторного запроса сведений");

                entity.Property(e => e.TimeRequest)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_request")
                    .HasDefaultValueSql("now()")
                    .HasComment("время запроса");

                entity.HasOne(d => d.ArchiveServicesSmevRequest)
                    .WithMany(p => p.ArchiveServicesSmevRequestStatuses)
                    .HasForeignKey(d => d.ArchiveServicesSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_smev_request_data_services_smev_request_i_fkey");
            });

            modelBuilder.Entity<ArchiveServicesViewLog>(entity =>
            {
                entity.ToTable("archive_services_view_log");

                entity.HasComment("История просмотров услуг сотрудниками");

                entity.HasIndex(e => e.Id, "archive_services_view_log_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ArchiveServicesInfoId, "archive_services_view_log_idx2");

                entity.HasIndex(e => e.SetDate, "archive_services_view_log_set_date_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ArchiveServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("archive_services_info_id")
                    .HasComment("связь с обращением, archive_services_info id");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником,spr_employees id");

                entity.HasOne(d => d.ArchiveServicesInfo)
                    .WithMany(p => p.ArchiveServicesViewLogs)
                    .HasForeignKey(d => d.ArchiveServicesInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_view_log_archive_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.ArchiveServicesViewLogs)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("archive_services_view_log_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataAutomaticLog>(entity =>
            {
                entity.ToTable("data_automatic_log");

                entity.HasComment("Лог запуска сервиса автоматисческой обработки данных");

                entity.HasIndex(e => e.Id, "data_automatic_log_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DateStart, e.Type }, "data_automatic_log_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата запуска сервиса");

                entity.Property(e => e.TimeStart)
                    .HasColumnType("time without time zone")
                    .HasColumnName("time_start")
                    .HasComment("время запуска");

                entity.Property(e => e.Type)
                    .HasColumnName("type_")
                    .HasComment("тип , 1 - принятые, 2 исполненные, 3 - ИАС МКГУ, 4 - Зарплата, 5 -  Просрочено этапы , 6 - Региональный смс,\n7- Примечания, 8-Звонки  ,9- СМС , 10-СМЭВ, 11- авто ИАС МКГУ , 12- Перекидка дел в архив , 13 - обнуление счетчика переданных услуг, 14 - расчет рейтинга 15 - штрафы 16 - статистика СМЭВ");
            });

            modelBuilder.Entity<DataBirthZag>(entity =>
            {
                entity.ToTable("data_birth_zags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ActCodeUpdate)
                    .HasMaxLength(4)
                    .HasColumnName("act_code_update")
                    .HasComment("Код/Наименование вида записей ");

                entity.Property(e => e.ActDate)
                    .HasColumnType("date")
                    .HasColumnName("act_date")
                    .HasComment("Дата составления записи акта о рождении");

                entity.Property(e => e.ActDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("act_date_update")
                    .HasComment("Дата внесения исправления и изменения в запись акта гражданского состояния или дата внесения отметки  \r\n	о восстановлении или об аннулировании записи акта гражданского состояния");

                entity.Property(e => e.ActNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("act_number")
                    .HasComment("Номер записи акта о рождении");

                entity.Property(e => e.ActStatus)
                    .HasMaxLength(2)
                    .HasColumnName("act_status")
                    .HasComment("Код статуса");

                entity.Property(e => e.ActStatusDate)
                    .HasColumnType("date")
                    .HasColumnName("act_status_date")
                    .HasComment("Дата начала действия статуса");

                entity.Property(e => e.ActTextUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("act_text_update")
                    .HasComment("Содержание внесенного исправления или изменения");

                entity.Property(e => e.ActVersionDate)
                    .HasColumnType("date")
                    .HasColumnName("act_version_date")
                    .HasComment("Дата версии записи");

                entity.Property(e => e.ActVersionNumber)
                    .HasMaxLength(3)
                    .HasColumnName("act_version_number")
                    .HasComment("Номер версии записи");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес места жительства");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(10)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(500)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.BodyWeight)
                    .HasMaxLength(5)
                    .HasColumnName("body_weight")
                    .HasComment("Масса тела ребенка при рождении (в граммах)");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country")
                    .HasComment("Гражданство (страна)");

                entity.Property(e => e.DateDocumentBirth)
                    .HasColumnType("date")
                    .HasColumnName("date_document_birth")
                    .HasComment("Дата выдачи свидетельства о рождении");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(2)
                    .HasColumnName("document_code")
                    .HasComment("Наименование документа, удостоверяющего личность");

                entity.Property(e => e.DocumentConfirmBirthCode)
                    .HasMaxLength(5)
                    .HasColumnName("document_confirm_birth_code")
                    .HasComment("Документ, подтверждающий рождение (код)");

                entity.Property(e => e.DocumentConfirmBirthDate)
                    .HasColumnType("date")
                    .HasColumnName("document_confirm_birth_date")
                    .HasComment("Документ, подтверждающий рождение (дата выдачи)");

                entity.Property(e => e.DocumentConfirmBirthIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_confirm_birth_issuer")
                    .HasComment("Кем выдан документ, подтверждающий факт рождения");

                entity.Property(e => e.DocumentConfirmBirthSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_confirm_birth_serial_number")
                    .HasComment("Документ, подтверждающий рождение (серия и номер)");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("document_date")
                    .HasComment("Дата выдачи документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("document_date_update")
                    .HasComment("Дата составления АГС / Выдачи документа");

                entity.Property(e => e.DocumentIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer")
                    .HasComment("Наименование органа, выдавшего документ, удостоверяющий личность");

                entity.Property(e => e.DocumentIssuerUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer_update")
                    .HasComment("ЗАГС / кем выдан документ");

                entity.Property(e => e.DocumentNameUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_name_update")
                    .HasComment("Наименование АГС/документа");

                entity.Property(e => e.DocumentSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_serial_number")
                    .HasComment("Серия и номер документа, удостоверяющего личность");

                entity.Property(e => e.DocumentSerialNumberUpdate)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number_update")
                    .HasComment("Номер АГС / Серия и номер документа");

                entity.Property(e => e.EducationCode)
                    .HasMaxLength(2)
                    .HasColumnName("education_code")
                    .HasComment("Образование (код)");

                entity.Property(e => e.EmploymentCode)
                    .HasMaxLength(2)
                    .HasColumnName("employment_code")
                    .HasComment("Занятость (код)");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО");

                entity.Property(e => e.Gender)
                    .HasMaxLength(3)
                    .HasColumnName("gender")
                    .HasComment("Пол");

                entity.Property(e => e.IsLiveBorn)
                    .HasColumnName("is_live_born")
                    .HasDefaultValueSql("true")
                    .HasComment("Живорожденный");

                entity.Property(e => e.NationalityCode)
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .HasComment("Национальность (код)");

                entity.Property(e => e.NumberDocumentBirth)
                    .HasMaxLength(8)
                    .HasColumnName("number_document_birth")
                    .HasComment("Номер свидетельства о рождении");

                entity.Property(e => e.SerialDocumentBirth)
                    .HasMaxLength(8)
                    .HasColumnName("serial_document_birth")
                    .HasComment("Серия свидетельства о рождении");

                entity.Property(e => e.ZagsCode)
                    .HasMaxLength(8)
                    .HasColumnName("zags_code")
                    .HasComment("Код/Наименование органа ЗАГС");
            });

            modelBuilder.Entity<DataCalendar>(entity =>
            {
                entity.HasKey(e => e.Date)
                    .HasName("data_weekend_pkey");

                entity.ToTable("data_calendar");

                entity.HasComment("Таблица выходных дней для расчета сроков");

                entity.HasIndex(e => e.Date, "data_calendar_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Date, e.DateType }, "data_calendar_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.DateType, "data_calendar_idx3");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("Дата,(Первичный ключ)");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateType)
                    .HasColumnName("date_type")
                    .HasComment("Тип дня, 1 - рабочие день, 0 - (Суббота Воскресенье), 2 (Праздничный день)");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата ввода");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("Кто последний изменил данные");

                entity.HasOne(d => d.DateTypeNavigation)
                    .WithMany(p => p.DataCalendars)
                    .HasForeignKey(d => d.DateType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_calendar_date_type_fkey");
            });

            modelBuilder.Entity<DataCalendarDayType>(entity =>
            {
                entity.ToTable("data_calendar_day_type");

                entity.HasComment("Тип дней");

                entity.HasIndex(e => e.Id, "data_calendar_day_type_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(255)
                    .HasColumnName("className")
                    .HasComment("Названия класса типа");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name")
                    .HasComment("наименование типа");
            });

            modelBuilder.Entity<DataCallback>(entity =>
            {
                entity.ToTable("data_callback");

                entity.HasComment("Заказы обратных звонков");

                entity.HasIndex(e => e.Id, "data_callback_dx1");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_callback_dx2");

                entity.HasIndex(e => e.Status, "data_callback_status_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CallbackId)
                    .HasColumnName("callback_id")
                    .HasComment("ID звонка");

                entity.Property(e => e.CountTry)
                    .HasColumnName("count_try")
                    .HasComment("Количество попыток");

                entity.Property(e => e.CustomerFio)
                    .HasMaxLength(255)
                    .HasColumnName("customer_fio")
                    .HasComment("Владелец номера телефона");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время занесения записи");

                entity.Property(e => e.DateClose)
                    .HasColumnName("date_close")
                    .HasComment("Дата закрытия");

                entity.Property(e => e.DateOrder)
                    .HasPrecision(0)
                    .HasColumnName("date_order")
                    .HasComment("Дата на которую заказан звонок");

                entity.Property(e => e.IsHand)
                    .HasColumnName("is_hand")
                    .HasComment("В ручную закрыта заявка или нет");

                entity.Property(e => e.IsSync)
                    .HasColumnName("is_sync")
                    .HasComment("Полное занесение звонка  в базу");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("phone_number")
                    .HasComment("Номер телефона заявителя");

                entity.Property(e => e.SprEmployeesIdClose)
                    .HasColumnName("spr_employees_id_close")
                    .HasComment("Сотрудник закрывший");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ в котором сделан заказ");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус звонка (1 - Новый звонок, 2 - Обработан, 3 - Не отвеченный, 4- Заявка закрыта в ручную)");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataCallbacks)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_callback_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataCallbackCall>(entity =>
            {
                entity.ToTable("data_callback_calls");

                entity.HasComment("Звонки к заказам обратных звонков");

                entity.HasIndex(e => e.DataCallbackId, "data_callback_calls_dx1");

                entity.HasIndex(e => e.Id, "data_callback_calls_dx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_callback_calls_dx3");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "data_callback_calls_dx4");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_callback_calls_dx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CallDuration)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("call_duration")
                    .HasComment("Продолжительность звонка");

                entity.Property(e => e.DataCallbackId)
                    .HasColumnName("data_callback_id")
                    .HasComment("Связь с заказом звонка");

                entity.Property(e => e.DateCall)
                    .HasPrecision(0)
                    .HasColumnName("date_call")
                    .HasComment("Дата звонка");

                entity.Property(e => e.EmployeeFio)
                    .HasMaxLength(255)
                    .HasColumnName("employee_fio")
                    .HasComment("Сотрудник принявший звонок");

                entity.Property(e => e.MfcName)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_name")
                    .HasComment("МФЦ в котором принят звонок");

                entity.Property(e => e.SaveFtp)
                    .HasColumnName("save_ftp")
                    .HasDefaultValueSql("false")
                    .HasComment("Признак сохранения звонка на FTP");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Связь с сотрудником принявшем звонок");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("Связь с FTP сервером");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("Связь с МФЦ в котором принят звонок");

                entity.HasOne(d => d.DataCallback)
                    .WithMany(p => p.DataCallbackCalls)
                    .HasForeignKey(d => d.DataCallbackId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_callback_calls_data_callback_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataCallbackCalls)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_callback_calls_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.DataCallbackCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_callback_calls_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataCallbackCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_callback_calls_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataChangeLog>(entity =>
            {
                entity.ToTable("data_change_log");

                entity.HasComment("Таблица для логирования изменений");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий при изменении данных");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер обращения");

                entity.Property(e => e.DateChange)
                    .HasColumnName("date_change")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(255)
                    .HasColumnName("field_name_")
                    .HasComment("Название поля");

                entity.Property(e => e.FieldNameBase)
                    .HasMaxLength(70)
                    .HasColumnName("field_name_base_")
                    .HasComment("наименование поля в базе");

                entity.Property(e => e.IpAddress)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address")
                    .HasComment("ip адресс компьютера");

                entity.Property(e => e.NewValue)
                    .HasMaxLength(1500)
                    .HasColumnName("new_value")
                    .HasComment("Новое значение");

                entity.Property(e => e.OldValue)
                    .HasMaxLength(1500)
                    .HasColumnName("old_value")
                    .HasComment("Старое значение");

                entity.Property(e => e.RowId)
                    .HasColumnName("row_id")
                    .HasComment("id поля");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника");

                entity.Property(e => e.TableName)
                    .HasMaxLength(300)
                    .HasColumnName("table_name_")
                    .HasComment("Название таблицы");

                entity.Property(e => e.TableNameBase)
                    .HasMaxLength(70)
                    .HasColumnName("table_name_base_")
                    .HasComment("Наименование таблицы в базе");
            });

            modelBuilder.Entity<DataCoverLetter>(entity =>
            {
                entity.ToTable("data_cover_letter");

                entity.HasComment("Таблица сопроводительных писем к обращениям");

                entity.HasIndex(e => e.DataServicesId, "data_cover_letter_data_services_id_idx");

                entity.HasIndex(e => e.Id, "data_cover_letter_id_idx")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "data_cover_letter_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Связь с таблицей услуг");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasComment("Время добавление записи");

                entity.Property(e => e.EmployeeFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employee_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.JsonData)
                    .HasColumnType("jsonb")
                    .HasColumnName("json_data")
                    .HasComment("Содержание сопроводительного письма");

                entity.Property(e => e.NumberCoverLetter)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("number_cover_letter")
                    .HasComment("Код письма");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Связь со справочником сотрудников");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataCoverLetters)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_cover_latter_data_services_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataCoverLetters)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_cover_latter_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataDayProblem>(entity =>
            {
                entity.ToTable("data_day_problem");

                entity.HasComment("Таблица для данных о простое филиалов, дни в которых программа не работала по тем или иным причинам");

                entity.HasIndex(e => e.Id, "data_day_problem_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.Date }, "data_day_problem_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasColumnType("character varying")
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата простоя, день");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц, связь spr_employees_mfc id");
            });

            modelBuilder.Entity<DataDeathZag>(entity =>
            {
                entity.ToTable("data_death_zags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ActCodeUpdate)
                    .HasMaxLength(4)
                    .HasColumnName("act_code_update")
                    .HasComment("Код/Наименование вида записей ");

                entity.Property(e => e.ActDate)
                    .HasColumnType("date")
                    .HasColumnName("act_date")
                    .HasComment("Дата составления записи акта о смерти");

                entity.Property(e => e.ActDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("act_date_update")
                    .HasComment("Дата внесения исправления и изменения в запись акта гражданского состояния или дата внесения отметки  \r\n	о восстановлении или об аннулировании записи акта гражданского состояния");

                entity.Property(e => e.ActNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("act_number")
                    .HasComment("Номер записи акта о смерти");

                entity.Property(e => e.ActStatus)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("act_status")
                    .HasComment("Статус (код/наименование) записи акта");

                entity.Property(e => e.ActTextUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("act_text_update")
                    .HasComment("Содержание внесенного исправления или изменения");

                entity.Property(e => e.ActVersionDate)
                    .HasColumnType("date")
                    .HasColumnName("act_version_date")
                    .HasComment("Дата версии записи");

                entity.Property(e => e.ActVersionNumber)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("act_version_number")
                    .HasComment("Номер версии записи");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес места жительства");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(10)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения (может быть без Дня и/или месяца)");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(500)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country")
                    .HasComment("Гражданство (страна)");

                entity.Property(e => e.DateDocumentDeath)
                    .HasColumnType("date")
                    .HasColumnName("date_document_death")
                    .HasComment("Дата выдачи свидетельства о смерти");

                entity.Property(e => e.DeathCause)
                    .HasMaxLength(750)
                    .HasColumnName("death_cause")
                    .HasComment("Причины смерти");

                entity.Property(e => e.DeathCircumstancesCode)
                    .HasMaxLength(2)
                    .HasColumnName("death_circumstances_code")
                    .HasComment("Обстоятельства смерти");

                entity.Property(e => e.DeathDate)
                    .HasMaxLength(10)
                    .HasColumnName("death_date")
                    .HasComment("Дата смерти (может быть без Дня и/или месяца)");

                entity.Property(e => e.DeathPlace)
                    .HasMaxLength(500)
                    .HasColumnName("death_place")
                    .HasComment("Место смерти");

                entity.Property(e => e.DeathPlaceCode)
                    .HasMaxLength(2)
                    .HasColumnName("death_place_code")
                    .HasComment("Место наступления смерти (код)");

                entity.Property(e => e.DeathTime)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("death_time")
                    .HasComment("Время Смерти");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(2)
                    .HasColumnName("document_code")
                    .HasComment("Наименование документа, удостоверяющего личность");

                entity.Property(e => e.DocumentConfirmDeathCode)
                    .HasMaxLength(5)
                    .HasColumnName("document_confirm_death_code")
                    .HasComment("Код документа, подтверждающего факт смерти");

                entity.Property(e => e.DocumentConfirmDeathDate)
                    .HasColumnType("date")
                    .HasColumnName("document_confirm_death_date")
                    .HasComment("Дата документа, подтверждающего факт смерти");

                entity.Property(e => e.DocumentConfirmDeathIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_confirm_death_issuer")
                    .HasComment("Кем выдан документ, подтверждающий факт смерти");

                entity.Property(e => e.DocumentConfirmDeathSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_confirm_death_serial_number")
                    .HasComment("Серия и номер документа, подтверждающего факт смерти");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("document_date")
                    .HasComment("Дата выдачи документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("document_date_update")
                    .HasComment("Дата составления");

                entity.Property(e => e.DocumentIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer")
                    .HasComment("Наименование органа, выдавшего документ, удостоверяющий личность");

                entity.Property(e => e.DocumentIssuerUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer_update")
                    .HasComment("Кем выдан");

                entity.Property(e => e.DocumentNameUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_name_update")
                    .HasComment("Наименование АГС/документа");

                entity.Property(e => e.DocumentSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_serial_number")
                    .HasComment("Серия и номер документа, удостоверяющего личность");

                entity.Property(e => e.DocumentSerialNumberUpdate)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number_update")
                    .HasComment("Серия документа исправившего");

                entity.Property(e => e.EducationCode)
                    .HasMaxLength(2)
                    .HasColumnName("education_code")
                    .HasComment("Образование");

                entity.Property(e => e.EmploymentCode)
                    .HasMaxLength(2)
                    .HasColumnName("employment_code")
                    .HasComment("Занятость");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО");

                entity.Property(e => e.Gender)
                    .HasMaxLength(3)
                    .HasColumnName("gender")
                    .HasComment("Пол");

                entity.Property(e => e.IsDeath)
                    .HasColumnName("is_death")
                    .HasComment("Признак умершего лица, личность которого не установлена");

                entity.Property(e => e.MaritalStatusCode)
                    .HasMaxLength(2)
                    .HasColumnName("marital_status_code")
                    .HasComment("Семейное положение");

                entity.Property(e => e.NationalityCode)
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .HasComment("Национальность");

                entity.Property(e => e.NumberDocumentDeath)
                    .HasMaxLength(20)
                    .HasColumnName("number_document_death")
                    .HasComment("Номер Свидетельства");

                entity.Property(e => e.SerialDocumentDeath)
                    .HasMaxLength(20)
                    .HasColumnName("serial_document_death")
                    .HasComment("Серия Свидетельства");

                entity.Property(e => e.SetCauseDeathBasic)
                    .HasMaxLength(2)
                    .HasColumnName("set_cause_death_basic")
                    .HasComment("Основание, послужившее для установления причины смерти");

                entity.Property(e => e.SetCauseDeathPersonCode)
                    .HasMaxLength(2)
                    .HasColumnName("set_cause_death_person_code")
                    .HasComment("Лицо, установившее причину смерти (код)");

                entity.Property(e => e.SetCauseDeathPersonFio)
                    .HasMaxLength(255)
                    .HasColumnName("set_cause_death_person_fio")
                    .HasComment("ФИО врача, установившего причину смерти");

                entity.Property(e => e.ZagsCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("zags_code")
                    .HasComment("Код/Наименование органа ЗАГС");
            });

            modelBuilder.Entity<DataDivorceZag>(entity =>
            {
                entity.ToTable("data_divorce_zags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ActCodeUpdate)
                    .HasMaxLength(4)
                    .HasColumnName("act_code_update")
                    .HasComment("Код/Наименование вида записей ");

                entity.Property(e => e.ActDate)
                    .HasColumnType("date")
                    .HasColumnName("act_date")
                    .HasComment("Дата составления записи акта о заключении брака");

                entity.Property(e => e.ActDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("act_date_update")
                    .HasComment("Дата внесения исправления и изменения в запись акта гражданского состояния или дата внесения отметки  \r\n	о восстановлении или об аннулировании записи акта гражданского состояния");

                entity.Property(e => e.ActNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("act_number")
                    .HasComment("Номер записи акта о заключении брака");

                entity.Property(e => e.ActStatus)
                    .HasMaxLength(2)
                    .HasColumnName("act_status")
                    .HasComment("Код статуса");

                entity.Property(e => e.ActStatusDate)
                    .HasColumnType("date")
                    .HasColumnName("act_status_date")
                    .HasComment("Дата начала действия статуса");

                entity.Property(e => e.ActTextUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("act_text_update")
                    .HasComment("Содержание внесенного исправления или изменения");

                entity.Property(e => e.ActVersionDate)
                    .HasColumnType("date")
                    .HasColumnName("act_version_date")
                    .HasComment("Дата версии записи");

                entity.Property(e => e.ActVersionNumber)
                    .HasMaxLength(3)
                    .HasColumnName("act_version_number")
                    .HasComment("Номер версии записи");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес места жительства");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(10)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(500)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country")
                    .HasComment("Гражданство (страна)");

                entity.Property(e => e.DateDocumentDivorce)
                    .HasColumnType("date")
                    .HasColumnName("date_document_divorce")
                    .HasComment("Дата выдачи свидетельства о расторжении брака");

                entity.Property(e => e.DivorceDate)
                    .HasColumnType("date")
                    .HasColumnName("divorce_date")
                    .HasComment("Дата прекращения брака");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(2)
                    .HasColumnName("document_code")
                    .HasComment("Наименование документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("document_date")
                    .HasComment("Дата выдачи документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("document_date_update")
                    .HasComment("Дата составления АГС / Выдачи документа");

                entity.Property(e => e.DocumentIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer")
                    .HasComment("Наименование органа, выдавшего документ, удостоверяющий личность");

                entity.Property(e => e.DocumentIssuerUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer_update")
                    .HasComment("ЗАГС / кем выдан документ");

                entity.Property(e => e.DocumentNameUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_name_update")
                    .HasComment("Наименование АГС/документа");

                entity.Property(e => e.DocumentSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_serial_number")
                    .HasComment("Серия и номер документа, удостоверяющего личность");

                entity.Property(e => e.DocumentSerialNumberUpdate)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number_update")
                    .HasComment("Номер АГС / Серия и номер документа");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО");

                entity.Property(e => e.Gender)
                    .HasMaxLength(3)
                    .HasColumnName("gender")
                    .HasComment("Пол");

                entity.Property(e => e.LastNameOld)
                    .HasMaxLength(60)
                    .HasColumnName("last_name_old")
                    .HasComment("Фамилия до расторжения брака");

                entity.Property(e => e.NationalityCode)
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .HasComment("Национальность (код)");

                entity.Property(e => e.NumberDocumentDivorce)
                    .HasMaxLength(8)
                    .HasColumnName("number_document_divorce")
                    .HasComment("Номер свидетельства о расторжении брака");

                entity.Property(e => e.SerialDocumentDivorce)
                    .HasMaxLength(8)
                    .HasColumnName("serial_document_divorce")
                    .HasComment("Серия свидетельства о расторжении брака");

                entity.Property(e => e.ZagsCode)
                    .HasMaxLength(8)
                    .HasColumnName("zags_code")
                    .HasComment("Код/Наименование органа ЗАГС");
            });

            modelBuilder.Entity<DataElkOrder>(entity =>
            {
                entity.ToTable("data_elk_order");

                entity.HasIndex(e => e.AisOrderId, "data_elk_order_ais_order_id_idx");

                entity.HasIndex(e => e.DataServicesId, "data_elk_order_data_services_id_idx");

                entity.HasIndex(e => e.DateSent, "data_elk_order_date_sent_idx");

                entity.HasIndex(e => e.Id, "data_elk_order_id_idx")
                    .IsUnique();

                entity.HasIndex(e => e.MessageId, "data_elk_order_message_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AisOrderId)
                    .HasColumnName("ais_order_id")
                    .HasDefaultValueSql("nextval('data_elk_order_seq_id'::regclass)")
                    .HasComment("Идентификатор, который передается в CaseNumber, генерируется из триггера.");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Услуга");

                entity.Property(e => e.DateCreated)
                    .HasColumnName("date_created")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время создания записи");

                entity.Property(e => e.DateSent)
                    .HasColumnName("date_sent")
                    .HasComment("Дата и время отправки на сервис");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description")
                    .HasComment("Примечание");

                entity.Property(e => e.Eservicecode)
                    .HasMaxLength(255)
                    .HasColumnName("eservicecode")
                    .HasComment("Идентификатор интерактивной формы на ЕПГУ");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("firstname")
                    .HasComment("Имя заявителя (сотрудника юридического лица)");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("lastname")
                    .HasComment("Фамилия заявителя (сотрудника юридического лица)");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор сообщения СМЭВ 3");

                entity.Property(e => e.Middlename)
                    .HasMaxLength(255)
                    .HasColumnName("middlename")
                    .HasComment("Отчество заявителя (сотрудника юридического лица) - необязательно");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(255)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН юридического лица или ОГРНИП индивидуального предпринимателя - обязательно для для UserType = LEGAL или SOLE_PROPRIETOR");

                entity.Property(e => e.OrderComment)
                    .HasMaxLength(255)
                    .HasColumnName("order_comment")
                    .HasComment("данные для регистрации услуги в ЕЛК для клиента");

                entity.Property(e => e.Orderid)
                    .HasColumnName("orderid")
                    .HasComment("Уникальный идентификатор заявления на ЕПГУ");

                entity.Property(e => e.RequestIdRef)
                    .HasMaxLength(50)
                    .HasColumnName("request_id_ref")
                    .HasComment("Идентификатор цепочки сообщений, полученный от СМЭВ.");

                entity.Property(e => e.RequestXml)
                    .HasColumnName("request_xml")
                    .HasComment("XML запроса");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("XML ответа");

                entity.Property(e => e.Responsecode)
                    .HasMaxLength(255)
                    .HasColumnName("responsecode")
                    .HasComment("Код результата выполнения");

                entity.Property(e => e.ResponsecodeDescription)
                    .HasMaxLength(255)
                    .HasColumnName("responsecode_description")
                    .HasComment("Описание кода результата выполнения");

                entity.Property(e => e.ServiceOkato)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("service_okato")
                    .HasComment("Местоположение заявителя по ОКАТО");

                entity.Property(e => e.Servicetargetcode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("servicetargetcode")
                    .HasComment("Идентификатор цели обращения услуги в ФРГУ");

                entity.Property(e => e.Snils)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС заявителя (сотрудника юридического лица) или логин заявителя");

                entity.Property(e => e.Usertype)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("usertype")
                    .HasDefaultValueSql("'person'::character varying")
                    .HasComment("Тип пользователя:\r\nPERSON – физическое лицо, \r\nLEGAL – юридическое лицо,\r\nSOLE_PROPRIETOR – индивидуальный предприниматель,\r\nFOREIGNER – иностранный гражданин");
            });

            modelBuilder.Entity<DataElkStatusChange>(entity =>
            {
                entity.ToTable("data_elk_status_change");

                entity.HasIndex(e => e.DataElkOrderId, "data_elk_status_change_data_elk_order_id_idx");

                entity.HasIndex(e => new { e.DateSent, e.Responsecode }, "data_elk_status_change_date_sent_code_idx");

                entity.HasIndex(e => e.DateSent, "data_elk_status_change_date_sent_idx");

                entity.HasIndex(e => e.Id, "data_elk_status_change_id_idx")
                    .IsUnique();

                entity.HasIndex(e => e.MessageId, "data_elk_status_change_message_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address")
                    .HasComment("Адрес ОИВ. Обязательно, если «action» = «ADD» или «UPDATE». Включая офис, кабинет.");

                entity.Property(e => e.Cancelallowed)
                    .HasColumnName("cancelallowed")
                    .HasComment("Возможность запроса Заявителем отмены заявления. По умолчанию cancelAllowed=false. Если cancelAllowed=true, то в карточке заявления отображается кнопка «Отменить заявление».");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("данные для изменения статуса уже созданной услуги в ЕЛК");

                entity.Property(e => e.DataElkOrderId)
                    .HasColumnName("data_elk_order_id")
                    .HasComment("связь с data_elk_order_id");

                entity.Property(e => e.DateCreated)
                    .HasColumnName("date_created")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время создания записи");

                entity.Property(e => e.DateSent)
                    .HasColumnName("date_sent")
                    .HasComment("Дата и время отправки на сервис");

                entity.Property(e => e.Eventauthor)
                    .HasMaxLength(255)
                    .HasColumnName("eventauthor")
                    .HasComment("Автор, Выводится в заявлении в поле «Автор» вкладки «История рассмотрения заявления» (необязательно)");

                entity.Property(e => e.Eventcomment)
                    .HasMaxLength(255)
                    .HasColumnName("eventcomment")
                    .HasComment("Комментарий к событию, выводится в заявлении в поле «Комментарий» вкладки «История рассмотрения заявления» (необязательно)");

                entity.Property(e => e.Eventdate)
                    .HasColumnName("eventdate")
                    .HasComment("Дата и время события. Если не указано, то на ЕПГУ будет выводиться системная дата получения события. (необязательно)");

                entity.Property(e => e.Infocode)
                    .HasMaxLength(255)
                    .HasColumnName("infocode")
                    .HasComment("Код информационного сообщения");

                entity.Property(e => e.InviteAction)
                    .HasMaxLength(255)
                    .HasColumnName("invite_action")
                    .HasComment("Действие: ADD - Добавление, UPDATE - Изменение, CANCEL - Отмена.");

                entity.Property(e => e.Invitecode)
                    .HasMaxLength(255)
                    .HasColumnName("invitecode")
                    .HasComment("Код приглашения в ИС ведомства, используется в дальнейшем для изменения или удаления приглашения");

                entity.Property(e => e.Inviteenddate)
                    .HasColumnName("inviteenddate")
                    .HasComment("Дата и время окончания (необязательно)");

                entity.Property(e => e.Invitestartdate)
                    .HasColumnName("invitestartdate")
                    .HasComment("Дата и время начала. Обязательно, если «action» = «ADD» или «UPDATE».");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор сообщения СМЭВ 3");

                entity.Property(e => e.Mode)
                    .HasColumnName("mode")
                    .HasComment("Тип события:\r\n1 = Изменение статуса\r\n2 = Ожидает оплаты\r\n3 = Оплачено\r\n4 = Информационное сообщение\r\n5 = Текстовое сообщение\r\n6 = Приглашение на прием");

                entity.Property(e => e.Orgname)
                    .HasMaxLength(255)
                    .HasColumnName("orgname")
                    .HasComment("Наименование ОИВ. Обязательно, если «action» = «ADD» или «UPDATE». Наименование отделения, офиса.");

                entity.Property(e => e.Paymentdescription)
                    .HasMaxLength(255)
                    .HasColumnName("paymentdescription")
                    .HasComment("Назначение платежа, для status=«W» должно быть хотя бы одно начисление. Выводится в заявлении в поле «Наименования платежа» вкладки «Счета к оплате».");

                entity.Property(e => e.Paymentsource)
                    .HasMaxLength(255)
                    .HasColumnName("paymentsource")
                    .HasComment("Источник начисления, для status=«W» должно быть хотя бы одно начисление, для ФК указывается значение «FK».");

                entity.Property(e => e.Paymentuin)
                    .HasMaxLength(255)
                    .HasColumnName("paymentuin")
                    .HasComment("Уникальный идентификатор начисления, для status=«W» должно быть хотя бы одно начисление.");

                entity.Property(e => e.RequestXml)
                    .HasColumnName("request_xml")
                    .HasComment("XML запроса");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("XML ответа");

                entity.Property(e => e.Responsecode)
                    .HasMaxLength(255)
                    .HasColumnName("responsecode")
                    .HasComment("Код результата выполнения");

                entity.Property(e => e.ResponsecodeDescription)
                    .HasMaxLength(255)
                    .HasColumnName("responsecode_description")
                    .HasComment("Описание кода результата выполнения");

                entity.Property(e => e.Sendmessageallowed)
                    .HasColumnName("sendmessageallowed")
                    .HasComment("Возможность посылки Заявителем текстовых сообщений в ИС государственного органа (ведомства). По умолчанию sendMessageAllowed=false.");

                entity.Property(e => e.Statusorgcode)
                    .HasMaxLength(255)
                    .HasColumnName("statusorgcode")
                    .HasComment("Код статуса заявления, используемый в ИС государственного органа (ведомства)");

                entity.Property(e => e.Statustechcode)
                    .HasColumnName("statustechcode")
                    .HasComment("Технологический код статуса на ЕПГУ, перечень технологических кодов приведен в приложении");
            });

            modelBuilder.Entity<DataEmployeesAlert>(entity =>
            {
                entity.ToTable("data_employees_alert");

                entity.HasComment("Оповещения для сотрудников\r\n-- Добавил поле data_services_smev_request_id. 26.08.2019 Велимурадов");

                entity.HasIndex(e => e.Id, "data_employees_alert_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.AlertType, e.DataServicesInfoId }, "data_employees_alert_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DataServicesInfoId }, "data_employees_alert_idx3");

                entity.HasIndex(e => e.DataTestId, "data_employees_alert_idx4");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DataServicesId }, "data_employees_alert_idx5");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.AlertType }, "data_employees_alert_idx6");

                entity.HasIndex(e => e.DataServicesSmevRequestId, "data_employees_alert_idx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AlertType)
                    .HasColumnName("alert_type")
                    .HasComment("Тип уведомления  (1 - Новая услуга, 2 - Новое примечание, 3 - Ответ от СМЭВ 5, - Новый тест)");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(70)
                    .HasColumnName("commentt")
                    .HasComment("Текст напоминания");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("Электронная почта заявителя");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name")
                    .HasComment("Наименование заявителя");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("Номер телефона заявителя 1");

                entity.Property(e => e.CustomerTel2)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel2")
                    .HasComment("Номер телефона заявителя 2");

                entity.Property(e => e.DataFeedbackQuestionTicketId)
                    .HasMaxLength(70)
                    .HasColumnName("data_feedback_question_ticket_id")
                    .HasComment("связь с номером инцедента, ticket_id в таблице   data_feedback_question");

                entity.Property(e => e.DataServicesCommenttId)
                    .HasColumnName("data_services_commentt_id")
                    .HasComment("связь с комментарием при необходимости ,data_services_comment id");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Связь с услугой , data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Номер дела, data_services_info id");

                entity.Property(e => e.DataServicesSmevRequestId)
                    .HasColumnName("data_services_smev_request_id")
                    .HasComment("Связь с запросом СМЭВ data_services_smev_request");

                entity.Property(e => e.DataTestId)
                    .HasColumnName("data_test_id")
                    .HasComment("Тест");

                entity.Property(e => e.RequestName)
                    .HasMaxLength(350)
                    .HasColumnName("request_name")
                    .HasComment("Наименование запроса");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время добавления записи");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Связь с сотрудником, spr_employees id");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataEmployeesAlerts)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("data_employees_alert_data_services_info_id_fkey");

                entity.HasOne(d => d.DataServicesSmevRequest)
                    .WithMany(p => p.DataEmployeesAlerts)
                    .HasForeignKey(d => d.DataServicesSmevRequestId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("data_employees_alert_data_services_smev_request_id_fkey");

                entity.HasOne(d => d.DataTest)
                    .WithMany(p => p.DataEmployeesAlerts)
                    .HasForeignKey(d => d.DataTestId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("data_employees_alert_data_test_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataEmployeesAlerts)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_employees_alert_spr_employee_id_fkey");
            });

            modelBuilder.Entity<DataEmployeesInterviewAnswer>(entity =>
            {
                entity.ToTable("data_employees_interview_answer");

                entity.HasComment("Ответы к вопросам");

                entity.HasIndex(e => e.Id, "data_employees_interview_answer_id_idx");

                entity.HasIndex(e => e.Id, "data_employees_interview_answer_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.DataEmployeesInterviewQuestionId, "data_employees_interview_answer_interview_question_id_idx");

                entity.HasIndex(e => e.SprEmployeesId, "data_employees_interview_answer_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Answer)
                    .HasColumnName("answer")
                    .HasComment("ответ");

                entity.Property(e => e.DataEmployeesInterviewQuestionId)
                    .HasColumnName("data_employees_interview_question_id")
                    .HasComment("Связь с вопросами");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");

                entity.HasOne(d => d.DataEmployeesInterviewQuestion)
                    .WithMany(p => p.DataEmployeesInterviewAnswers)
                    .HasForeignKey(d => d.DataEmployeesInterviewQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_employees_interview_answer_interview_question_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataEmployeesInterviewAnswers)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_employees_interview_answer_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataEmployeesInterviewQuestion>(entity =>
            {
                entity.ToTable("data_employees_interview_question");

                entity.HasComment("Вопросы");

                entity.HasIndex(e => new { e.DateStart, e.DateStop }, "data_employees_interview_question_date_start_date_stop_idx");

                entity.HasIndex(e => e.Id, "data_employees_interview_question_id_idx")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("Дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("Дата окончания");

                entity.Property(e => e.Questions)
                    .HasColumnName("questions")
                    .HasComment("Вопрос");
            });

            modelBuilder.Entity<DataEmployeesLog>(entity =>
            {
                entity.ToTable("data_employees_log");

                entity.HasComment("Лог изменений");

                entity.HasIndex(e => e.Id, "data_employees_log_idx1");

                entity.HasIndex(e => e.SprEmployeesId, "data_employees_log_idx2");

                entity.HasIndex(e => e.DateModifi, "data_employees_log_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("коммментарий");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер обращения");

                entity.Property(e => e.DateModifi)
                    .HasColumnName("date_modifi")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата внесения изменений");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(30)
                    .HasColumnName("field_name")
                    .HasComment("наименование поля");

                entity.Property(e => e.NewValue)
                    .HasMaxLength(1500)
                    .HasColumnName("new_value")
                    .HasComment("новое значение");

                entity.Property(e => e.OldValue)
                    .HasMaxLength(1500)
                    .HasColumnName("old_value")
                    .HasComment("старое значение");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник , связь с spr_employees id");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("table_name")
                    .HasComment("наименование таблицы");

                entity.Property(e => e.TypeModifi)
                    .HasColumnName("type_modifi")
                    .HasComment("0 - редактирование , 1 - удаление");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataEmployeesLogs)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_log_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataEmployeesMfcIasMkguOur>(entity =>
            {
                entity.ToTable("data_employees_mfc_ias_mkgu_our");

                entity.HasComment("Оценки с нашей системы");

                entity.HasIndex(e => e.Id, "data_employees_mfc_ias_mkgu_our_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DatePercent }, "data_employees_mfc_ias_mkgu_our_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DatePercent)
                    .HasColumnType("date")
                    .HasColumnName("date_percent")
                    .HasComment("дата");

                entity.Property(e => e.IasMkguPercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("ias_mkgu_percent")
                    .HasComment("процент ИАС мкгу");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время занесения");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataEmployeesMfcIasMkguOurs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_employees_mfc_ias_mkgu_our_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataEmployeesMfcIasMkguWebsite>(entity =>
            {
                entity.ToTable("data_employees_mfc_ias_mkgu_website");

                entity.HasComment("Оценки с сайта иас мкгу");

                entity.HasIndex(e => e.Id, "data_employees_mfc_ias_mkgu_website_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateRating }, "data_employees_mfc_ias_mkgu_website_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateRating)
                    .HasColumnType("date")
                    .HasColumnName("date_rating")
                    .HasComment("дата");

                entity.Property(e => e.IasMkguRating)
                    .HasPrecision(15, 2)
                    .HasColumnName("ias_mkgu_rating")
                    .HasComment("оценка с сайта");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время ввода");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataEmployeesMfcIasMkguWebsites)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_employees_mfc_ias_mkgu_website_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataEmployeesReminder>(entity =>
            {
                entity.ToTable("data_employees_reminder");

                entity.HasComment("Напоминания сотрудникам по обращениям");

                entity.HasIndex(e => e.Id, "data_employees_reminder_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesId }, "data_employees_reminder_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_employees_reminder_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("текст напомининия");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("Электронная почта заявителя");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("наименование заявителя");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("Телефон 1 заявителя");

                entity.Property(e => e.CustomerTel2)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel2")
                    .HasComment("Телефон 2 заявителя");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь с обращением, data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateReminder)
                    .HasColumnType("date")
                    .HasColumnName("date_reminder")
                    .HasComment("дата напоминания");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("Название услуги");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataEmployeesReminders)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_employees_reminder_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataEmployeesReminders)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_employees_reminder_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataEpguDocumentsLoad>(entity =>
            {
                entity.ToTable("data_epgu_documents_load");

                entity.HasComment("Таблица для получения данных из системы ЕОС Дело");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.AttachedToMfcData, e.TestMode }, "data_epgu_documents_load_idx1");

                entity.HasIndex(e => new { e.ElkStage, e.DataServicesInfoId, e.TestMode }, "data_epgu_documents_load_idx2");

                entity.HasIndex(e => e.DataServicesInfoId, "fki_data_epgu_documents_load_data_services_info_id_fkey");

                entity.HasIndex(e => e.SprSmevSystemAccessId, "fki_data_epgu_documents_load_spr_smev_system_access_fk");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ApplicantLegalAddress)
                    .HasMaxLength(1000)
                    .HasColumnName("applicant_legal_address")
                    .HasComment("Адрес юридический (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalChiefFio)
                    .HasMaxLength(300)
                    .HasColumnName("applicant_legal_chief_fio")
                    .HasComment("ФИО руководителя (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalEmail)
                    .HasMaxLength(110)
                    .HasColumnName("applicant_legal_email")
                    .HasComment("Адрес электронной почты (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalFactAddress)
                    .HasMaxLength(1000)
                    .HasColumnName("applicant_legal_fact_address")
                    .HasComment("Адрес почтовый (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalForm)
                    .HasMaxLength(200)
                    .HasColumnName("applicant_legal_form")
                    .HasComment("Организационно-правовая формая (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalFullname)
                    .HasMaxLength(200)
                    .HasColumnName("applicant_legal_fullname")
                    .HasComment("Полное фирменное наименование (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalInn)
                    .HasMaxLength(20)
                    .HasColumnName("applicant_legal_inn")
                    .HasComment("ИНН (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalKpp)
                    .HasMaxLength(9)
                    .HasColumnName("applicant_legal_kpp")
                    .HasComment("КПП (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalName)
                    .HasMaxLength(200)
                    .HasColumnName("applicant_legal_name")
                    .HasComment("Сокращенное фирменное наименование (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalOgrn)
                    .HasMaxLength(20)
                    .HasColumnName("applicant_legal_ogrn")
                    .HasComment("ОГРН (юридическое лицо)");

                entity.Property(e => e.ApplicantLegalPhone)
                    .HasMaxLength(10)
                    .HasColumnName("applicant_legal_phone")
                    .HasComment("Контактный телефон (юридическое лицо)");

                entity.Property(e => e.ApplicantPhysBirthdate)
                    .HasColumnType("date")
                    .HasColumnName("applicant_phys_birthdate")
                    .HasComment("Дата рождения заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysBirthplace)
                    .HasMaxLength(500)
                    .HasColumnName("applicant_phys_birthplace")
                    .HasComment("Место рождения заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysEmail)
                    .HasMaxLength(110)
                    .HasColumnName("applicant_phys_email")
                    .HasComment("Email заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysFio)
                    .HasMaxLength(300)
                    .HasColumnName("applicant_phys_fio")
                    .HasComment("ФИО заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysIdentityDate)
                    .HasColumnType("date")
                    .HasColumnName("applicant_phys_identity_date")
                    .HasComment("Дата выдачи документа заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysIdentityIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("applicant_phys_identity_issuer")
                    .HasComment("Орган выдачи документа заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysIdentityIssuerCode)
                    .HasMaxLength(7)
                    .HasColumnName("applicant_phys_identity_issuer_code")
                    .HasComment("Код подразделения органа выдачи документа заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysIdentityNumber)
                    .HasMaxLength(10)
                    .HasColumnName("applicant_phys_identity_number")
                    .HasComment("Номер документа заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysIdentitySeries)
                    .HasMaxLength(10)
                    .HasColumnName("applicant_phys_identity_series")
                    .HasComment("Серия документа заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysIdentityType)
                    .HasColumnName("applicant_phys_identity_type")
                    .HasComment("Тип документа заявителя (физическое лицо) (1 - паспорт РФ, 2 - иностранный паспорт, 3 - вид на жительство)");

                entity.Property(e => e.ApplicantPhysLivingAddress)
                    .HasMaxLength(1000)
                    .HasColumnName("applicant_phys_living_address")
                    .HasComment("Адрес проживания заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysPhone)
                    .HasMaxLength(10)
                    .HasColumnName("applicant_phys_phone")
                    .HasComment("Контактный телефон (физическое лицо)");

                entity.Property(e => e.ApplicantPhysRegAddress)
                    .HasMaxLength(1000)
                    .HasColumnName("applicant_phys_reg_address")
                    .HasComment("Адрес регистрации заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantPhysSnils)
                    .HasMaxLength(20)
                    .HasColumnName("applicant_phys_snils")
                    .HasComment("СНИЛС заявителя (физическое лицо)");

                entity.Property(e => e.ApplicantType)
                    .HasColumnName("applicant_type")
                    .HasComment("Тип заявителя (1 - физическое лицо, 2 - юридическое лицо)");

                entity.Property(e => e.AttachedToMfcData)
                    .HasColumnName("attached_to_mfc_data")
                    .HasComment("Флаг, что вложения данных запроса прикреплены к делу и отправлены на FTP МФЦ.");

                entity.Property(e => e.AttachmentCount)
                    .HasColumnName("attachment_count")
                    .HasComment("Количество вложений в принятом пакете документов");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Cвязь с номером обращения, data_services_info id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("date_created")
                    .HasComment("Дата и время получения данных из запроса");

                entity.Property(e => e.ElkStage)
                    .HasColumnName("elk_stage")
                    .HasComment("Статус отправки в ЕЛК:\n0 - Приглашение на прием не отправлено;\n1 - Приглашение на прием отправлено;\n2 - Требуется отправить статус \"Исполнено\";\n3 - Статус \"Исполнено\" отправлен.\n");

                entity.Property(e => e.EpguOrderId)
                    .HasColumnName("epgu_order_id")
                    .HasComment("Идентификатор зявления на ЕПГУ, для изменения статуса заявления или приглашениия на прием через сервис ЕЛК");

                entity.Property(e => e.OriginalMessageId)
                    .HasColumnName("original_message_id")
                    .HasComment("Начальный идентификатор MessageId запроса");

                entity.Property(e => e.PortalMfcId)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("portal_mfc_id")
                    .HasComment("Идентификатор МФЦ из справочника ПГУ");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(500)
                    .HasColumnName("service_name")
                    .HasComment("Наименование услуги в АИС Дело, по которой пришли документы");

                entity.Property(e => e.SprSmevSystemAccessId)
                    .HasColumnName("spr_smev_system_access_id")
                    .HasComment("Связь со справочником spr_smev_system_access -> id, идентифицирует систему, от которой пришел запрос");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Код результата оказания услуги, принятого ведомством (1 - Исполнено, 2 - Отказ)");

                entity.Property(e => e.StatusComment)
                    .HasMaxLength(500)
                    .HasColumnName("status_comment")
                    .HasComment("Комментарий к коду результата, принятого ведомством");

                entity.Property(e => e.TestMode)
                    .IsRequired()
                    .HasColumnName("test_mode")
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг, что запрос сделан в тестовом режиме (эмулятор)");

                entity.HasOne(d => d.SprSmevSystemAccess)
                    .WithMany(p => p.DataEpguDocumentsLoads)
                    .HasForeignKey(d => d.SprSmevSystemAccessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_epgu_documents_load_spr_smev_system_access_fk");
            });

            modelBuilder.Entity<DataEpguDocumentsResponse>(entity =>
            {
                entity.ToTable("data_epgu_documents_response");

                entity.HasComment("Таблица для хранения ответов для системы ЕОС Дело");

                entity.HasIndex(e => e.DataEpguDocumentsLoadId, "fki_data_epgu_documents_response_data_epgu_documents_load_id_fk");

                entity.HasIndex(e => e.SprSmevSystemAccessId, "fki_data_epgu_documents_response_spr_smev_system_access_id_fk");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataEpguDocumentsLoadId)
                    .HasColumnName("data_epgu_documents_load_id")
                    .HasComment("Связь с таблицей data_epgu_documents_load -> id");

                entity.Property(e => e.DateAckConfirmed)
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("date_ack_confirmed")
                    .HasComment("Дата и время, когда пришло подтверждение получения ответа от системы Дело");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("date_created")
                    .HasComment("Дата и время создания ответа");

                entity.Property(e => e.DateResponseRequested)
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("date_response_requested")
                    .HasComment("Дата и время, когда ответ ушел в систему Дело");

                entity.Property(e => e.MessageId)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор MessageId ответа");

                entity.Property(e => e.SprSmevSystemAccessId)
                    .HasColumnName("spr_smev_system_access_id")
                    .HasComment("Связь со справочником spr_smev_system_access -> id, идентифицирует систему, от которой пришел запрос");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус в ответе (0 - Успешно зарегистрировано в МФЦ, 1 - Ошибка регистрации в МФЦ)");

                entity.Property(e => e.StatusComment)
                    .HasMaxLength(500)
                    .HasColumnName("status_comment")
                    .HasComment("Комментарий к статусу в ответе");

                entity.Property(e => e.TestMode)
                    .HasColumnName("test_mode")
                    .HasComment("Флаг, что это ответ на запрос, сделаный в тестовом режиме (эмулятор).");

                entity.HasOne(d => d.DataEpguDocumentsLoad)
                    .WithMany(p => p.DataEpguDocumentsResponses)
                    .HasForeignKey(d => d.DataEpguDocumentsLoadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_epgu_documents_response_data_epgu_documents_load_id_fk");

                entity.HasOne(d => d.SprSmevSystemAccess)
                    .WithMany(p => p.DataEpguDocumentsResponses)
                    .HasForeignKey(d => d.SprSmevSystemAccessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_epgu_documents_response_spr_smev_system_access_id_fk");
            });

            modelBuilder.Entity<DataEpguSubsFedDocumentIdentity>(entity =>
            {
                entity.ToTable("data_epgu_subs_fed_document_identity");

                entity.HasComment("Документы удостоверяющие личность");

                entity.HasIndex(e => e.Id, "data_epgu_subs_fed_document_identity_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первтчный ключ");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("document_name")
                    .HasComment("Наименование документа");
            });

            modelBuilder.Entity<DataEpguSubsFedRelation>(entity =>
            {
                entity.ToTable("data_epgu_subs_fed_relation");

                entity.HasComment("Степень родства");

                entity.HasIndex(e => e.Id, "data_epgu_subs_fed_relation_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.RelationName)
                    .HasColumnType("character varying")
                    .HasColumnName("relation_name")
                    .HasComment("степень родства");
            });

            modelBuilder.Entity<DataEpguSubsFedRelationDocument>(entity =>
            {
                entity.ToTable("data_epgu_subs_fed_relation_document");

                entity.HasComment("Документы, подтверждающие степень родства");

                entity.HasIndex(e => e.Id, "data_epgu_subs_fed_relation_document_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ ");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("document_name")
                    .HasComment("Наименование документа");
            });

            modelBuilder.Entity<DataEpguSubsFedRepresentative>(entity =>
            {
                entity.ToTable("data_epgu_subs_fed_representative");

                entity.HasComment("Документ, подтверждающий полномочия законного представителя");

                entity.HasIndex(e => e.Id, "data_epgu_subs_fed_representative_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(100)
                    .HasColumnName("document_name")
                    .HasComment("Нименование документа");
            });

            modelBuilder.Entity<DataEpguSubsRegAllowanseDocument>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_allowanse_document");

                entity.HasComment("Документ, подтверждающий льготную категорию");

                entity.HasIndex(e => e.Id, "data_epgu_reg_subs_allowanse_document_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("document_name")
                    .HasComment("наименование документа");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegAllowanseJoin>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_allowanse_join");

                entity.HasComment("Связь документов на льготы с категориями правообладателей");

                entity.HasIndex(e => e.Id, "data_subs_epgu_allowanse_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataEpguSubsRegAllowanseDocumentId, "data_subs_epgu_allowanse_join_idx2");

                entity.HasIndex(e => e.DataEpguSubsRegCategoryCopyrightId, "data_subs_epgu_allowanse_join_idx3");

                entity.HasIndex(e => new { e.DataEpguSubsRegAllowanseDocumentId, e.DataEpguSubsRegCategoryCopyrightId }, "data_subs_epgu_allowanse_join_idx4")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataEpguSubsRegAllowanseDocumentId)
                    .HasColumnName("data_epgu_subs_reg_allowanse_document_id")
                    .HasComment("документ подтверждающий льготую категорию, data_epgu_reg_subs_allowanse_document id");

                entity.Property(e => e.DataEpguSubsRegCategoryCopyrightId)
                    .HasColumnName("data_epgu_subs_reg_category_copyright_id")
                    .HasComment("категория правообладателя, data_epgu_subs_reg_category_copyright id");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegCategoryCopyright>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_category_copyright");

                entity.HasComment("Категории правообладателя");

                entity.HasIndex(e => e.Id, "data_subs_reg_category_copyright_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("category_name")
                    .HasComment("Нименование категории");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код ВИС");
            });

            modelBuilder.Entity<DataEpguSubsRegCategoryJoin>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_category_join");

                entity.HasComment("Привязка категорий правообладателя по вариантам оказания услуги");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_category_join_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DataEpguSubsRegCategoryCopyrightId)
                    .HasColumnName("data_epgu_subs_reg_category_copyright_id")
                    .HasComment("категория правообладателя , связь с data_epgu_subs_reg_category_copyright id");

                entity.Property(e => e.DataEpguSubsRegOptionsServiceId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("data_epgu_subs_reg_options_service_id")
                    .HasComment("связь с вариантом оказания услуги , data_epgu_subs_reg_options_service id");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegDocument>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_document");

                entity.HasComment("Документы на оказание услуги");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_document_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("document_name")
                    .HasComment("натменование документа");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegDocumentJoin>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_document_join");

                entity.HasComment("Привязка предоставляемых документов по вариантам оказания услуги");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_document_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataEpguSubsRegOptionsServiceId, "data_epgu_subs_reg_document_join_idx2");

                entity.HasIndex(e => e.DataEpguSubsRegDocumentId, "data_epgu_subs_reg_document_join_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CustomerType)
                    .HasColumnName("customer_type")
                    .HasComment("1 – правообладатель / 2 – законный представитель");

                entity.Property(e => e.DataEpguSubsRegDocumentId)
                    .HasColumnName("data_epgu_subs_reg_document_id")
                    .HasComment("Документ , связь data_epgu_subs_reg_document id");

                entity.Property(e => e.DataEpguSubsRegOptionsServiceId)
                    .HasMaxLength(30)
                    .HasColumnName("data_epgu_subs_reg_options_service_id")
                    .HasComment("Вариант оказания услуги");

                entity.Property(e => e.Region)
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("Регион");
            });

            modelBuilder.Entity<DataEpguSubsRegIncomeDocument>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_income_document");

                entity.HasComment("Документы подтверждающие доход");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_income_document_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("document_name")
                    .HasComment("наименование документа");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegIncomeType>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_income_type");

                entity.HasComment("Виды доходов");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_income_type_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.IncomeName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("income_name")
                    .HasComment("наименование дохода");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegOffice>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_office");

                entity.HasComment("Отделения, оказывающие услугу");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_office_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.OfficeAdress)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("office_adress")
                    .HasComment("адрес");

                entity.Property(e => e.OfficeCodeFias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("office_code_fias")
                    .HasComment("код по фиас");

                entity.Property(e => e.OfficeEmail)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("office_email")
                    .HasComment("электронная почта");

                entity.Property(e => e.OfficeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("office_name")
                    .HasComment("полное аименование");

                entity.Property(e => e.OfficeNameSmall)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("office_name_small")
                    .HasComment("краткое наименование");

                entity.Property(e => e.OfficeSchedule)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("office_schedule")
                    .HasComment("Режим работы");

                entity.Property(e => e.OfficeTel)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("office_tel")
                    .HasComment("телефон");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegOfficeServiceJoin>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_office_service_join");

                entity.HasComment("Привязка вариантов оказания услуги по отделениям");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_office_service_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataEpguSubsRegOptionsServiceId, "data_epgu_subs_reg_office_service_join_idx2");

                entity.HasIndex(e => e.DataEpguSubsRegOfficeId, "data_epgu_subs_reg_office_service_join_idx3");

                entity.HasIndex(e => new { e.DataEpguSubsRegOptionsServiceId, e.DataEpguSubsRegOfficeId }, "data_epgu_subs_reg_office_service_join_idx4")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DataEpguSubsRegOfficeId)
                    .HasColumnName("data_epgu_subs_reg_office_id")
                    .HasComment("связь с отделением, data_epgu_subs_reg_office id");

                entity.Property(e => e.DataEpguSubsRegOptionsServiceId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("data_epgu_subs_reg_options_service_id")
                    .HasComment("связь с вариантом оказания услуги , data_epgu_subs_reg_options_service id");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("код вис");
            });

            modelBuilder.Entity<DataEpguSubsRegOptionsService>(entity =>
            {
                entity.ToTable("data_epgu_subs_reg_options_service");

                entity.HasComment("Варианты оказания услуги");

                entity.HasIndex(e => e.Id, "data_epgu_subs_reg_options_service_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(30)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.OptionsName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("options_name")
                    .HasComment("Ниманование варианта");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("region")
                    .HasComment("Код вис");
            });

            modelBuilder.Entity<DataFeedbackAnswer>(entity =>
            {
                entity.ToTable("data_feedback_answer");

                entity.HasComment("Ответы на вопросы от сотрудников");

                entity.HasIndex(e => e.Id, "data_feedback_answer_idx1");

                entity.HasIndex(e => new { e.DataFeedbackQuestionId, e.SprEmployeesId, e.DateRead }, "data_feedback_answer_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_feedback_answer_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AnswerText)
                    .IsRequired()
                    .HasColumnName("answer_text")
                    .HasComment("текст ответа");

                entity.Property(e => e.DataFeedbackQuestionId)
                    .HasColumnName("data_feedback_question_id")
                    .HasComment("связь с ответом data_feedback_question id");

                entity.Property(e => e.DateRead)
                    .HasColumnName("date_read")
                    .HasComment("дата чтения ответа");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.HasOne(d => d.DataFeedbackQuestion)
                    .WithMany(p => p.DataFeedbackAnswers)
                    .HasForeignKey(d => d.DataFeedbackQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_feedback_answer_data_feedback_question_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataFeedbackAnswers)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_feedback_answer_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataFeedbackExecution>(entity =>
            {
                entity.ToTable("data_feedback_execution");

                entity.HasComment("Исполнители инцедентов");

                entity.HasIndex(e => e.Id, "data_feeback_execution_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataFeedbackQuestionId, e.SprEmployeesId }, "data_feeback_execution_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DataFeedbackQuestionId }, "data_feeback_execution_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataFeedbackQuestionId)
                    .HasColumnName("data_feedback_question_id")
                    .HasComment("связь с вопросом, data_feedback_question id");

                entity.Property(e => e.SetDate)
                    .HasPrecision(0)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата уствновка исполнителя");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто передал на сотрудника");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.HasOne(d => d.DataFeedbackQuestion)
                    .WithMany(p => p.DataFeedbackExecutions)
                    .HasForeignKey(d => d.DataFeedbackQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_feeback_execution_data_feedback_question_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataFeedbackExecutions)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_feeback_execution_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataFeedbackQuestion>(entity =>
            {
                entity.ToTable("data_feedback_question");

                entity.HasComment("Вопросы сотрудников  тех потдержку");

                entity.HasIndex(e => e.Id, "data_feedback_question_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.Closed }, "data_feedback_question_idx2");

                entity.HasIndex(e => new { e.SprEmployeesIdExecution, e.Closed }, "data_feedback_question_idx3");

                entity.HasIndex(e => e.SprFeedbackQuestionTypeId, "data_feedback_question_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Closed)
                    .HasColumnName("closed")
                    .HasDefaultValueSql("false")
                    .HasComment("статус , закрыт инцедент или нет");

                entity.Property(e => e.DateClosed)
                    .HasColumnType("date")
                    .HasColumnName("date_closed")
                    .HasComment("Дата закрытия инцедента");

                entity.Property(e => e.DateRead)
                    .HasColumnName("date_read")
                    .HasComment("дата и время чтения ответа");

                entity.Property(e => e.EmployeesFioRead)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_read")
                    .HasComment("кто прочитал вопрос");

                entity.Property(e => e.QuestionText)
                    .IsRequired()
                    .HasColumnName("question_text")
                    .HasComment("Текст вопроса");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("кто добавил вопрос, spr_employees id");

                entity.Property(e => e.SprEmployeesIdExecution)
                    .HasColumnName("spr_employees_id_execution")
                    .HasComment("кто является исполнителем,spr_employees id");

                entity.Property(e => e.SprFeedbackQuestionTypeId)
                    .HasColumnName("spr_feedback_question_type_id")
                    .HasComment("тип, spr_feedback_question_type id");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("subject")
                    .HasComment("тема инцедента");

                entity.Property(e => e.TicketId)
                    .HasMaxLength(70)
                    .HasColumnName("ticket_id")
                    .HasComment("связь с номером дела, data_services_info id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataFeedbackQuestions)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_feedback_question_spr_employees_id_fkey");

                entity.HasOne(d => d.SprFeedbackQuestionType)
                    .WithMany(p => p.DataFeedbackQuestions)
                    .HasForeignKey(d => d.SprFeedbackQuestionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_feedback_question_spr_feedback_question_type_id_fkey");
            });

            modelBuilder.Entity<DataFsspUpload>(entity =>
            {
                entity.ToTable("data_fssp_upload");

                entity.HasComment("Выгрузка для ФССП");

                entity.HasIndex(e => e.Id, "data_fssp_upload_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesInfoId, "data_fssp_upload_idx2");

                entity.HasIndex(e => e.IpNumbers, "data_fssp_upload_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasColumnName("customer_address")
                    .HasComment("Адресс");

                entity.Property(e => e.CustomerContragentName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_contragent_name")
                    .HasComment("Наименовние фирмы/организации");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("электронная почта");

                entity.Property(e => e.CustomerFio)
                    .HasMaxLength(255)
                    .HasColumnName("customer_fio")
                    .HasComment("фио");

                entity.Property(e => e.CustomerInn)
                    .HasMaxLength(255)
                    .HasColumnName("customer_inn")
                    .HasComment("ИНН");

                entity.Property(e => e.CustomerKpp)
                    .HasMaxLength(255)
                    .HasColumnName("customer_kpp")
                    .HasComment("КПП");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("Телефон 1");

                entity.Property(e => e.CustomerTel2)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel2")
                    .HasComment("Телефон 2");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер обращения");

                entity.Property(e => e.DateSend)
                    .HasPrecision(0)
                    .HasColumnName("date_send")
                    .HasComment("Дата и время отправки");

                entity.Property(e => e.DocumentBirthDate)
                    .HasColumnType("date")
                    .HasColumnName("document_birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.IpNumbers)
                    .HasMaxLength(2000)
                    .HasColumnName("ip_numbers")
                    .HasComment("Номера исполнительных производств");

                entity.Property(e => e.SetDate)
                    .HasPrecision(0)
                    .HasColumnName("set_date")
                    .HasComment("Дата и время добавления");
            });

            modelBuilder.Entity<DataIasMkguInfomatAnswer>(entity =>
            {
                entity.ToTable("data_ias_mkgu_infomat_answer");

                entity.HasComment("Ответы на вопросы  ИАС МКГУ через теминал");

                entity.HasIndex(e => e.Id, "data_ias_mkgu_answer_infomat_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprIasMkguQuestionAnswerId }, "data_ias_mkgu_infomat_answer_idx2");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprIasMkguQuestionId, e.SprIasMkguQuestionAnswerId }, "data_ias_mkgu_infomat_answer_idx3");

                entity.HasIndex(e => e.DateAnswer, "data_ias_mkgu_infomat_answer_idx4");

                entity.HasIndex(e => e.SprIasMkguQuestionId, "data_ias_mkgu_infomat_answer_idx5");

                entity.HasIndex(e => e.SprIasMkguQuestionAnswerId, "data_ias_mkgu_infomat_answer_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь с номером дела,data_services_info id");

                entity.Property(e => e.DateAnswer)
                    .HasColumnName("date_answer")
                    .HasComment("дата и время ответа");

                entity.Property(e => e.SprIasMkguQuestionAnswerId)
                    .HasColumnName("spr_ias_mkgu_question_answer_id")
                    .HasComment("связь с ответом, spr_ias_mkgu_question_answer id");

                entity.Property(e => e.SprIasMkguQuestionId)
                    .HasColumnName("spr_ias_mkgu_question_id")
                    .HasComment("связь с вопросом, spr_ias_mkgu_question id");

                entity.HasOne(d => d.SprIasMkguQuestionAnswer)
                    .WithMany(p => p.DataIasMkguInfomatAnswers)
                    .HasForeignKey(d => d.SprIasMkguQuestionAnswerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_ias_mkgu_answer_infomat_spr_ias_mkgu_question_answer__fkey");

                entity.HasOne(d => d.SprIasMkguQuestion)
                    .WithMany(p => p.DataIasMkguInfomatAnswers)
                    .HasForeignKey(d => d.SprIasMkguQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_ias_mkgu_infomat_answer_spr_ias_mkgu_question_id_fkey");
            });

            modelBuilder.Entity<DataIasMkguInfomatAnswerCommentt>(entity =>
            {
                entity.ToTable("data_ias_mkgu_infomat_answer_commentt");

                entity.HasComment("Комментарии к ответам ИАС мкгу через инфомат");

                entity.HasIndex(e => e.Id, "data_ias_mkgu_answer_infomat_commentt_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesInfoId, "data_ias_mkgu_infomat_answer_commentt_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь с номером дела,data_services_info id");
            });

            modelBuilder.Entity<DataIasMkguInfomatLogUpload>(entity =>
            {
                entity.ToTable("data_ias_mkgu_infomat_log_upload");

                entity.HasComment("Лог отправки данных по Инфомат оценкам ИАС МКГУ");

                entity.HasIndex(e => e.Id, "data_ias_mkgu_upload_infomat_log_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DateSend, "data_ias_mkgu_upload_infomat_log_idx2");

                entity.HasIndex(e => e.MessageId, "data_ias_mkgu_upload_infomat_log_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateSend)
                    .HasColumnType("date")
                    .HasColumnName("date_send")
                    .HasComment("дата отправки");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор запроса СМЭВ 3");

                entity.Property(e => e.PackedId)
                    .HasMaxLength(30)
                    .HasColumnName("packed_id")
                    .HasComment("id пакета");

                entity.Property(e => e.RequestXml)
                    .HasColumnName("request_xml")
                    .HasComment("запрос XML");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("ответ XML");
            });

            modelBuilder.Entity<DataIasMkguInfomatUpload>(entity =>
            {
                entity.ToTable("data_ias_mkgu_infomat_upload");

                entity.HasComment("Данный об отправке пакетов в ИАС МКГУ оценных через инфомат");

                entity.HasIndex(e => e.Id, "data_ias_mkgu_upload_infomat_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DateEnter, e.SprEmployeesId, e.SprEmployeesMfcId }, "data_ias_mkgu_upload_infomat_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateEnter, e.DataServicesInfoId }, "data_ias_mkgu_upload_infomat_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DataServicesInfoId }, "data_ias_mkgu_upload_infomat_idx5");

                entity.HasIndex(e => e.SprEmployeesId, "data_ias_mkgu_upload_infomat_idx6");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_ias_mkgu_upload_infomat_idx7");

                entity.HasIndex(e => e.MessageId, "data_ias_mkgu_upload_infomat_idx8");

                entity.HasIndex(e => new { e.MessageId, e.PackedId }, "data_ias_mkgu_upload_infomat_idx9");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DateEnter)
                    .HasColumnType("date")
                    .HasColumnName("date_enter")
                    .HasComment("дата ввода");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("сотрудник фио");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("нименование должности");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.FrguProcedureId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_procedure_id")
                    .HasComment("Идентификатор процедуры ФРГУ");

                entity.Property(e => e.FrguProviderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("фргу, id  органа власти");

                entity.Property(e => e.FrguServicesId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_id")
                    .HasComment("фргу, id услуги");

                entity.Property(e => e.FrguTargetId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_target_id")
                    .HasComment("фргу, id цели");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор запроса СМЭВ 3");

                entity.Property(e => e.MfcVendorId)
                    .HasColumnName("mfc_vendor_id")
                    .HasComment("мфц vendor id");

                entity.Property(e => e.Okato)
                    .HasMaxLength(30)
                    .HasColumnName("okato")
                    .HasComment("окато Дагестана");

                entity.Property(e => e.PackedId)
                    .HasMaxLength(30)
                    .HasColumnName("packed_id")
                    .HasComment("id пакета с фргу");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата фактического добавления записи");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником кто принял услугу,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью, spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasDefaultValueSql("nextval('data_ias_mkgu_upload_infomat_user_id_seq'::regclass)")
                    .HasComment("внутренний идетификатор пользователя ИАС МКГУ");

                entity.Property(e => e.UserMail)
                    .HasMaxLength(30)
                    .HasColumnName("user_mail")
                    .HasComment("электронная почта пользователя");
            });

            modelBuilder.Entity<DataIasMkguProviderLoad>(entity =>
            {
                entity.HasKey(e => e.FrguProviderId)
                    .HasName("data_ias_mkgu_load_provider_pkey");

                entity.ToTable("data_ias_mkgu_provider_load");

                entity.HasComment("список поставщиков загруженных с иас мкгу");

                entity.HasIndex(e => e.FrguProviderId, "data_ias_mkgu_load_provider_idx1")
                    .IsUnique();

                entity.Property(e => e.FrguProviderId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("id органа власти из фргу");

                entity.Property(e => e.LastUpdate)
                    .HasColumnType("date")
                    .HasColumnName("last_update")
                    .HasComment("дата последнего обновления");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(500)
                    .HasColumnName("provider_name")
                    .HasComment("наименование поставщика");
            });

            modelBuilder.Entity<DataIasMkguRatingLoad>(entity =>
            {
                entity.ToTable("data_ias_mkgu_rating_load");

                entity.HasComment("Оценки загруженные из иас мкгу");

                entity.HasIndex(e => e.Id, "data_ias__mkgu_load_rating_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.FrguProviderId, e.FrguServicesId, e.SprIasMkguIndicatorId, e.SprIasMkguCategoryId }, "data_ias__mkgu_load_rating_idx2");

                entity.HasIndex(e => e.SprIasMkguIndicatorId, "data_ias__mkgu_load_rating_idx3");

                entity.HasIndex(e => e.SprIasMkguCategoryId, "data_ias__mkgu_load_rating_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasComment("дата и время создания оценки");

                entity.Property(e => e.FrguProviderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("id фргу органа власти");

                entity.Property(e => e.FrguServicesId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_id")
                    .HasComment("id фргу услуги");

                entity.Property(e => e.PositivePercent)
                    .HasColumnName("positive_percent")
                    .HasComment("процент удовлетворенности");

                entity.Property(e => e.RatingValue)
                    .HasColumnName("rating_value")
                    .HasComment("значение оценки");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и вреемя добавления записи");

                entity.Property(e => e.SprIasMkguCategoryId)
                    .HasColumnName("spr_ias_mkgu_category_id")
                    .HasComment("источник оценок, связь с spr_ias_mkgu_category id");

                entity.Property(e => e.SprIasMkguIndicatorId)
                    .HasColumnName("spr_ias_mkgu_indicator_id")
                    .HasComment("индекатор критерия, связь с spr_ias_mkgu_indicator id");

                entity.HasOne(d => d.SprIasMkguCategory)
                    .WithMany(p => p.DataIasMkguRatingLoads)
                    .HasForeignKey(d => d.SprIasMkguCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_ias_mkgu_rating_load_spr_ias_mkgu_category_id_fkey");

                entity.HasOne(d => d.SprIasMkguIndicator)
                    .WithMany(p => p.DataIasMkguRatingLoads)
                    .HasForeignKey(d => d.SprIasMkguIndicatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_ias_mkgu_rating_load_spr_ias_mkgu_indicator_id_fkey");
            });

            modelBuilder.Entity<DataIasMkguRatingLogLoad>(entity =>
            {
                entity.ToTable("data_ias_mkgu_rating_log_load");

                entity.HasComment("Логи оценок, загруженных из иас мкгу");

                entity.HasIndex(e => new { e.FrguProviderId, e.EndDate }, "data_ias_mkgu_rating_log_load_idx2");

                entity.HasIndex(e => e.MessageId, "data_ias_mkgu_rating_log_load_message_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("end_date")
                    .HasComment("Дата конца периода оценок");

                entity.Property(e => e.FrguProviderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("id органа власти из фргу");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор запроса СМЭВ 3");

                entity.Property(e => e.RequestXml)
                    .HasColumnName("request_xml")
                    .HasComment("запрос XML");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("ответ XML");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("start_date")
                    .HasComment("Дата начала периода оценок");
            });

            modelBuilder.Entity<DataIasMkguSmsLogUpload>(entity =>
            {
                entity.ToTable("data_ias_mkgu_sms_log_upload");

                entity.HasComment("Лог отправки данных по СМС оценкам ИАС МКГУ");

                entity.HasIndex(e => e.Id, "data_ias_mkgu_upload_sms_log_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DateSend, "data_ias_mkgu_upload_sms_log_idx2");

                entity.HasIndex(e => e.MessageId, "data_ias_mkgu_upload_sms_log_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateSend)
                    .HasColumnType("date")
                    .HasColumnName("date_send")
                    .HasComment("дата отправки");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор запроса СМЭВ 3");

                entity.Property(e => e.PackedId)
                    .HasMaxLength(30)
                    .HasColumnName("packed_id")
                    .HasComment("id пакета");

                entity.Property(e => e.RequestXml)
                    .HasColumnName("request_xml")
                    .HasComment("запрос XML");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("ответ XML");
            });

            modelBuilder.Entity<DataIasMkguSmsUpload>(entity =>
            {
                entity.ToTable("data_ias_mkgu_sms_upload");

                entity.HasComment("Данный об отправке пакетов в ИАС МКГУ на СМС опрос");

                entity.HasIndex(e => e.Id, "data_ias_mkgu_sms_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SetDate, e.SprEmployeesId, e.SprEmployeesMfcId }, "data_ias_mkgu_sms_idx2");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SetDate }, "data_ias_mkgu_sms_idx3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_ias_mkgu_sms_idx4");

                entity.HasIndex(e => e.SprEmployeesId, "data_ias_mkgu_sms_idx5");

                entity.HasIndex(e => e.MessageId, "data_ias_mkgu_sms_idx6");

                entity.HasIndex(e => new { e.MessageId, e.PackedId }, "data_ias_mkgu_sms_idx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("эл. почта заявителя");

                entity.Property(e => e.CustomerTel)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона заявителя");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasColumnType("character varying")
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность ");

                entity.Property(e => e.FrguProcedureId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_procedure_id")
                    .HasComment("Идентификатор процедуры ФРГУ");

                entity.Property(e => e.FrguProviderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("фргу, id  органа власти");

                entity.Property(e => e.FrguServicesId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_id")
                    .HasComment("фргу, id услуги");

                entity.Property(e => e.FrguTargetId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_target_id")
                    .HasComment("фргу, id цели");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(40)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор запроса СМЭВ 3");

                entity.Property(e => e.MfcVendorId)
                    .HasColumnName("mfc_vendor_id")
                    .HasComment("мфц vendor id");

                entity.Property(e => e.Okato)
                    .HasMaxLength(30)
                    .HasColumnName("okato")
                    .HasComment("окато Дагестана");

                entity.Property(e => e.PackedId)
                    .HasMaxLength(30)
                    .HasColumnName("packed_id")
                    .HasComment("id пакета с фргу");

                entity.Property(e => e.ServicesDateFinish)
                    .HasColumnType("date")
                    .HasColumnName("services_date_finish")
                    .HasComment("дата оказания услуги");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата фактического добавления записи");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc  id");
            });

            modelBuilder.Entity<DataIncomingCall>(entity =>
            {
                entity.ToTable("data_incoming_call");

                entity.HasComment("Входящие звонки");

                entity.HasIndex(e => e.Id, "data_incoming_call_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.CustomerTel, "data_incoming_call_idx2");

                entity.HasIndex(e => e.CustomerName, "data_incoming_call_idx3");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "data_incoming_call_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("Заявитель");

                entity.Property(e => e.CustomerTel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.DateCall)
                    .HasColumnName("date_call")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время звонка");

                entity.Property(e => e.SaveFtp)
                    .HasColumnName("save_ftp")
                    .HasComment("признак сохранения на FTP");

                entity.Property(e => e.SoundFormat)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("sound_format")
                    .HasComment("формат звонка");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник принявший звонок");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("связь с ftp сервером , spr_employees_mfc_ftp id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("Связь с филиалом");

                entity.Property(e => e.TimeTalk)
                    .HasMaxLength(10)
                    .HasColumnName("time_talk")
                    .HasComment("время разговора");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.DataIncomingCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_incoming_call_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataIncomingCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .HasConstraintName("data_incoming_call_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataInfo>(entity =>
            {
                entity.ToTable("data_info");

                entity.HasComment("Информация");

                entity.HasIndex(e => e.Id, "data_info_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.InfoDate, e.SprEmployeesId }, "data_info_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_info_idx3");

                entity.HasIndex(e => e.DataInfoTypeId, "data_info_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataInfoTypeId).HasColumnName("data_info_type_id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("employees_fio")
                    .HasComment("кто написал фамилия");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность");

                entity.Property(e => e.InfoDate)
                    .HasPrecision(6)
                    .HasColumnName("info_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время новости");

                entity.Property(e => e.InfoText)
                    .IsRequired()
                    .HasColumnName("info_text")
                    .HasComment("текст новости");

                entity.Property(e => e.InfoTheme)
                    .HasMaxLength(255)
                    .HasColumnName("info_theme")
                    .HasComment("тема");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником , spr_employees id");

                entity.HasOne(d => d.DataInfoType)
                    .WithMany(p => p.DataInfos)
                    .HasForeignKey(d => d.DataInfoTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_info_data_info_type_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataInfos)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .HasConstraintName("data_info_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataInfoFile>(entity =>
            {
                entity.ToTable("data_info_file");

                entity.HasComment("Файлы к информации");

                entity.HasIndex(e => e.Id, "data_info_file_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataInfoId, "data_info_file_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataInfoId)
                    .HasColumnName("data_info_id")
                    .HasComment("связь с новостью , data_news id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasPrecision(6)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время добавления файла");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто добавил файл");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("расширение файла");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("file_name")
                    .HasComment("наименование файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("размер файла");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");
            });

            modelBuilder.Entity<DataInfoRecipient>(entity =>
            {
                entity.ToTable("data_info_recipient");

                entity.HasComment("Адресаты ");

                entity.HasIndex(e => e.Id, "data_info_recipient_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataInfoId, "data_info_recipient_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_info_recipient_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataInfoId)
                    .HasColumnName("data_info_id")
                    .HasComment("связь с новостью data_news id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateSing)
                    .HasColumnName("date_sing")
                    .HasComment("Дата и время ознокомления");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с мфц , кому предназначена новость spr_employees_mfc id");

                entity.HasOne(d => d.DataInfo)
                    .WithMany(p => p.DataInfoRecipients)
                    .HasForeignKey(d => d.DataInfoId)
                    .HasConstraintName("data_info_recipient_data_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataInfoRecipients)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_info_recipient_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataInfoType>(entity =>
            {
                entity.ToTable("data_info_type");

                entity.HasIndex(e => e.Id, "data_info_type_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .HasColumnName("type_name");
            });

            modelBuilder.Entity<DataInfoView>(entity =>
            {
                entity.ToTable("data_info_view");

                entity.HasIndex(e => new { e.DataInfoId, e.SprEmployeesId }, "data_info_view_data_info_id_spr_employees_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "data_info_view_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataInfoId, e.SprEmployeesId }, "data_info_view_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DataInfoId }, "data_info_view_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataInfoId)
                    .HasColumnName("data_info_id")
                    .HasComment("новость, связь с data_news id");

                entity.Property(e => e.DateOpen).HasColumnName("date_open");

                entity.Property(e => e.DateView)
                    .HasPrecision(6)
                    .HasColumnName("date_view")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время прсомотра");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_emloyees id");

                entity.HasOne(d => d.DataInfo)
                    .WithMany(p => p.DataInfoViews)
                    .HasForeignKey(d => d.DataInfoId)
                    .HasConstraintName("data_info_view_data_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataInfoViews)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_info_view_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataMarriageZag>(entity =>
            {
                entity.ToTable("data_marriage_zags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ActCodeUpdate)
                    .HasMaxLength(4)
                    .HasColumnName("act_code_update")
                    .HasComment("Код/Наименование вида записей ");

                entity.Property(e => e.ActDate)
                    .HasColumnType("date")
                    .HasColumnName("act_date")
                    .HasComment("Дата составления записи акта о заключении брака");

                entity.Property(e => e.ActDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("act_date_update")
                    .HasComment("Дата внесения исправления и изменения в запись акта гражданского состояния или дата внесения отметки  \r\n	о восстановлении или об аннулировании записи акта гражданского состояния");

                entity.Property(e => e.ActNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("act_number")
                    .HasComment("Номер записи акта о заключении брака");

                entity.Property(e => e.ActStatus)
                    .HasMaxLength(2)
                    .HasColumnName("act_status")
                    .HasComment("Код статуса");

                entity.Property(e => e.ActStatusDate)
                    .HasColumnType("date")
                    .HasColumnName("act_status_date")
                    .HasComment("Дата начала действия статуса");

                entity.Property(e => e.ActTextUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("act_text_update")
                    .HasComment("Содержание внесенного исправления или изменения");

                entity.Property(e => e.ActVersionDate)
                    .HasColumnType("date")
                    .HasColumnName("act_version_date")
                    .HasComment("Дата версии записи");

                entity.Property(e => e.ActVersionNumber)
                    .HasMaxLength(3)
                    .HasColumnName("act_version_number")
                    .HasComment("Номер версии записи");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес места жительства");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(10)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(500)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country")
                    .HasComment("Гражданство (страна)");

                entity.Property(e => e.DateDocumentMarriage)
                    .HasColumnType("date")
                    .HasColumnName("date_document_marriage")
                    .HasComment("Дата выдачи свидетельства о заключении брака");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(2)
                    .HasColumnName("document_code")
                    .HasComment("Наименование документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("document_date")
                    .HasComment("Дата выдачи документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("document_date_update")
                    .HasComment("Дата составления АГС / Выдачи документа");

                entity.Property(e => e.DocumentIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer")
                    .HasComment("Наименование органа, выдавшего документ, удостоверяющий личность");

                entity.Property(e => e.DocumentIssuerUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer_update")
                    .HasComment("ЗАГС / кем выдан документ");

                entity.Property(e => e.DocumentNameUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_name_update")
                    .HasComment("Наименование АГС/документа");

                entity.Property(e => e.DocumentSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_serial_number")
                    .HasComment("Серия и номер документа, удостоверяющего личность");

                entity.Property(e => e.DocumentSerialNumberUpdate)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number_update")
                    .HasComment("Номер АГС / Серия и номер документа");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО");

                entity.Property(e => e.Gender)
                    .HasMaxLength(3)
                    .HasColumnName("gender")
                    .HasComment("Пол");

                entity.Property(e => e.LastNameOld)
                    .HasMaxLength(60)
                    .HasColumnName("last_name_old")
                    .HasComment("Фамилия до заключения брака");

                entity.Property(e => e.MarriageDate)
                    .HasColumnType("date")
                    .HasColumnName("marriage_date")
                    .HasComment("Дата заключения брака");

                entity.Property(e => e.NationalityCode)
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .HasComment("Национальность (код)");

                entity.Property(e => e.NumberDocumentMarriage)
                    .HasMaxLength(8)
                    .HasColumnName("number_document_marriage")
                    .HasComment("Номер свидетельства о заключении брака");

                entity.Property(e => e.SerialDocumentMarriage)
                    .HasMaxLength(8)
                    .HasColumnName("serial_document_marriage")
                    .HasComment("Серия свидетельства о заключении брака");

                entity.Property(e => e.ZagsCode)
                    .HasMaxLength(8)
                    .HasColumnName("zags_code")
                    .HasComment("Код/Наименование органа ЗАГС");
            });

            modelBuilder.Entity<DataMdmObjectsAttributesUpload>(entity =>
            {
                entity.ToTable("data_mdm_objects_attributes_upload");

                entity.HasComment("Таблица для передачи аттрибутов объектов в МДМ.");

                entity.HasIndex(e => e.DataMdmObjectsUploadId, "fki_data_mdm_objects_attributes_object_fk");

                entity.HasIndex(e => e.SprMdmObjectAttributeId, "fki_mdm_objects_attributes_attribute_type_fk");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataMdmObjectsUploadId)
                    .HasColumnName("data_mdm_objects_upload_id")
                    .HasComment("Идентификатор объекта МДМ, связь с таблицей data_mdm_objects_upload -> id");

                entity.Property(e => e.MdmAttributeValue)
                    .HasMaxLength(150)
                    .HasColumnName("mdm_attribute_value")
                    .HasComment("Значение аттрибута объекта МДМ.");

                entity.Property(e => e.SprMdmObjectAttributeId)
                    .HasColumnName("spr_mdm_object_attribute_id")
                    .HasComment("Идентификатор типа аттрибута объекта МДМ, связь с таблицей spr_mdm_object_attribute -> id");

                entity.HasOne(d => d.DataMdmObjectsUpload)
                    .WithMany(p => p.DataMdmObjectsAttributesUploads)
                    .HasForeignKey(d => d.DataMdmObjectsUploadId)
                    .HasConstraintName("data_mdm_objects_attributes_upl_data_mdm_objects_upload_id_fkey");

                entity.HasOne(d => d.SprMdmObjectAttribute)
                    .WithMany(p => p.DataMdmObjectsAttributesUploads)
                    .HasForeignKey(d => d.SprMdmObjectAttributeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_mdm_objects_attributes_up_spr_mdm_object_attribute_id_fkey");
            });

            modelBuilder.Entity<DataMdmObjectsAttributesUploadV2>(entity =>
            {
                entity.ToTable("data_mdm_objects_attributes_upload_v2");

                entity.HasComment("Таблица для передачи аттрибутов объектов в МДМ.");

                entity.HasIndex(e => e.DataMdmObjectsUploadV2Id, "data_mdm_objects_attributes_u_data_mdm_objects_upload_v2_id_idx");

                entity.HasIndex(e => new { e.MdmAttributeValue, e.DataServicesId }, "data_mdm_objects_attributes_u_mdm_attribute_value_data_serv_idx");

                entity.HasIndex(e => e.SprMdmObjectAttributeV2Id, "data_mdm_objects_attributes_u_spr_mdm_object_attribute_v2_i_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataMdmObjectsUploadV2Id)
                    .HasColumnName("data_mdm_objects_upload_v2_id")
                    .HasComment("Идентификатор объекта МДМ, связь с таблицей data_mdm_objects_upload -> id");

                entity.Property(e => e.DataServicesId).HasColumnName("data_services_id");

                entity.Property(e => e.MdmAttributeValue)
                    .HasMaxLength(150)
                    .HasColumnName("mdm_attribute_value")
                    .HasComment("Значение аттрибута объекта МДМ.");

                entity.Property(e => e.SprMdmObjectAttributeV2Id)
                    .HasColumnName("spr_mdm_object_attribute_v2_id")
                    .HasComment("Идентификатор типа аттрибута объекта МДМ, связь с таблицей spr_mdm_object_attribute -> id");

                entity.HasOne(d => d.DataMdmObjectsUploadV2)
                    .WithMany(p => p.DataMdmObjectsAttributesUploadV2s)
                    .HasForeignKey(d => d.DataMdmObjectsUploadV2Id)
                    .HasConstraintName("data_mdm_objects_attributes_up_data_mdm_objects_upload_id_fkey1");

                entity.HasOne(d => d.SprMdmObjectAttributeV2)
                    .WithMany(p => p.DataMdmObjectsAttributesUploadV2s)
                    .HasForeignKey(d => d.SprMdmObjectAttributeV2Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_mdm_objects_attributes_u_spr_mdm_object_attribute_id_fkey1");
            });

            modelBuilder.Entity<DataMdmObjectsLogUpload>(entity =>
            {
                entity.ToTable("data_mdm_objects_log_upload");

                entity.HasComment("Таблица для хранения логов отправки данных в МДМ");

                entity.HasIndex(e => e.MessageId, "data_mdm_objects_log_upload_message_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.MessageId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор сообщения СМЭВ 3");

                entity.Property(e => e.RequestXml)
                    .IsRequired()
                    .HasColumnName("request_xml")
                    .HasComment("XML запроса");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("XML ответа");
            });

            modelBuilder.Entity<DataMdmObjectsLogUploadV2>(entity =>
            {
                entity.ToTable("data_mdm_objects_log_upload_v2");

                entity.HasComment("Таблица для хранения логов отправки данных в МДМ");

                entity.HasIndex(e => e.MessageId, "data_mdm_objects_log_upload_v2_message_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.MessageId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("Идентификатор сообщения СМЭВ 3");

                entity.Property(e => e.RequestXml)
                    .IsRequired()
                    .HasColumnName("request_xml")
                    .HasComment("XML запроса");

                entity.Property(e => e.ResponseXml)
                    .HasColumnName("response_xml")
                    .HasComment("XML ответа");
            });

            modelBuilder.Entity<DataMdmObjectsUpload>(entity =>
            {
                entity.ToTable("data_mdm_objects_upload");

                entity.HasComment("Таблица для выгрузки данных в МДМ.");

                entity.HasIndex(e => e.CreatedDate, "data_mdm_objects_upload_created_date_idx");

                entity.HasIndex(e => e.ObjectIsSent, "data_mdm_objects_upload_idx1");

                entity.HasIndex(e => e.MessageId, "data_mdm_objects_upload_idx2");

                entity.HasIndex(e => e.SprMdmObjectTypeId, "fki_data_mdm_objects_upload_type_fk");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ, не uuid потому что важен порядок следования объектов.");

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(6)
                    .HasColumnName("created_date")
                    .HasComment("Дата и время создания объекта.");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("ID сообщения СМЭВ 3");

                entity.Property(e => e.ObjectInvalid)
                    .HasColumnName("object_invalid")
                    .HasComment("true, если атрибуты объекты не полные.");

                entity.Property(e => e.ObjectIsSent)
                    .HasColumnName("object_is_sent")
                    .HasComment("Флаг, отправлен ли объект в МДМ.");

                entity.Property(e => e.SentDate)
                    .HasPrecision(6)
                    .HasColumnName("sent_date")
                    .HasComment("Дата и время отправки объекта в МДМ");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("Идентификатор филиала МФЦ.");

                entity.Property(e => e.SprMdmObjectTypeId)
                    .HasColumnName("spr_mdm_object_type_id")
                    .HasComment("Идентификатор типа объекта МДМ, связь с spr_mdm_object_type -> id");

                entity.HasOne(d => d.SprMdmObjectType)
                    .WithMany(p => p.DataMdmObjectsUploads)
                    .HasForeignKey(d => d.SprMdmObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_mdm_objects_upload_spr_mdm_object_type_id_fkey");
            });

            modelBuilder.Entity<DataMdmObjectsUploadV2>(entity =>
            {
                entity.ToTable("data_mdm_objects_upload_v2");

                entity.HasComment("Таблица для выгрузки данных в МДМ.");

                entity.HasIndex(e => e.CreatedDate, "data_mdm_objects_upload_v2_created_date_idx");

                entity.HasIndex(e => e.MessageId, "data_mdm_objects_upload_v2_message_id_idx");

                entity.HasIndex(e => e.ObjectIsSent, "data_mdm_objects_upload_v2_object_is_sent_idx");

                entity.HasIndex(e => e.SprMdmObjectTypeV2Id, "data_mdm_objects_upload_v2_spr_mdm_object_type_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ, не uuid потому что важен порядок следования объектов.");

                entity.Property(e => e.CreatedDate)
                    .HasPrecision(6)
                    .HasColumnName("created_date")
                    .HasComment("Дата и время создания объекта.");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Ссылка на услугу");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("ID сообщения СМЭВ 3");

                entity.Property(e => e.ObjectInvalid)
                    .HasColumnName("object_invalid")
                    .HasComment("true, если атрибуты объекты не полные.");

                entity.Property(e => e.ObjectIsSent)
                    .HasColumnName("object_is_sent")
                    .HasComment("Флаг, отправлен ли объект в МДМ.");

                entity.Property(e => e.SentDate)
                    .HasPrecision(6)
                    .HasColumnName("sent_date")
                    .HasComment("Дата и время отправки объекта в МДМ");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("Идентификатор филиала МФЦ.");

                entity.Property(e => e.SprMdmObjectTypeV2Id)
                    .HasColumnName("spr_mdm_object_type_v2_id")
                    .HasComment("Идентификатор типа объекта МДМ, связь с spr_mdm_object_type -> id");

                entity.HasOne(d => d.SprMdmObjectTypeV2)
                    .WithMany(p => p.DataMdmObjectsUploadV2s)
                    .HasForeignKey(d => d.SprMdmObjectTypeV2Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_mdm_objects_upload_v2_spr_mdm_object_type_id_fkey");
            });

            modelBuilder.Entity<DataNameChangeZag>(entity =>
            {
                entity.ToTable("data_name_change_zags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ActCodeUpdate)
                    .HasMaxLength(4)
                    .HasColumnName("act_code_update")
                    .HasComment("Код/Наименование вида записей ");

                entity.Property(e => e.ActDate)
                    .HasColumnType("date")
                    .HasColumnName("act_date")
                    .HasComment("Дата составления записи акта о смерти");

                entity.Property(e => e.ActDateBirth)
                    .HasColumnType("date")
                    .HasColumnName("act_date_birth")
                    .HasComment("Дата составления записи акта о рождении");

                entity.Property(e => e.ActDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("act_date_update")
                    .HasComment("Дата внесения исправления и изменения в запись акта гражданского состояния или дата внесения отметки  \r\n	о восстановлении или об аннулировании записи акта гражданского состояния");

                entity.Property(e => e.ActNameBirth)
                    .HasMaxLength(100)
                    .HasColumnName("act_name_birth")
                    .HasComment("Наименование типа акта гражданского состояния");

                entity.Property(e => e.ActNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("act_number")
                    .HasComment("Номер записи акта о смерти");

                entity.Property(e => e.ActNumberBirth)
                    .HasMaxLength(22)
                    .HasColumnName("act_number_birth")
                    .HasComment("Номер записи акта о рождении");

                entity.Property(e => e.ActStatus)
                    .HasMaxLength(2)
                    .HasColumnName("act_status")
                    .HasComment("Код статуса");

                entity.Property(e => e.ActStatusDate)
                    .HasColumnType("date")
                    .HasColumnName("act_status_date")
                    .HasComment("Дата начала действия статуса");

                entity.Property(e => e.ActTextUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("act_text_update")
                    .HasComment("Содержание внесенного исправления или изменения");

                entity.Property(e => e.ActVersionDate)
                    .HasColumnType("date")
                    .HasColumnName("act_version_date")
                    .HasComment("Дата версии записи");

                entity.Property(e => e.ActVersionNumber)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("act_version_number")
                    .HasComment("Номер версии записи");

                entity.Property(e => e.ActZagsCodeBirth)
                    .HasMaxLength(8)
                    .HasColumnName("act_zags_code_birth")
                    .HasComment("Код ЗАГС, в котором была произведена регистрация рождения");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес места жительства");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(10)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(500)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country")
                    .HasComment("Гражданство (страна)");

                entity.Property(e => e.DateDocumentNameChange)
                    .HasColumnType("date")
                    .HasColumnName("date_document_name_change")
                    .HasComment("Дата выдачи свидетельства о заключении брака");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(255)
                    .HasColumnName("document_code")
                    .HasComment("Наименование документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("document_date")
                    .HasComment("Дата выдачи документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("document_date_update")
                    .HasComment("Дата составления АГС / Выдачи документа");

                entity.Property(e => e.DocumentIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer")
                    .HasComment("Наименование органа, выдавшего документ, удостоверяющий личность");

                entity.Property(e => e.DocumentIssuerUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer_update")
                    .HasComment("ЗАГС / кем выдан документ");

                entity.Property(e => e.DocumentNameUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_name_update")
                    .HasComment("Наименование АГС/документа");

                entity.Property(e => e.DocumentSerialNumber)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number")
                    .HasComment("Серия и номер документа, удостоверяющего личность");

                entity.Property(e => e.DocumentSerialNumberUpdate)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number_update")
                    .HasComment("Номер АГС / Серия и номер документа");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО");

                entity.Property(e => e.FioOld)
                    .HasMaxLength(255)
                    .HasColumnName("fio_old")
                    .HasComment("ФИО до перемены имени");

                entity.Property(e => e.NationalityCode)
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .HasComment("Национальность (код)");

                entity.Property(e => e.NumberDocumentNameChange)
                    .HasMaxLength(8)
                    .HasColumnName("number_document_name_change")
                    .HasComment("Номер свидетельства о заключении брака");

                entity.Property(e => e.SerialDocumentNameChange)
                    .HasMaxLength(8)
                    .HasColumnName("serial_document_name_change")
                    .HasComment("Серия свидетельства о заключении брака");

                entity.Property(e => e.ZagsCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("zags_code")
                    .HasComment("Код/Наименование органа ЗАГС");
            });

            modelBuilder.Entity<DataNews>(entity =>
            {
                entity.ToTable("data_news");

                entity.HasComment("Таблица новостей");

                entity.HasIndex(e => e.Id, "data_news_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsDate, e.SprEmployeesId }, "data_news_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_news_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("employees_fio")
                    .HasComment("кто написал фамилия");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.NewsDate)
                    .HasColumnName("news_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время новости");

                entity.Property(e => e.NewsText)
                    .IsRequired()
                    .HasColumnName("news_text")
                    .HasComment("текст новости");

                entity.Property(e => e.NewsTheme)
                    .HasMaxLength(255)
                    .HasColumnName("news_theme")
                    .HasComment("тема");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником , spr_employees id");
            });

            modelBuilder.Entity<DataNewsFile>(entity =>
            {
                entity.ToTable("data_news_file");

                entity.HasComment("Вложения к новостям");

                entity.HasIndex(e => e.Id, "data_news_file_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataNewsId, "data_news_file_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataNewsId)
                    .HasColumnName("data_news_id")
                    .HasComment("связь с новостью , data_news id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время добавления файла");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто добавил файл");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("расширение файла");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("file_name")
                    .HasComment("наименование файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("размер файла");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.HasOne(d => d.DataNews)
                    .WithMany(p => p.DataNewsFiles)
                    .HasForeignKey(d => d.DataNewsId)
                    .HasConstraintName("data_news_file_data_news_id_fkey");
            });

            modelBuilder.Entity<DataNewsRecipient>(entity =>
            {
                entity.ToTable("data_news_recipient");

                entity.HasComment("Получатели новостей");

                entity.HasIndex(e => e.Id, "data_news_recipient_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataNewsId, e.SprEmployeesMfcId }, "data_news_recipient_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_news_recipient_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataNewsId)
                    .HasColumnName("data_news_id")
                    .HasComment("связь с новостью data_news id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц , кому предназначена новость spr_employees_mfc id");

                entity.HasOne(d => d.DataNews)
                    .WithMany(p => p.DataNewsRecipients)
                    .HasForeignKey(d => d.DataNewsId)
                    .HasConstraintName("data_news_recipient_data_news_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataNewsRecipients)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_news_recipient_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataNewsView>(entity =>
            {
                entity.ToTable("data_news_view");

                entity.HasComment("Список просмотров к новости");

                entity.HasIndex(e => e.Id, "data_news_view_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataNewsId, e.SprEmployeesId }, "data_news_view_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DataNewsId }, "data_news_view_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataNewsId)
                    .HasColumnName("data_news_id")
                    .HasComment("новость, связь с data_news id");

                entity.Property(e => e.DateView)
                    .HasColumnName("date_view")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время прсомотра");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_emloyees id");

                entity.HasOne(d => d.DataNews)
                    .WithMany(p => p.DataNewsViews)
                    .HasForeignKey(d => d.DataNewsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_news_view_data_news_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataNewsViews)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_news_view_spr_emloyees_id_fkey");
            });

            modelBuilder.Entity<DataPaternityZag>(entity =>
            {
                entity.ToTable("data_paternity_zags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ActCodeUpdate)
                    .HasMaxLength(4)
                    .HasColumnName("act_code_update")
                    .HasComment("Код/Наименование вида записей ");

                entity.Property(e => e.ActDate)
                    .HasColumnType("date")
                    .HasColumnName("act_date")
                    .HasComment("Дата составления записи акта о рождении");

                entity.Property(e => e.ActDateBirth)
                    .HasColumnType("date")
                    .HasColumnName("act_date_birth")
                    .HasComment("Дата составления записи акта о рождении");

                entity.Property(e => e.ActDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("act_date_update")
                    .HasComment("Дата внесения исправления и изменения в запись акта гражданского состояния или дата внесения отметки  \r\n	о восстановлении или об аннулировании записи акта гражданского состояния");

                entity.Property(e => e.ActNameBirth)
                    .HasMaxLength(100)
                    .HasColumnName("act_name_birth")
                    .HasComment("Наименование типа акта гражданского состояния");

                entity.Property(e => e.ActNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("act_number")
                    .HasComment("Номер записи акта о рождении");

                entity.Property(e => e.ActNumberBirth)
                    .HasMaxLength(22)
                    .HasColumnName("act_number_birth")
                    .HasComment("Номер записи акта о рождении");

                entity.Property(e => e.ActStatus)
                    .HasMaxLength(2)
                    .HasColumnName("act_status")
                    .HasComment("Код статуса");

                entity.Property(e => e.ActStatusDate)
                    .HasColumnType("date")
                    .HasColumnName("act_status_date")
                    .HasComment("Дата начала действия статуса");

                entity.Property(e => e.ActTextUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("act_text_update")
                    .HasComment("Содержание внесенного исправления или изменения");

                entity.Property(e => e.ActVersionDate)
                    .HasColumnType("date")
                    .HasColumnName("act_version_date")
                    .HasComment("Дата версии записи");

                entity.Property(e => e.ActVersionNumber)
                    .HasMaxLength(3)
                    .HasColumnName("act_version_number")
                    .HasComment("Номер версии записи");

                entity.Property(e => e.ActZagsCodeBirth)
                    .HasMaxLength(8)
                    .HasColumnName("act_zags_code_birth")
                    .HasComment("Код ЗАГС, в котором была произведена регистрация рождения");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес места жительства");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(10)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(500)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .HasColumnName("country")
                    .HasComment("Гражданство (страна)");

                entity.Property(e => e.DateDocumentPaternity)
                    .HasColumnType("date")
                    .HasColumnName("date_document_paternity")
                    .HasComment("Дата выдачи свидетельства об установлении отцовства");

                entity.Property(e => e.DocumentBasicCode)
                    .HasMaxLength(5)
                    .HasColumnName("document_basic_code")
                    .HasComment("Код вида документа, являющегося основанием для установления отцовства");

                entity.Property(e => e.DocumentBasicDate)
                    .HasColumnType("date")
                    .HasColumnName("document_basic_date")
                    .HasComment("Дата выдачи документа, являющегося основанием для установления отцовства");

                entity.Property(e => e.DocumentBasicIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_basic_issuer")
                    .HasComment("Кем выдан документ, являющийся основанием для установления отцовства");

                entity.Property(e => e.DocumentBasicSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_basic_serial_number")
                    .HasComment("Серия и номер документа, являющегося основанием для установления отцовства");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(2)
                    .HasColumnName("document_code")
                    .HasComment("Наименование документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("document_date")
                    .HasComment("Дата выдачи документа, удостоверяющего личность");

                entity.Property(e => e.DocumentDateUpdate)
                    .HasColumnType("date")
                    .HasColumnName("document_date_update")
                    .HasComment("Дата составления АГС / Выдачи документа");

                entity.Property(e => e.DocumentIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer")
                    .HasComment("Наименование органа, выдавшего документ, удостоверяющий личность");

                entity.Property(e => e.DocumentIssuerUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issuer_update")
                    .HasComment("ЗАГС / кем выдан документ");

                entity.Property(e => e.DocumentNameUpdate)
                    .HasMaxLength(255)
                    .HasColumnName("document_name_update")
                    .HasComment("Наименование АГС/документа");

                entity.Property(e => e.DocumentSerialNumber)
                    .HasMaxLength(25)
                    .HasColumnName("document_serial_number")
                    .HasComment("Серия и номер документа, удостоверяющего личность");

                entity.Property(e => e.DocumentSerialNumberUpdate)
                    .HasMaxLength(20)
                    .HasColumnName("document_serial_number_update")
                    .HasComment("Номер АГС / Серия и номер документа");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("ФИО");

                entity.Property(e => e.FioOld)
                    .HasMaxLength(255)
                    .HasColumnName("fio_old")
                    .HasComment("ФИО ребенка до установления отцовства");

                entity.Property(e => e.Gender)
                    .HasMaxLength(3)
                    .HasColumnName("gender")
                    .HasComment("Пол");

                entity.Property(e => e.NationalityCode)
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .HasComment("Национальность (код)");

                entity.Property(e => e.NumberDocumentPaternity)
                    .HasMaxLength(8)
                    .HasColumnName("number_document_paternity")
                    .HasComment("Номер свидетельства об установлении отцовства");

                entity.Property(e => e.SerialDocumentPaternity)
                    .HasMaxLength(8)
                    .HasColumnName("serial_document_paternity")
                    .HasComment("Серия свидетельства об установлении отцовства");

                entity.Property(e => e.ZagsCode)
                    .HasMaxLength(8)
                    .HasColumnName("zags_code")
                    .HasComment("Код/Наименование органа ЗАГС");
            });

            modelBuilder.Entity<DataPersonalAccount>(entity =>
            {
                entity.ToTable("data_personal_account");

                entity.HasComment("Данные личного кабинета заявителя");

                entity.HasIndex(e => e.CustomerTel, "data_personal_account_customer_tel_key")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "data_personal_account_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.CustomerSnils, "data_personal_account_idx2");

                entity.HasIndex(e => e.CustomerFio, "data_personal_account_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("электронная почта");

                entity.Property(e => e.CustomerFio)
                    .HasMaxLength(255)
                    .HasColumnName("customer_fio")
                    .HasComment("ФИО");

                entity.Property(e => e.CustomerInn)
                    .HasMaxLength(255)
                    .HasColumnName("customer_inn")
                    .HasComment("Инн");

                entity.Property(e => e.CustomerSex)
                    .HasMaxLength(6)
                    .HasColumnName("customer_sex")
                    .HasComment("Пол");

                entity.Property(e => e.CustomerSnils)
                    .HasMaxLength(255)
                    .HasColumnName("customer_snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.CustomerTel)
                    .HasMaxLength(255)
                    .HasColumnName("customer_tel")
                    .HasComment("Номер телефона");

                entity.Property(e => e.DocBirthDate)
                    .HasColumnType("date")
                    .HasColumnName("doc_birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.DocBirthPlace)
                    .HasMaxLength(255)
                    .HasColumnName("doc_birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.DocCode)
                    .HasMaxLength(30)
                    .HasColumnName("doc_code")
                    .HasComment("код документа");

                entity.Property(e => e.DocIssueBody)
                    .HasMaxLength(255)
                    .HasColumnName("doc_issue_body")
                    .HasComment("Место выдачи");

                entity.Property(e => e.DocIssueDate)
                    .HasColumnType("date")
                    .HasColumnName("doc_issue_date")
                    .HasComment("дата выдачи");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(20)
                    .HasColumnName("doc_number")
                    .HasComment("номер документа");

                entity.Property(e => e.DocSerial)
                    .HasMaxLength(10)
                    .HasColumnName("doc_serial")
                    .HasComment("серия документа");
            });

            modelBuilder.Entity<DataPollRegionSm>(entity =>
            {
                entity.ToTable("data_poll_region_sms");

                entity.HasComment("Данные СМС опраса МФЦ");

                entity.HasIndex(e => e.Id, "data_poll_region_sms_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SmsRating }, "data_poll_region_sms_idx2");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_poll_region_sms_idx3");

                entity.HasIndex(e => e.SprEmployeesId, "data_poll_region_sms_idx4");

                entity.HasIndex(e => e.Id, "data_sms_poll_unq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("заявитель");

                entity.Property(e => e.CustomerTel)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DateAnswer)
                    .HasColumnName("date_answer")
                    .HasComment("дата получения ответа");

                entity.Property(e => e.DateSend)
                    .HasColumnName("date_send")
                    .HasComment("дата отправки смс");

                entity.Property(e => e.EmployeeFio)
                    .HasColumnName("employee_fio")
                    .HasComment("сотрудник");

                entity.Property(e => e.ServiceSubName)
                    .HasColumnName("service_sub_name")
                    .HasComment("название услуги");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SmsRating)
                    .HasColumnName("sms_rating")
                    .HasComment("оценка из смс");

                entity.Property(e => e.SmsStatus)
                    .HasColumnName("sms_status")
                    .HasDefaultValueSql("1")
                    .HasComment("статус отправки\r\n1 ожидание отправки\r\n2 отправленно\r\n3 принят ответ\r\n4 ошибка");

                entity.Property(e => e.SmsTextAnswer)
                    .HasMaxLength(100)
                    .HasColumnName("sms_text_answer")
                    .HasComment("текст полученного смс");

                entity.Property(e => e.SmsTextSend)
                    .HasMaxLength(100)
                    .HasColumnName("sms_text_send")
                    .HasDefaultValueSql("'МФЦ РД. Просим оценить работу оператора от 1 до 5.'::character varying")
                    .HasComment("текст отправленного смс");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("id мфц, связь с spr_employees_mfc id");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataPollRegionSms)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_poll_region_sms_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataPollRegionSms)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_poll_region_sms_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataPollRegionSms)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_poll_region_sms_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataPremiumFine>(entity =>
            {
                entity.ToTable("data_premium_fine");

                entity.HasComment("Штрафы по сотрудникам текущие");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateFine, e.SprServicesSubId, e.SprRoutesStageId, e.SprEmployeesJobPosId }, "data_premium_fine_dx2");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprServicesSubId, e.SprRoutesStageId, e.SprEmployeesId, e.SprEmployeesJobPosId }, "data_premium_fine_dx4");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_premium_fine_dx5");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_premium_fine_dx6");

                entity.HasIndex(e => e.SprServicesSubId, "data_premium_fine_dx7");

                entity.HasIndex(e => e.SprRoutesStageId, "data_premium_fine_dx8");

                entity.HasIndex(e => e.Id, "data_premium_fine_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DateFine, e.SprEmployeesMfcId, e.SprEmployeesJobPosId }, "data_premium_fine_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttDel)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_del")
                    .HasComment("комментарий при удалении записи");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DateDel)
                    .HasColumnName("date_del")
                    .HasComment("дата и время удаления");

                entity.Property(e => e.DateFine)
                    .HasColumnType("date")
                    .HasColumnName("date_fine")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFioDel)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_del")
                    .HasComment("кто удалил запись");

                entity.Property(e => e.FinePercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_percent")
                    .HasComment("дни штрафа");

                entity.Property(e => e.FineSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_sum")
                    .HasComment("сумма штрафа");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником , spr_employees  id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц , spr_employees_mfc id");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("связь с этапом, spr_routes_stage id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataPremiumFines)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_fine_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataPremiumFines)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_fine_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataPremiumFines)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_fine_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.DataPremiumFines)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_fine_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.DataPremiumFines)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_fine_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<DataPremiumStep>(entity =>
            {
                entity.ToTable("data_premium_step");

                entity.HasComment("Действия совершенные сотрудниками");

                entity.HasIndex(e => e.Id, "data_premium_step_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesId, "data_premium_step_idx10");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprServicesSubId, e.DateStep, e.StepId, e.StepPremium }, "data_premium_step_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateStep, e.SprEmployeesJobPosId }, "data_premium_step_idx3");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateStep }, "data_premium_step_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateStep, e.StepPremium, e.SprServicesSubId }, "data_premium_step_idx5");

                entity.HasIndex(e => e.DateStep, "data_premium_step_idx6");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesId, e.SprEmployeesJobPosId, e.SprServicesSubId, e.DateStep }, "data_premium_step_idx7");

                entity.HasIndex(e => e.SprServicesSubId, "data_premium_step_idx8");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_premium_step_idx9");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("услуга");

                entity.Property(e => e.DataServicesInfoId)
                    .HasColumnType("character varying")
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела , связь с data_services_info id");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStep)
                    .HasColumnType("date")
                    .HasColumnName("date_step")
                    .HasComment("дата действия");

                entity.Property(e => e.R).HasColumnName("r_");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью ,spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц сотрудника , связь с  spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("действие в таблице spr_services_sub_premium в описании прописаны какие id");

                entity.Property(e => e.StepPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("step_premium")
                    .HasComment("сумма за совершенные действия");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataPremiumSteps)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_step_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataPremiumSteps)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_premium_step_spr_employees_job_pos_id_fkey");
            });

            modelBuilder.Entity<DataQueueAvgTime>(entity =>
            {
                entity.ToTable("data_queue_avg_time");

                entity.HasComment("Среднее время ожидание в очереди ");

                entity.HasIndex(e => e.Id, "data_queue_avg_time_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateRegistration }, "data_queue_avg_time_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AvgTime)
                    .HasPrecision(15, 2)
                    .HasColumnName("avg_time")
                    .HasComment("среднее время");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateRegistration)
                    .HasColumnType("date")
                    .HasColumnName("date_registration")
                    .HasComment("дата регистрации значения");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата занесения записи");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц,spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataQueueAvgTimes)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_queue_avg_time_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataRatingExecutedEmployee>(entity =>
            {
                entity.ToTable("data_rating_executed_employees");

                entity.HasComment(" Рейтинг по исполненным услугам в разрезе сотрудников для отображения на главном окне");

                entity.HasIndex(e => e.Id, "data_rating_executed_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "data_rating_executed_employees_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность");

                entity.Property(e => e.EmployeesLogin)
                    .HasMaxLength(100)
                    .HasColumnName("employees_login")
                    .HasComment("логин сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.Position)
                    .HasColumnName("position_")
                    .HasComment("позиция");

                entity.Property(e => e.PositionMoving)
                    .HasColumnName("position_moving")
                    .HasComment("перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.Rating)
                    .HasColumnName("rating_")
                    .HasComment("рейтинг");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник , связь с spr_employees id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataRatingExecutedEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_rating_executed_employees_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataRatingExecutedEmployeesMfc>(entity =>
            {
                entity.ToTable("data_rating_executed_employees_mfc");

                entity.HasComment(" Рейтинг по исполненным услугам в разрезе мфц для отображения на главном окне");

                entity.HasIndex(e => e.Id, "data_rating_executed_employees_mfc_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_rating_executed_employees_mfc_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.Position)
                    .HasColumnName("position_")
                    .HasComment("позиция");

                entity.Property(e => e.PositionMoving)
                    .HasColumnName("position_moving")
                    .HasComment("перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.Rating)
                    .HasColumnName("rating_")
                    .HasComment("рейтинг");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataRatingExecutedEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_rating_executed_employees_mfc_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataRatingReceivedEmployee>(entity =>
            {
                entity.ToTable("data_rating_received_employees");

                entity.HasComment(" Рейтинг по принятым услугам в разрезе сотрудников для отображения на главном окне");

                entity.HasIndex(e => e.Id, "data_rating_received_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "data_rating_received_employees_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность");

                entity.Property(e => e.EmployeesLogin)
                    .HasMaxLength(100)
                    .HasColumnName("employees_login")
                    .HasComment("логин сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.Position)
                    .HasColumnName("position_")
                    .HasComment("позиция");

                entity.Property(e => e.PositionMoving)
                    .HasColumnName("position_moving")
                    .HasComment("перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.Rating)
                    .HasColumnName("rating_")
                    .HasComment("рейтинг");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник , связь с spr_employees id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataRatingReceivedEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_rating_received_employees_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataRatingReceivedEmployeesMfc>(entity =>
            {
                entity.ToTable("data_rating_received_employees_mfc");

                entity.HasComment(" Рейтинг по принятым услугам в разрезе мфц для отображения на главном окне");

                entity.HasIndex(e => e.Id, "data_rating_received_employees_mfc_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_rating_received_employees_mfc_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.Position)
                    .HasColumnName("position_")
                    .HasComment("позиция");

                entity.Property(e => e.PositionMoving)
                    .HasColumnName("position_moving")
                    .HasComment("перемещение по позиции -1 вниз 0 на месте 1 вверх");

                entity.Property(e => e.Rating)
                    .HasColumnName("rating_")
                    .HasComment("рейтинг");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataRatingReceivedEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_rating_received_employees_mfc_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataRatingTable>(entity =>
            {
                entity.ToTable("data_rating_table");

                entity.HasComment("Журнал оценок через планшет");

                entity.HasIndex(e => e.Id, "data_rating_table_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesInfoId, "data_rating_table_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Comment)
                    .HasMaxLength(300)
                    .HasColumnName("comment")
                    .HasComment("комментарий");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(30)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела");

                entity.Property(e => e.DateTimeInsert)
                    .HasColumnName("date_time_insert")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время оценки");

                entity.Property(e => e.EmployeesFio)
                    .HasColumnType("character varying")
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasComment("оценка");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.SourceRating)
                    .HasColumnName("source_rating")
                    .HasDefaultValueSql("1")
                    .HasComment("1-планшет 2-мобильное приложение Андроид 3-IOS");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц, связь с spr_employees_mfc id");
            });

            modelBuilder.Entity<DataReestr>(entity =>
            {
                entity.ToTable("data_reestr");

                entity.HasIndex(e => e.Id, "data_reestr_id_idx");

                entity.HasIndex(e => e.Id, "data_reestr_id_key")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateCreate)
                    .HasPrecision(0)
                    .HasColumnName("date_create")
                    .HasComment("Дата и время создания реестра");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника сформировавшего реестр");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(255)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность сотрудника сформировавшего реестр");

                entity.Property(e => e.ReestrNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("reestr_number")
                    .HasComment("Номер реестра");

                entity.Property(e => e.ServicesCount)
                    .HasColumnName("services_count")
                    .HasComment("Количество услуг в реестре");

                entity.Property(e => e.SprEmployeeId)
                    .HasColumnName("spr_employee_id")
                    .HasComment("id сотруднкиа сформировавшего реестр");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("id мфц");

                entity.Property(e => e.SprEmployeesMfcName)
                    .HasMaxLength(255)
                    .HasColumnName("spr_employees_mfc_name")
                    .HasComment("название МФЦ");
            });

            modelBuilder.Entity<DataReportCall>(entity =>
            {
                entity.ToTable("data_report_call");

                entity.HasComment("Таблица для хранения данных по звонкам");

                entity.HasIndex(e => e.Id, "data_report_call_id1")
                    .IsUnique();

                entity.HasIndex(e => e.Date, "data_report_call_id2");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId }, "data_report_call_id3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_call_id4");

                entity.HasIndex(e => e.SprEmployeesId, "data_report_call_id5");

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_call_id6");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_call_id7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountCall)
                    .HasColumnName("count_call")
                    .HasComment("фактическое количество звонков");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наимеование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("наименование органа власти");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("орган власти связь с spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("услуга , связь с spr_services_sub id");
            });

            modelBuilder.Entity<DataReportCommentt>(entity =>
            {
                entity.ToTable("data_report_commentt");

                entity.HasComment("Таблица для хранения данных по примечаниям");

                entity.HasIndex(e => e.Id, "data_report_commentt_id1");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId }, "data_report_commentt_id2");

                entity.HasIndex(e => e.Date, "data_report_commentt_id3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_commentt_id4");

                entity.HasIndex(e => e.SprEmployeesId, "data_report_commentt_id5");

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_commentt_id6");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_commentt_id7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountCommentt)
                    .HasColumnName("count_commentt")
                    .HasComment("фактическое количество написанных примечаний");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наимеование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("наименование органа власти");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("орган власти связь с spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("услуга , связь с spr_services_sub id");
            });

            modelBuilder.Entity<DataReportExecuted>(entity =>
            {
                entity.ToTable("data_report_executed");

                entity.HasComment("Таблица для хранения данных по выполненым");

                entity.HasIndex(e => e.Id, "data_report_executed_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_executed_idx10");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_executed_idx11");

                entity.HasIndex(e => new { e.Date, e.SprEmployeesMfcId }, "data_report_executed_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubStatusId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_executed_idx3");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprServicesProviderId, e.SprServicesSubId, e.SprServicesSubStatusId, e.Date }, "data_report_executed_idx4");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId, e.SprServicesSubStatusId, e.Date }, "data_report_executed_idx5");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId, e.SprServicesSubStatusId }, "data_report_executed_idx6");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.Date, e.SprServicesSubId, e.SprEmployeesJobPosId, e.SprServicesSubStatusId }, "data_report_executed_idx7");

                entity.HasIndex(e => new { e.Date, e.SprEmployeesJobPosId }, "data_report_executed_idx8");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Count)
                    .HasColumnName("count_")
                    .HasComment("количество ");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата исполнения");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность того к принял услугу");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.PriceState)
                    .HasPrecision(15, 2)
                    .HasColumnName("price_state")
                    .HasComment("стоимсть услуги");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("наименование поставщика");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника , связь с spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой spr_services_sub id");

                entity.Property(e => e.SprServicesSubStatusId)
                    .HasColumnName("spr_services_sub_status_id")
                    .HasComment("связь с статусом spr_services_sub_status id");

                entity.Property(e => e.SprServicesSubTariffTypeId)
                    .HasColumnName("spr_services_sub_tariff_type_id")
                    .HasComment("тип тариффа связь с spr_services_sub_tariff_type id");

                entity.Property(e => e.SprServicesSubTrId)
                    .HasColumnName("spr_services_sub_tr_id")
                    .HasComment("тип получателя, spr_services_type_recipient id");

                entity.Property(e => e.TariffMfc)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_mfc")
                    .HasComment("Тариф для МФЦ");

                entity.Property(e => e.TariffState)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_state")
                    .HasComment("тариф услуги");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportExecuteds)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_executed_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportExecuteds)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_executed_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.DataReportExecuteds)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_executed_spr_services_provider_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.DataReportExecuteds)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_executed_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubStatus)
                    .WithMany(p => p.DataReportExecuteds)
                    .HasForeignKey(d => d.SprServicesSubStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_executed_spr_services_sub_status_id_fkey");
            });

            modelBuilder.Entity<DataReportIasMkguConsent>(entity =>
            {
                entity.ToTable("data_report_ias_mkgu_consent");

                entity.HasComment("Таблица для хранения данных по ИАС МКГУ по согласиям");

                entity.HasIndex(e => e.Id, "data_report_ias_mkgu_consent_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf, e.TypeConsent }, "data_report_ias_mkgu_consent_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf, e.TypeConsent }, "data_report_ias_mkgu_consent_idx3");

                entity.HasIndex(e => e.Date, "data_report_ias_mkgu_consent_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountConsent)
                    .HasColumnName("count_consent")
                    .HasComment("количество согласий ");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.Property(e => e.TypeConsent)
                    .HasColumnName("type_consent")
                    .HasComment("0 - отказ ,1 - СМС, 2 - инфомат");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportIasMkguConsents)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_consent_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportIasMkguConsents)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_consent_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataReportIasMkguInfomat>(entity =>
            {
                entity.ToTable("data_report_ias_mkgu_infomat");

                entity.HasComment("Таблица для хранения данных по ИАС МКГУ по анкетам");

                entity.HasIndex(e => e.Id, "data_report_ias_mkgu_infomat_dx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_ias_mkgu_infomat_dx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_ias_mkgu_infomat_dx3");

                entity.HasIndex(e => e.Date, "data_report_ias_mkgu_infomat_dx4");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId }, "data_report_ias_mkgu_infomat_dx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountInfomat)
                    .HasColumnName("count_infomat")
                    .HasComment("количество фактических анкет");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportIasMkguInfomats)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_infomat_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportIasMkguInfomats)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_infomat_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataReportIasMkguService>(entity =>
            {
                entity.ToTable("data_report_ias_mkgu_services");

                entity.HasComment("Таблица для хранения данных по ИАС МКГУ количество  услуг");

                entity.HasIndex(e => e.Id, "data_report_ias_mkgu_services_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_ias_mkgu_services_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_ias_mkgu_services_idx3");

                entity.HasIndex(e => e.Date, "data_report_ias_mkgu_services_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountExecuted)
                    .HasColumnName("count_executed")
                    .HasComment("количество исполненных услуг");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportIasMkguServices)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_services_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportIasMkguServices)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_services_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataReportIasMkguSm>(entity =>
            {
                entity.ToTable("data_report_ias_mkgu_sms");

                entity.HasComment("Таблица для хранения данных по ИАС МКГУ  по отправленным СМС");

                entity.HasIndex(e => e.Id, "data_report_ias_mkgu_sms_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_ias_mkgu_sms_isx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_ias_mkgu_sms_isx3");

                entity.HasIndex(e => e.Date, "data_report_ias_mkgu_sms_isx4");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId }, "data_report_ias_mkgu_sms_isx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountSms)
                    .HasColumnName("count_sms")
                    .HasComment("фактическое количество отправленных на смс");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportIasMkguSms)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_sms_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportIasMkguSms)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_ias_mkgu_sms_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataReportMessage>(entity =>
            {
                entity.ToTable("data_report_message");

                entity.HasComment("Таблица для хранения данных по отправленным СМС");

                entity.HasIndex(e => e.Id, "data_report_message_id1")
                    .IsUnique();

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId }, "data_report_message_id2");

                entity.HasIndex(e => e.Date, "data_report_message_id3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_message_id4");

                entity.HasIndex(e => e.SprEmployeesId, "data_report_message_id5");

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_message_id6");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_message_id7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountMessage)
                    .HasColumnName("count_message")
                    .HasComment("фактическое количество отправленных смс");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наимеование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("наименование органа власти");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("орган власти связь с spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("услуга , связь с spr_services_sub id");
            });

            modelBuilder.Entity<DataReportOverdueRoutesStage>(entity =>
            {
                entity.ToTable("data_report_overdue_routes_stage");

                entity.HasComment("Данные по просроченным этапам");

                entity.HasIndex(e => e.Id, "data_report_overdue_routes_stage_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.Date, "data_report_overdue_routes_stage_idx2");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId, e.SprRoutesStageId }, "data_report_overdue_routes_stage_idx3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_overdue_routes_stage_idx4");

                entity.HasIndex(e => e.SprEmployeesId, "data_report_overdue_routes_stage_idx5");

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_overdue_routes_stage_idx6");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_overdue_routes_stage_idx7");

                entity.HasIndex(e => e.SprRoutesStageId, "data_report_overdue_routes_stage_idx8");

                entity.HasIndex(e => e.PeriodMonth, "data_report_overdue_routes_stage_period_month_idx");

                entity.HasIndex(e => e.PeriodYear, "data_report_overdue_routes_stage_period_year_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountDay)
                    .HasColumnName("count_day")
                    .HasComment("насколько дней в общем просрочено");

                entity.Property(e => e.CountOverdue)
                    .HasColumnName("count_overdue")
                    .HasComment("количество просроченных этапов");

                entity.Property(e => e.CountRoutesStage)
                    .HasColumnName("count_routes_stage")
                    .HasComment("общее количество этапов");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.PercentOverdue)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_overdue")
                    .HasComment("Процент просрочки");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("наименование оив");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("связь с этапом, spr_routes_stage id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком, spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой , spr_services_sub id");

                entity.Property(e => e.StageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("stage_name")
                    .HasComment("наименование этапа");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportOverdueRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_overdue_routes_stage_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportOverdueRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_overdue_routes_stage_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.DataReportOverdueRoutesStages)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_overdue_routes_stage_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.DataReportOverdueRoutesStages)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_overdue_routes_stage_spr_services_provider_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.DataReportOverdueRoutesStages)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_overdue_routes_stage_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<DataReportReceived>(entity =>
            {
                entity.ToTable("data_report_received");

                entity.HasComment("Данные  о принятых услугах , для отчетов");

                entity.HasIndex(e => e.Id, "data_report_received_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_received_idx10");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_received_idx11");

                entity.HasIndex(e => e.Date, "data_report_received_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf }, "data_report_received_idx3");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.PeriodQuarter, e.PeriodYearHalf, e.SprEmployeesMfcId, e.SprEmployeesId }, "data_report_received_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprServicesProviderId, e.SprServicesSubId, e.Date }, "data_report_received_idx5");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId, e.Date }, "data_report_received_idx6");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId, e.SprServicesSubTariffTypeId }, "data_report_received_idx7");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.Date, e.SprServicesSubId, e.SprEmployeesJobPosId }, "data_report_received_idx8");

                entity.HasIndex(e => new { e.Date, e.SprEmployeesJobPosId }, "data_report_received_idx9");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Count)
                    .HasColumnName("count_")
                    .HasComment("количество ");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата приема");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность того к принял услугу");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.PriceState)
                    .HasPrecision(15, 2)
                    .HasColumnName("price_state")
                    .HasComment("стоимость услуг");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("Наименование поставщика");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника, связь с spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком, spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.Property(e => e.SprServicesSubTariffTypeId)
                    .HasColumnName("spr_services_sub_tariff_type_id")
                    .HasComment("тип тарифа связь с spr_services_sub_tariff_type id");

                entity.Property(e => e.SprServicesSubTrId)
                    .HasColumnName("spr_services_sub_tr_id")
                    .HasComment("тип получателя, spr_services_type_recipient id");

                entity.Property(e => e.TariffMfc)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_mfc")
                    .HasComment("Тариф для МФЦ");

                entity.Property(e => e.TariffState)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_state")
                    .HasComment("тариф услуги");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportReceiveds)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_received_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportReceiveds)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_received_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.DataReportReceiveds)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_received_spr_services_provider_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.DataReportReceiveds)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_received_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<DataReportRegionSm>(entity =>
            {
                entity.ToTable("data_report_region_sms");

                entity.HasComment("Таблица для хранения данных по отправленным СМС опросам");

                entity.HasIndex(e => e.Id, "data_report_region_sms_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesProviderId, e.SprServicesSubId }, "data_report_region_sms_isx2");

                entity.HasIndex(e => e.Date, "data_report_region_sms_isx3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_region_sms_isx4");

                entity.HasIndex(e => e.SprEmployeesId, "data_report_region_sms_isx5");

                entity.HasIndex(e => e.SprServicesProviderId, "data_report_region_sms_isx6");

                entity.HasIndex(e => e.SprServicesSubId, "data_report_region_sms_isx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AvgRating)
                    .HasPrecision(15, 2)
                    .HasColumnName("avg_rating")
                    .HasComment("средняя оценка");

                entity.Property(e => e.CountSms)
                    .HasColumnName("count_sms")
                    .HasComment("фактическое количество отправленных на смс");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника ");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наимеование услуги");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("service_provider_name")
                    .HasComment("наименование органа власти");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("орган власти связь с spr_services_provider id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("услуга , связь с spr_services_sub id");
            });

            modelBuilder.Entity<DataReportSmev>(entity =>
            {
                entity.ToTable("data_report_smev");

                entity.HasComment("Таблица для хранения данных по отправленным запросам СМЭВ");

                entity.HasIndex(e => e.Id, "data_report_smev_id1");

                entity.HasIndex(e => new { e.PeriodYear, e.PeriodMonth, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprSmevId }, "data_report_smev_id2");

                entity.HasIndex(e => e.Date, "data_report_smev_id3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_smev_id4");

                entity.HasIndex(e => e.SprEmployeesId, "data_report_smev_id5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountSmev)
                    .HasColumnName("count_smev")
                    .HasComment("фактическое количество отправленных запросов СМЭВ");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.SmevName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("smev_name")
                    .HasComment("наименование запроса");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("сотрудник, связь с spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц , связь с spr_employees_mfc id");

                entity.Property(e => e.SprSmevId)
                    .HasColumnName("spr_smev_id")
                    .HasComment("орган власти связь с spr_services_provider id");
            });

            modelBuilder.Entity<DataReportSmevStatistic>(entity =>
            {
                entity.ToTable("data_report_smev_statistic");

                entity.HasComment("Статистика по смев запросам\r\n31.07.2019 Балахаев\r\n-- Добавил индекс 6. 17.10.2019 Балахаев");

                entity.HasIndex(e => e.Id, "data_report_smev_statistic_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_smev_statistic_idx2");

                entity.HasIndex(e => e.Status, "data_report_smev_statistic_idx3");

                entity.HasIndex(e => e.SprSmevRequestId, "data_report_smev_statistic_idx4");

                entity.HasIndex(e => e.Date, "data_report_smev_statistic_idx5");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.Date, e.Status }, "data_report_smev_statistic_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Count)
                    .HasColumnName("count_")
                    .HasComment("Количество");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("Дата добавления рейтинга");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(255)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("МФЦ");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnName("period_month")
                    .HasComment("месяц");

                entity.Property(e => e.PeriodQuarter)
                    .HasColumnName("period_quarter")
                    .HasComment("квартал");

                entity.Property(e => e.PeriodYear)
                    .HasColumnName("period_year")
                    .HasComment("год");

                entity.Property(e => e.PeriodYearHalf)
                    .HasColumnName("period_year_half")
                    .HasComment("полугодие");

                entity.Property(e => e.RequestName)
                    .HasMaxLength(350)
                    .HasColumnName("request_name")
                    .HasComment("наименование запроса");

                entity.Property(e => e.SmevName)
                    .HasMaxLength(255)
                    .HasColumnName("smev_name")
                    .HasComment("наименование запроса");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц");

                entity.Property(e => e.SprSmevId)
                    .HasColumnName("spr_smev_id")
                    .HasComment("орган власти связь с spr_services_provider id");

                entity.Property(e => e.SprSmevRequestId)
                    .HasColumnName("spr_smev_request_id")
                    .HasComment("связь к сервисам");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус (1-Отправлен 2-Получен ответ 3-Получен ответ с просрочкой 4 - Просрочен");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportSmevStatistics)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_smev_statistic_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportSmevStatistics)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_smev_statistic_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprSmevRequest)
                    .WithMany(p => p.DataReportSmevStatistics)
                    .HasForeignKey(d => d.SprSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_smev_statistic_spr_smev_request_id_fkey");
            });

            modelBuilder.Entity<DataReportTransfer>(entity =>
            {
                entity.ToTable("data_report_transfer");

                entity.HasComment("Таблица учёта передач дел\r\n-- Создал. 19.09.2019 Балахаев");

                entity.HasIndex(e => e.DataServicesInfoId, "data_report_transfer_idx1");

                entity.HasIndex(e => e.Id, "data_report_transfer_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesId, "data_report_transfer_idx3");

                entity.HasIndex(e => e.SprEmployeesIdOld, "data_report_transfer_idx4");

                entity.HasIndex(e => e.SprEmployeesIdNew, "data_report_transfer_idx5");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_report_transfer_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name")
                    .HasComment("ФИО заявителя");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Услуга");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("data_services_info_id")
                    .HasComment("Номер дела");

                entity.Property(e => e.DataTransfer)
                    .HasPrecision(6)
                    .HasColumnName("data_transfer")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата передачи");

                entity.Property(e => e.EmployeeFioNew)
                    .HasMaxLength(255)
                    .HasColumnName("employee_fio_new")
                    .HasComment("ФИО сотрудника которому передали услугу");

                entity.Property(e => e.EmployeeFioOld)
                    .HasMaxLength(255)
                    .HasColumnName("employee_fio_old")
                    .HasComment("ФИО сотрудника от которого передали услугу");

                entity.Property(e => e.RoutesStageName)
                    .HasMaxLength(255)
                    .HasColumnName("routes_stage_name")
                    .HasComment("Наименование этапа");

                entity.Property(e => e.ServicesSubName)
                    .HasMaxLength(255)
                    .HasColumnName("services_sub_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник который добавил запись");

                entity.Property(e => e.SprEmployeesIdNew)
                    .HasColumnName("spr_employees_id_new")
                    .HasComment("Сотрудник которому передали услугу");

                entity.Property(e => e.SprEmployeesIdOld)
                    .HasColumnName("spr_employees_id_old")
                    .HasComment("Сотрудник от которого передали услугу");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataReportTransferSprEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_transfer_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesIdNewNavigation)
                    .WithMany(p => p.DataReportTransferSprEmployeesIdNewNavigations)
                    .HasForeignKey(d => d.SprEmployeesIdNew)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_transfer_spr_employees_id_new_fkey");

                entity.HasOne(d => d.SprEmployeesIdOldNavigation)
                    .WithMany(p => p.DataReportTransferSprEmployeesIdOldNavigations)
                    .HasForeignKey(d => d.SprEmployeesIdOld)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_transfer_spr_employees_id_old_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataReportTransfers)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_report_transfer_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataSalaryRecalcLog>(entity =>
            {
                entity.ToTable("data_salary_recalc_log");

                entity.HasComment("Лог запуска перерасчетов");

                entity.HasIndex(e => e.Id, "data_salary_recalc_log_idx1");

                entity.HasIndex(e => e.Date, "data_salary_recalc_log_idx2");

                entity.HasIndex(e => e.EmployeesFio, "data_salary_recalc_log_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.Date)
                    .HasColumnName("date_")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время запуска");

                entity.Property(e => e.DateFinish)
                    .HasColumnName("date_finish")
                    .HasComment("Дата завршения процедуры");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("период начало");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("период окончание");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто запустил");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");
            });

            modelBuilder.Entity<DataService>(entity =>
            {
                entity.ToTable("data_services");

                entity.HasComment("Список текущих услуг");

                entity.HasIndex(e => e.Id, "data_services_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Id, e.SprEmployeesIdCurrent }, "data_services_idx10");

                entity.HasIndex(e => new { e.SprEmployeesIdCurrent, e.SprRoutesStageIdCurrent, e.RoutesStageDateFinishReg }, "data_services_idx11");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateEnter }, "data_services_idx12");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesMfcId, e.SprServicesSubStatusId, e.SprServicesProviderId, e.DateFinishFact, e.DateEnter }, "data_services_idx13");

                entity.HasIndex(e => new { e.Id, e.DateEnter }, "data_services_idx14");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DateEnter }, "data_services_idx15");

                entity.HasIndex(e => new { e.Id, e.SprServicesProviderId, e.SprServicesSubId }, "data_services_idx16");

                entity.HasIndex(e => new { e.DateFinishFact, e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubStatusId, e.IasMkgu, e.FrguServicesId, e.FrguProviderId }, "data_services_idx17");

                entity.HasIndex(e => new { e.Id, e.SprEmployeesId, e.SprEmployeesMfcId, e.SprServicesSubId, e.SprServicesProviderId }, "data_services_idx18");

                entity.HasIndex(e => new { e.DateFinishFact, e.SprEmployeesIdExecution, e.SprEmployeesMfcIdExecution, e.SprServicesSubId, e.SprServicesProviderId, e.ReportSelect }, "data_services_idx19");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DataServicesIdParent, e.SprServicesSubId, e.SprServicesProviderId, e.SprServicesSubStatusId, e.SprEmployeesId, e.SprEmployeesIdCurrent }, "data_services_idx2");

                entity.HasIndex(e => new { e.DateEnter, e.SprEmployeesId, e.SprEmployeesMfcId, e.SprServicesSubId, e.SprServicesProviderId, e.ReportSelect }, "data_services_idx20");

                entity.HasIndex(e => new { e.Id, e.SprServicesSubId, e.DateEnter }, "data_services_idx21");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesIdCurrent, e.SprRoutesStageIdCurrent, e.RoutesStageDateFinishReg }, "data_services_idx22");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesIdCurrent, e.SprRoutesStageIdCurrent, e.SprServicesSubStatusId, e.SprServicesSubWeekId }, "data_services_idx23");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubStatusId, e.DateEnter }, "data_services_idx24");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubId, e.SprServicesProviderId, e.SprServicesSubStatusId, e.DateEnter, e.DataServicesInfoId, e.DataServicesIdParent, e.DateFinishFact }, "data_services_idx25");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.SprServicesSubStatusId, e.DataServicesIdParent, e.DateEnter }, "data_services_idx26");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprServicesProviderId, e.SprServicesSubId, e.SprEmployeesId, e.SprEmployeesIdExecution, e.SprEmployeesIdCurrent, e.SprServicesSubStatusId, e.DateEnter, e.DateFinishFact }, "data_services_idx27");

                entity.HasIndex(e => new { e.DateEnter, e.ReportSelect, e.SprEmployeesId, e.SprEmployeesMfcId }, "data_services_idx28");

                entity.HasIndex(e => new { e.DateFinishFact, e.SprServicesSubStatusId, e.SprEmployeesIdExecution, e.SprEmployeesMfcIdExecution }, "data_services_idx29");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprServicesSubId, e.SprRoutesStageIdCurrent }, "data_services_idx3");

                entity.HasIndex(e => new { e.DateFinishFact, e.SprServicesSubStatusId, e.SprEmployeesIdExecution, e.SprEmployeesMfcIdExecution }, "data_services_idx30");

                entity.HasIndex(e => new { e.DateEnter, e.ReportSelect, e.SprEmployeesMfcId }, "data_services_idx31");

                entity.HasIndex(e => new { e.DateFinishFact, e.ReportSelect, e.SprServicesSubStatusId, e.SprEmployeesMfcIdExecution }, "data_services_idx32");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DataServicesIdParent, e.SprEmployeesId, e.SprEmployeesMfcId, e.SprServicesSubId, e.SprServicesProviderId }, "data_services_idx33");

                entity.HasIndex(e => new { e.Id, e.SprEmployeesId, e.SprEmployeesMfcId, e.SprServicesSubId, e.SprServicesProviderId }, "data_services_idx34");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateFinishFact, e.SprServicesSubStatusId }, "data_services_idx35");

                entity.HasIndex(e => new { e.DateFinishFact, e.DataServicesIdParent }, "data_services_idx36");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DataServicesIdParent, e.SprServicesSubStatusId, e.SprServicesProviderId, e.SprEmployeesId, e.SprEmployeesIdExecution, e.SprEmployeesMfcId }, "data_services_idx37");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateEnter }, "data_services_idx38");

                entity.HasIndex(e => new { e.DateFinishFact, e.SprServicesSubStatusId, e.DataServicesIdParent }, "data_services_idx39");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprServicesSubId, e.Id }, "data_services_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateFinishFact, e.SprServicesSubStatusId }, "data_services_idx40");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateEnter }, "data_services_idx41");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprServicesSubId, e.SprServicesSubStatusId, e.SprEmployeesMfcId }, "data_services_idx42");

                entity.HasIndex(e => new { e.Id, e.SprServicesSubStatusId, e.SprServicesSubWeekId, e.SprServicesSubTariffTypeId }, "data_services_idx43");

                entity.HasIndex(e => new { e.SprServicesSubId, e.DateFinishFact, e.SprEmployeesMfcIdExecution }, "data_services_idx44");

                entity.HasIndex(e => e.SprEmployeesIdExecution, "data_services_idx45");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_idx46");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_services_idx47");

                entity.HasIndex(e => e.SprEmployeesJobPosIdExecution, "data_services_idx48");

                entity.HasIndex(e => e.SprEmployeesMfcIdExecution, "data_services_idx49");

                entity.HasIndex(e => new { e.DataServicesIdParent, e.DateFinishFact }, "data_services_idx5");

                entity.HasIndex(e => e.SprServicesSubStatusId, "data_services_idx50");

                entity.HasIndex(e => e.SprServicesSubTrId, "data_services_idx51");

                entity.HasIndex(e => e.SprServicesSubWeekId, "data_services_idx52");

                entity.HasIndex(e => e.SprEmployeesMfcIdCurrent, "data_services_idx53");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DataServicesIdParent, e.SprEmployeesMfcId }, "data_services_idx6");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DataServicesIdParent, e.SprEmployeesId, e.SprServicesSubStatusId, e.SprServicesSubId, e.SprServicesProviderId }, "data_services_idx7");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.Id }, "data_services_idx8");

                entity.HasIndex(e => new { e.DataServicesDocumentIdParent, e.Id }, "data_services_idx9");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("колв-во дней на исполнение услуги(ОИВ) по регламенту");

                entity.Property(e => e.CountDayProcessing)
                    .HasColumnName("count_day_processing")
                    .HasComment("количество дней на обработку");

                entity.Property(e => e.CountDayReturn)
                    .HasColumnName("count_day_return")
                    .HasComment("количество дней на возврат от исполнителя");

                entity.Property(e => e.DataServicesDocumentIdParent)
                    .HasColumnName("data_services_document_id_parent")
                    .HasComment("связь с головным документом, data_services_documents id");

                entity.Property(e => e.DataServicesIdParent)
                    .HasColumnName("data_services_id_parent")
                    .HasComment("связь с голвной услугой data_services id_parent");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasColumnType("date")
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата ввода");

                entity.Property(e => e.DateFinishFact)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_fact")
                    .HasComment("дата завешения услуги,фактическая");

                entity.Property(e => e.DateFinishTotal)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_total")
                    .HasComment("дата планового заврешения услуги с учетом выше стоящих услуг");

                entity.Property(e => e.DateRead)
                    .HasColumnType("date")
                    .HasColumnName("date_read")
                    .HasComment("получен этап или нет");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто добавил запись ФИО");

                entity.Property(e => e.EmployeesFioExecuted)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_executed")
                    .HasComment("Кто исполнил услугу");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("Должность того к принял услугу");

                entity.Property(e => e.EmployeesJobPosNameExecuted)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name_executed")
                    .HasComment("Должность того кто исполнил услугу");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Мфц в котором принята услуга");

                entity.Property(e => e.EmployeesMfcNameExecuted)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name_executed")
                    .HasComment("Мфц в котором исполнена услуга");

                entity.Property(e => e.FrguProviderId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("ID ФРГУ, ID Поставщика");

                entity.Property(e => e.FrguServicesId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_id")
                    .HasComment("ID услуги ФРГУ");

                entity.Property(e => e.FrguTargetId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_target_id")
                    .HasComment("id цели из ФРГУ");

                entity.Property(e => e.IasMkgu)
                    .HasColumnName("ias_mkgu")
                    .HasComment("учавствует услуга а иас мкгу или нет");

                entity.Property(e => e.NodeNumber)
                    .HasColumnName("node_number")
                    .HasComment("глубина дерева");

                entity.Property(e => e.NumberCopies)
                    .HasColumnName("number_copies")
                    .HasComment("Номер копии сопроводительного письма");

                entity.Property(e => e.ReportSelect)
                    .HasColumnName("report_select")
                    .HasComment("выводить в отчетах, да или нет");

                entity.Property(e => e.RoutesStageDateFinishReg)
                    .HasColumnType("date")
                    .HasColumnName("routes_stage_date_finish_reg")
                    .HasComment("регламентная дата окончания текущего этапа ");

                entity.Property(e => e.ServicesCount)
                    .HasColumnName("services_count")
                    .HasDefaultValueSql("0")
                    .HasComment("Количество услуг");

                entity.Property(e => e.ServicesProviderName)
                    .HasMaxLength(350)
                    .HasColumnName("services_provider_name")
                    .HasComment("Наименование поставщика (Орган исполнительной власти)");

                entity.Property(e => e.ServicesSubName)
                    .HasMaxLength(1000)
                    .HasColumnName("services_sub_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("Удалить");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id, кто занес услугу");

                entity.Property(e => e.SprEmployeesIdCurrent)
                    .HasColumnName("spr_employees_id_current")
                    .HasComment("На ком в данный момент услуга");

                entity.Property(e => e.SprEmployeesIdExecution)
                    .HasColumnName("spr_employees_id_execution")
                    .HasComment("кто исполнил,связь с spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника , кто принял услугу,связь spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesJobPosIdExecution)
                    .HasColumnName("spr_employees_job_pos_id_execution")
                    .HasComment("должность сотрудника , кто исполнил услугу , связь spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("в каком МФЦ принята услуга,связь с spr_employees_mfc id");

                entity.Property(e => e.SprEmployeesMfcIdCurrent)
                    .HasColumnName("spr_employees_mfc_id_current")
                    .HasComment("мфц сотрудника на котором услуга");

                entity.Property(e => e.SprEmployeesMfcIdExecution)
                    .HasColumnName("spr_employees_mfc_id_execution")
                    .HasComment("в каком мфц исполнили,связь с spr_employees_mfc id ");

                entity.Property(e => e.SprEmployeesMfcRemoteWorkplaceId)
                    .HasColumnName("spr_employees_mfc_remote_workplace_id")
                    .HasComment("Отдаленные рабочие места МФЦ");

                entity.Property(e => e.SprRoutesStageIdCurrent)
                    .HasColumnName("spr_routes_stage_id_current")
                    .HasComment("текущий этап, spr_routes_stage id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком услуги, spr_services_provider id");

                entity.Property(e => e.SprServicesProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("spr_services_provider_name")
                    .HasComment("Удалить");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с подуслугой,spr_services_sub id");

                entity.Property(e => e.SprServicesSubName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("spr_services_sub_name")
                    .HasComment("Удалить");

                entity.Property(e => e.SprServicesSubStatusId)
                    .HasColumnName("spr_services_sub_status_id")
                    .HasComment("статус услуги, spr_services_sub_status id");

                entity.Property(e => e.SprServicesSubTariffTypeId)
                    .HasColumnName("spr_services_sub_tariff_type_id")
                    .HasComment("тип тарифа связь с spr_services_sub_tariff_type id");

                entity.Property(e => e.SprServicesSubTrId)
                    .HasColumnName("spr_services_sub_tr_id")
                    .HasComment("тип получателя, spr_services_type_recipient id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("Связь с spr_services_sub_week id,  тип расчета дней услуги в ОИВ");

                entity.Property(e => e.TariffEdit)
                    .HasColumnName("tariff_edit")
                    .HasComment("возможность редактирования тарифа");

                entity.Property(e => e.TariffMfc)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_mfc")
                    .HasComment("Тариф для МФЦ");

                entity.Property(e => e.TariffState)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_state")
                    .HasComment("гос пошлина");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServices)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServiceSprEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesIdExecutionNavigation)
                    .WithMany(p => p.DataServiceSprEmployeesIdExecutionNavigations)
                    .HasForeignKey(d => d.SprEmployeesIdExecution)
                    .HasConstraintName("data_services_spr_employees_id_execution_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataServiceSprEmployeesJobPos)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPosIdExecutionNavigation)
                    .WithMany(p => p.DataServiceSprEmployeesJobPosIdExecutionNavigations)
                    .HasForeignKey(d => d.SprEmployeesJobPosIdExecution)
                    .HasConstraintName("data_services_spr_employees_job_pos_id_execution_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataServiceSprEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcIdExecutionNavigation)
                    .WithMany(p => p.DataServiceSprEmployeesMfcIdExecutionNavigations)
                    .HasForeignKey(d => d.SprEmployeesMfcIdExecution)
                    .HasConstraintName("data_services_spr_employees_mfc_id_execution_fkey");

                entity.HasOne(d => d.SprEmployeesMfcRemoteWorkplace)
                    .WithMany(p => p.DataServices)
                    .HasForeignKey(d => d.SprEmployeesMfcRemoteWorkplaceId)
                    .HasConstraintName("data_services_spr_employees_mfc_remote_workplace_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.DataServices)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubStatus)
                    .WithMany(p => p.DataServices)
                    .HasForeignKey(d => d.SprServicesSubStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_services_sub_status_id_fkey");

                entity.HasOne(d => d.SprServicesSubTr)
                    .WithMany(p => p.DataServices)
                    .HasForeignKey(d => d.SprServicesSubTrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_services_sub_tr_id_fkey");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.DataServices)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_spr_services_sub_week_id_fkey");
            });

            modelBuilder.Entity<DataServiceSmevLog>(entity =>
            {
                entity.ToTable("data_service_smev_log");

                entity.HasComment("Лог сервиса смэв");

                entity.HasIndex(e => e.Id, "data_service_smev_log_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SetDate, e.LogType }, "data_service_smev_log_idx2");

                entity.HasIndex(e => e.DataServicesSmevRequestId, "data_service_smev_log_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataServicesSmevRequestId)
                    .HasColumnName("data_services_smev_request_id")
                    .HasComment("связь с запосом, data_services_smev_request id");

                entity.Property(e => e.LogText)
                    .HasColumnName("log_text")
                    .HasComment("текст лога");

                entity.Property(e => e.LogType)
                    .HasColumnName("log_type")
                    .HasComment("тип лога");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasComment("дата и время лога");
            });

            modelBuilder.Entity<DataServicesAisOpvAnketStatus>(entity =>
            {
                entity.ToTable("data_services_ais_opv_anket_status");

                entity.HasComment("Статусы анкет по приему заявлений о выдаче заграничного паспорта, содержащего электронный носитель информации");

                entity.HasIndex(e => new { e.AnketStatus, e.RegistrationNumber }, "data_services_ais_opv_anket_status_idx1");

                entity.HasIndex(e => new { e.AnketStatus, e.DataServicesSmevRequestId }, "data_services_ais_opv_anket_status_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.AnketStatus)
                    .HasColumnName("anket_status")
                    .HasComment("Код статуса анкеты:\n1 - Подана\n2 - Оправлена в МВД\n3 - Принята\n4 - Возврат\n5 - Не допущена\n6 - Документ изготовлен\n7 - Документ доставлен\n8 - В процессе отзыва\n9 - Отозвано\n10 - Выдача в МВД\n11 - Документ выдан\n12 - Анкета удалена\n13 - Госпошлина не оплачена\n14 - Нет биометрии");

                entity.Property(e => e.AnketStatusComment)
                    .HasMaxLength(4096)
                    .HasColumnName("anket_status_comment")
                    .HasComment("Комментарий к статусу анкеты");

                entity.Property(e => e.AnketStatusDatetime)
                    .HasColumnName("anket_status_datetime")
                    .HasComment("Дата и время статуса анкеты");

                entity.Property(e => e.AnketStatusName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("anket_status_name")
                    .HasComment("Текcт статуса анкеты");

                entity.Property(e => e.AnketType)
                    .HasColumnName("anket_type")
                    .HasComment("Тип анкеты:\n1 - Взрослая\n2 - Детская");

                entity.Property(e => e.DataServicesSmevRequestId)
                    .HasColumnName("data_services_smev_request_id")
                    .HasComment("Идентификатор запроса, посредством которого отправлена анкета в СМЭВ");

                entity.Property(e => e.DocumentNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("document_number")
                    .HasComment("Номер документа заявителя");

                entity.Property(e => e.DocumentSeries)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("document_series")
                    .HasComment("Серия документа заявителя");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("first_name")
                    .HasComment("Имя заявителя");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия заявителя");

                entity.Property(e => e.Patronymic)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество заявителя");

                entity.Property(e => e.RegistrationNumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("registration_number")
                    .HasComment("Двадцатипятизначный регистрационный номер анкеты");
            });

            modelBuilder.Entity<DataServicesAisOpvChat>(entity =>
            {
                entity.ToTable("data_services_ais_opv_chat");

                entity.HasComment("Таблица для хранения чата с АИС ОПВ");

                entity.HasIndex(e => new { e.ChatDirection, e.ReceivedOrSentTime, e.OutcomingMessageInvalid }, "data_services_ais_opv_chat_idx1");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.ChatDirection)
                    .HasColumnName("chat_direction")
                    .HasComment("Направление сообщения:\n1 - входящее\n2 - исходящее");

                entity.Property(e => e.ChatMessage)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .HasColumnName("chat_message")
                    .HasComment("Сообщение в чате");

                entity.Property(e => e.DataServicesSmevRequestId)
                    .HasColumnName("data_services_smev_request_id")
                    .HasComment("Идентификатор запроса, посредством которого отправлена анкета в СМЭВ");

                entity.Property(e => e.OutcomingMessageInvalid)
                    .HasColumnName("outcoming_message_invalid")
                    .HasComment("Признак, что исходящее сообщение не валидно");

                entity.Property(e => e.ReceivedOrSentTime)
                    .HasColumnName("received_or_sent_time")
                    .HasComment("Дата и время получения или отправки сообщения");

                entity.Property(e => e.Sender)
                    .HasMaxLength(255)
                    .HasColumnName("sender")
                    .HasDefaultValueSql("'МВД'::character varying")
                    .HasComment("Отправитель");

                entity.HasOne(d => d.DataServicesSmevRequest)
                    .WithMany(p => p.DataServicesAisOpvChats)
                    .HasForeignKey(d => d.DataServicesSmevRequestId)
                    .HasConstraintName("data_services_ais_opv_chat_data_services_smev_request_id_fkey");
            });

            modelBuilder.Entity<DataServicesCommentt>(entity =>
            {
                entity.ToTable("data_services_commentt");

                entity.HasComment("Список комментариев к услугам");

                entity.HasIndex(e => e.Id, "data_services_commentt_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.Id }, "data_services_commentt_idx2");

                entity.HasIndex(e => e.DataServicesId, "data_services_commentt_idx3");

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateEnter }, "data_services_commentt_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateEnter }, "data_services_commentt_idx5");

                entity.HasIndex(e => e.DateEnter, "data_services_commentt_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .IsRequired()
                    .HasMaxLength(20000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата ввода");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто занес комментарий, храним строку на всякий случай");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Personal)
                    .HasColumnName("personal_")
                    .HasComment("есть получатели или нет");

                entity.Property(e => e.PublicCommentt)
                    .HasColumnName("public_commentt")
                    .HasDefaultValueSql("false")
                    .HasComment("публичное или не публичное примечание");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id, кто ввел комментарий");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц,spr_employees_mfc id");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesCommentts)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_commentt_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesCommentts)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_commentt_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesCommentts)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_commentt_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataServicesCommenttRecipient>(entity =>
            {
                entity.ToTable("data_services_commentt_recipient");

                entity.HasComment("Таблица адресатов комментариев, связана с таблицей data_services_commentt");

                entity.HasIndex(e => e.Id, "data_services_commentt_recipient_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesCommenttId, e.SprEmployeesIdRecipient, e.DateRead }, "data_services_commentt_recipient_idx2");

                entity.HasIndex(e => e.SprEmployeesIdRecipient, "data_services_commentt_recipient_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesCommenttId)
                    .HasColumnName("data_services_commentt_id")
                    .HasComment("связь с комментарием, data_services_commentt id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateRead)
                    .HasColumnName("date_read")
                    .HasComment("дата чтения");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesFioRead)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_read")
                    .HasComment("кто прочитал");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesIdRecipient)
                    .HasColumnName("spr_employees_id_recipient")
                    .HasComment("кому адресовано связь с spr_employees id");

                entity.HasOne(d => d.DataServicesCommentt)
                    .WithMany(p => p.DataServicesCommenttRecipients)
                    .HasForeignKey(d => d.DataServicesCommenttId)
                    .HasConstraintName("data_services_commentt_recipient_data_services_commentt_id_fkey");

                entity.HasOne(d => d.SprEmployeesIdRecipientNavigation)
                    .WithMany(p => p.DataServicesCommenttRecipients)
                    .HasForeignKey(d => d.SprEmployeesIdRecipient)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_commentt_recipien_spr_employees_id_recipient_fkey");
            });

            modelBuilder.Entity<DataServicesCustomer>(entity =>
            {
                entity.ToTable("data_services_customer");

                entity.HasComment("Перечень заявителей");

                entity.HasIndex(e => e.Id, "data_services_customer_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.CustomerAddress, "data_services_customer_idx11");

                entity.HasIndex(e => e.CustomerTel1, "data_services_customer_idx12");

                entity.HasIndex(e => e.CustomerTel2, "data_services_customer_idx13");

                entity.HasIndex(e => e.CustomerEmail, "data_services_customer_idx14");

                entity.HasIndex(e => e.SprServicesSubTrId, "data_services_customer_idx15");

                entity.HasIndex(e => new { e.DocumentSerial, e.DocumentNumber, e.DataServicesId }, "data_services_customer_idx2");

                entity.HasIndex(e => new { e.DataServicesId, e.CustomerType }, "data_services_customer_idx3");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.CustomerType, e.SprDocumentIdentityId }, "data_services_customer_idx4");

                entity.HasIndex(e => e.CustomerFio, "data_services_customer_idx5")
                    .HasOperators(new[] { "text_pattern_ops" });

                entity.HasIndex(e => e.CustomerNameLegal, "data_services_customer_idx6")
                    .HasOperators(new[] { "text_pattern_ops" });

                entity.HasIndex(e => new { e.DataServicesInfoId, e.CustomerType, e.SprAlertId }, "data_services_customer_idx7");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.CustomerType, e.PollIasMkgu }, "data_services_customer_idx8");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.SetDate }, "data_services_customer_idx9");

                entity.HasIndex(e => e.Id, "data_services_customer_unq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(500)
                    .HasColumnName("customer_address")
                    .HasComment("адрес заявителя");

                entity.Property(e => e.CustomerAddressJson)
                    .HasColumnType("jsonb")
                    .HasColumnName("customer_address_json")
                    .HasComment("Разбитый адрес заявителя");

                entity.Property(e => e.CustomerAddressOkato)
                    .HasMaxLength(30)
                    .HasColumnName("customer_address_okato")
                    .HasComment("ОКАТО");

                entity.Property(e => e.CustomerCodeRegion)
                    .HasMaxLength(3)
                    .HasColumnName("customer_code_region")
                    .HasComment("КОД региона");

                entity.Property(e => e.CustomerDirectorJob)
                    .HasMaxLength(255)
                    .HasColumnName("customer_director_job")
                    .HasComment("должность руководителя");

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(70)
                    .HasColumnName("customer_email")
                    .HasComment("электронная почта");

                entity.Property(e => e.CustomerFio)
                    .HasMaxLength(255)
                    .HasColumnName("customer_fio")
                    .HasComment("ФИО физ ЛИЦА");

                entity.Property(e => e.CustomerInn)
                    .HasMaxLength(30)
                    .HasColumnName("customer_inn")
                    .HasComment("BИНН");

                entity.Property(e => e.CustomerInnLegal)
                    .HasMaxLength(30)
                    .HasColumnName("customer_inn_legal")
                    .HasComment("инн организации");

                entity.Property(e => e.CustomerKppLegal)
                    .HasMaxLength(20)
                    .HasColumnName("customer_kpp_legal")
                    .HasComment("КПП");

                entity.Property(e => e.CustomerNameDirector)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name_director")
                    .HasComment("фио руководителя");

                entity.Property(e => e.CustomerNameLegal)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name_legal")
                    .HasComment("наименование юр лица");

                entity.Property(e => e.CustomerOgrnLegal)
                    .HasMaxLength(20)
                    .HasColumnName("customer_ogrn_legal")
                    .HasComment("ОГРН юр и ип");

                entity.Property(e => e.CustomerOktmo)
                    .HasMaxLength(30)
                    .HasColumnName("customer_oktmo")
                    .HasComment("ОКТМО");

                entity.Property(e => e.CustomerSex)
                    .HasMaxLength(6)
                    .HasColumnName("customer_sex")
                    .HasComment("пол заявителя");

                entity.Property(e => e.CustomerSnils)
                    .HasMaxLength(20)
                    .HasColumnName("customer_snils")
                    .HasComment("СНИЛС заявителя");

                entity.Property(e => e.CustomerTel1)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel1")
                    .HasComment("телефон 1");

                entity.Property(e => e.CustomerTel2)
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel2")
                    .HasComment("телефон 2");

                entity.Property(e => e.CustomerType)
                    .HasColumnName("customer_type")
                    .HasComment("тип заявителя, 1 Заявитель(главный), 2 Заявитель, 3 Доверитель");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связб с data_services_customer_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DocumentBirthDate)
                    .HasColumnType("date")
                    .HasColumnName("document_birth_date")
                    .HasComment("дата рождения");

                entity.Property(e => e.DocumentBirthPlace)
                    .HasMaxLength(255)
                    .HasColumnName("document_birth_place")
                    .HasComment("место рождения");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(30)
                    .HasColumnName("document_code")
                    .HasComment("код документа");

                entity.Property(e => e.DocumentIssueBody)
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_body")
                    .HasComment("кто выдал");

                entity.Property(e => e.DocumentIssueDate)
                    .HasColumnType("date")
                    .HasColumnName("document_issue_date")
                    .HasComment("дата выдачи");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("document_number")
                    .HasComment("номер документа");

                entity.Property(e => e.DocumentSerial)
                    .HasMaxLength(10)
                    .HasColumnName("document_serial")
                    .HasComment("серия документа");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.PollIasMkgu)
                    .HasColumnName("poll_ias_mkgu")
                    .HasComment("согласие на участие иас мкгу,0-отказ 1 в смс, 2 через теминал");

                entity.Property(e => e.PollRegionSms)
                    .HasColumnName("poll_region_sms")
                    .HasComment("согласие на участие в региональном опросе");

                entity.Property(e => e.RelationDegree)
                    .HasMaxLength(20)
                    .HasColumnName("relation_degree")
                    .HasComment("Степень родства");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprAlertId)
                    .HasColumnName("spr_alert_id")
                    .HasComment("способ оповещения, связь с spr_alert id");

                entity.Property(e => e.SprDocumentIdentityId)
                    .HasColumnName("spr_document_identity_id")
                    .HasComment("связь с документов удостоворяющим личность,spr_document_identity id");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника  кто добавил запись связь  с spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника, связь c spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц,spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubTrId)
                    .HasColumnName("spr_services_sub_tr_id")
                    .HasComment("тип заявителя,физ , юр. spr_services_sub_type_recipient id");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesCustomers)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_customer_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesCustomers)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_customer_data_services_info_id_fkey");

                entity.HasOne(d => d.SprServicesSubTr)
                    .WithMany(p => p.DataServicesCustomers)
                    .HasForeignKey(d => d.SprServicesSubTrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_customer_spr_services_sub_tr_id_fkey");
            });

            modelBuilder.Entity<DataServicesCustomerCall>(entity =>
            {
                entity.ToTable("data_services_customer_call");

                entity.HasComment("Звонки заявителям");

                entity.HasIndex(e => e.Id, "data_services_customer_call_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DateCall }, "data_services_customer_call_idx2");

                entity.HasIndex(e => new { e.DataServicesId, e.DateCall }, "data_services_customer_call_idx3");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesMfcFtpId }, "data_services_customer_call_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateCall, e.TimeTalk }, "data_services_customer_call_idx5");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_customer_call_idx6");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "data_services_customer_call_idx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("Заявитель");

                entity.Property(e => e.CustomerTel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь сномером дела,data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateCall)
                    .HasColumnName("date_call")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время звонка");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SaveFtp)
                    .HasColumnName("save_ftp")
                    .HasDefaultValueSql("false")
                    .HasComment("признак сохранения на FTP");

                entity.Property(e => e.SoundFormat)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("sound_format")
                    .HasComment("формат звонка");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником ,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью, spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("связь с ftp сервером, spr_employees_ftp id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.TimeTalk)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("time_talk")
                    .HasDefaultValueSql("'00:00:00'::character varying")
                    .HasComment("Время разговора");

                entity.Property(e => e.TypeCall)
                    .HasColumnName("type_call")
                    .HasComment("Тип звонка");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesCustomerCalls)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_call_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesCustomerCalls)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_call_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesCustomerCalls)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_call_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.DataServicesCustomerCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_customer_call_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataServicesCustomerCalls)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_customer_call_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataServicesCustomerGisgmp>(entity =>
            {
                entity.ToTable("data_services_customer_gisgmp");

                entity.HasComment("ГИС ГМП текущие");

                entity.HasIndex(e => e.Id, "data_services_customer_gisgmp_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesCustomerId, "data_services_customer_gisgmp_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DataServicesCustomerId)
                    .HasColumnName("data_services_customer_id")
                    .HasComment("Заявитель");

                entity.Property(e => e.Gisgmp)
                    .HasPrecision(15, 2)
                    .HasColumnName("gisgmp")
                    .HasComment("ГИС ГМП");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления");

                entity.Property(e => e.SetEmployeeFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employee_fio")
                    .HasComment("Кто добавил запись");

                entity.HasOne(d => d.DataServicesCustomer)
                    .WithMany(p => p.DataServicesCustomerGisgmps)
                    .HasForeignKey(d => d.DataServicesCustomerId)
                    .HasConstraintName("data_services_customer_gisgmp_data_services_customer_id_fkey");
            });

            modelBuilder.Entity<DataServicesCustomerMessage>(entity =>
            {
                entity.ToTable("data_services_customer_message");

                entity.HasComment("Сообщения заявителям\r\n-- Поменял тип поля status 10.11.2019 Балахаев");

                entity.HasIndex(e => e.Id, "data_services_customer_message_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DateMessage }, "data_services_customer_message_idx2");

                entity.HasIndex(e => new { e.DataServicesId, e.DateMessage }, "data_services_customer_message_idx3");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateMessage }, "data_services_customer_message_idx5");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_customer_message_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("customer_name")
                    .HasComment("Заявитель");

                entity.Property(e => e.CustomerTel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("customer_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь сномером дела,data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateMessage)
                    .HasPrecision(6)
                    .HasColumnName("date_message")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время сообщения");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.IdSms)
                    .HasColumnName("id_sms")
                    .HasComment("идентефикатор смс соответствующий идентефкатору из базы смс сервиса");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником ,spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью,spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("мфц сотрудника ,  связь  c spr_employees_mfc id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("статус смс так же из базы смс сервиса");

                entity.Property(e => e.TextMessage)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnName("text_message")
                    .HasComment("текст сообщения");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesCustomerMessages)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_customer_message_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesCustomerMessages)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_customer_message_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesCustomerMessages)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_customer_message_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataServicesDocument>(entity =>
            {
                entity.ToTable("data_services_document");

                entity.HasComment("Список документов к услуге");

                entity.HasIndex(e => e.Id, "data_services_document_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesId, e.SprDocumentsId, e.Id }, "data_services_document_idx2");

                entity.HasIndex(e => new { e.Id, e.SprDocumentsId }, "data_services_document_idx3");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.Id }, "data_services_document_idx4");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprDocumentsId, e.Id }, "data_services_document_idx5");

                entity.HasIndex(e => e.SprDocumentsId, "data_services_document_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Check)
                    .HasColumnName("check_")
                    .HasComment("Отметка о предоставлении документа заявителем");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DocumentCount)
                    .HasColumnName("document_count")
                    .HasComment("количество копий");

                entity.Property(e => e.DocumentNeeds)
                    .HasColumnName("document_needs")
                    .HasComment("обязательный(0),не обязательный документ(1), при наличии (2)");

                entity.Property(e => e.DocumentType)
                    .HasColumnName("document_type")
                    .HasComment("тип документа, 0- оригинал 1- копия");

                entity.Property(e => e.SprDocumentsId)
                    .HasColumnName("spr_documents_id")
                    .HasComment("связь с документом, spr_document id");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesDocuments)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_document_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesDocuments)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_document_data_services_info_id_fkey");

                entity.HasOne(d => d.SprDocuments)
                    .WithMany(p => p.DataServicesDocuments)
                    .HasForeignKey(d => d.SprDocumentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_document_spr_documents_id_fkey");
            });

            modelBuilder.Entity<DataServicesElplat>(entity =>
            {
                entity.ToTable("data_services_elplat");

                entity.HasComment("Оплата Элплат");

                entity.HasIndex(e => e.Id, "data_services_lplat_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_lplat_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address")
                    .HasComment("Адрес плательщика");

                entity.Property(e => e.Amount)
                    .HasPrecision(15, 2)
                    .HasColumnName("amount")
                    .HasComment("Сумма оплаты (тело перевода)");

                entity.Property(e => e.Bik)
                    .HasMaxLength(30)
                    .HasColumnName("bik")
                    .HasComment("БИК банка получателя");

                entity.Property(e => e.CurrencyCode)
                    .HasColumnName("currency_code")
                    .HasComment("Код валюты");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("id Услуги");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email")
                    .HasComment("Email плательщика");

                entity.Property(e => e.Fee)
                    .HasPrecision(15, 2)
                    .HasColumnName("fee")
                    .HasComment("Сумма комиссии");

                entity.Property(e => e.Fio)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("fio")
                    .HasComment("ФИО плательщика");

                entity.Property(e => e.Ground)
                    .HasMaxLength(255)
                    .HasColumnName("ground")
                    .HasComment("Назначение платежа");

                entity.Property(e => e.HashCode)
                    .HasMaxLength(255)
                    .HasColumnName("hash_code")
                    .HasComment("Расчетный hashcode, алгоритм расчета");

                entity.Property(e => e.Inn)
                    .HasMaxLength(30)
                    .HasColumnName("inn")
                    .HasComment("ИНН получателя");

                entity.Property(e => e.InteractionTypeCode)
                    .HasMaxLength(255)
                    .HasColumnName("interaction_type_code")
                    .HasComment("тип взаимодействия кода");

                entity.Property(e => e.Kbk)
                    .HasMaxLength(30)
                    .HasColumnName("kbk")
                    .HasComment("КБК получателя");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(30)
                    .HasColumnName("kpp")
                    .HasComment("КПП получателя");

                entity.Property(e => e.Okato)
                    .HasMaxLength(30)
                    .HasColumnName("okato")
                    .HasComment("ОКАТО/ОКТМО получателя");

                entity.Property(e => e.PayerId)
                    .HasColumnName("payer_id")
                    .HasComment("Номер плательщика у партнера");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("date")
                    .HasColumnName("payment_date")
                    .HasComment("Дата оплаты");

                entity.Property(e => e.PaymentId)
                    .HasColumnName("payment_id")
                    .HasDefaultValueSql("nextval('data_services_elplat_seq'::regclass)")
                    .HasComment("Номер заказа(платежа) у партнера");

                entity.Property(e => e.PaymentInstrumentCode)
                    .HasMaxLength(255)
                    .HasColumnName("payment_instrument_code")
                    .HasComment("Код предмета оплаты");

                entity.Property(e => e.Phone)
                    .HasMaxLength(32)
                    .HasColumnName("phone")
                    .HasComment("Номер телефона плательщика");

                entity.Property(e => e.Receiver)
                    .HasMaxLength(255)
                    .HasColumnName("receiver")
                    .HasComment("Получатель текст");

                entity.Property(e => e.Rs)
                    .HasMaxLength(30)
                    .HasColumnName("rs")
                    .HasComment("Расчетный счет получателя");

                entity.Property(e => e.Service)
                    .HasColumnName("service")
                    .HasComment("код в системе партнера, нужен для расшифровки и детализации");

                entity.Property(e => e.SprServicesSubName)
                    .HasMaxLength(1000)
                    .HasColumnName("spr_services_sub_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.TaxDocnum)
                    .HasMaxLength(30)
                    .HasColumnName("tax_docnum")
                    .HasComment(" <тип документа>;<номер документа>");

                entity.Property(e => e.TransactionId)
                    .HasColumnType("character varying")
                    .HasColumnName("transaction_id")
                    .HasComment("Номер транзакции для осуществления перевода");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasComment("1 – госпошлина все виды, налоги 2 – штрафы (ГИБДД, ФССП) 100 - ЖКХ");

                entity.Property(e => e.Uin)
                    .HasMaxLength(25)
                    .HasColumnName("uin")
                    .HasComment("УИН 20 или 25 символов.");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Номер оператора-пользователя у партнера");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesElplats)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_lplat_data_services_info_id_fkey");
            });

            modelBuilder.Entity<DataServicesElplatInfo>(entity =>
            {
                entity.ToTable("data_services_elplat_info");

                entity.HasComment("Лог списаний ЭЛПЛАТ\r\n-- Поля data_services_elplat_id сделал с каскадным удалением. 31.10.2019. Балахаев");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasComment("Код");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.DataServicesElplatId)
                    .HasColumnName("data_services_elplat_id")
                    .HasComment("Оплата Элплат");

                entity.Property(e => e.DateCreate)
                    .HasColumnName("date_create")
                    .HasComment("Дата создания");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .HasColumnName("descr")
                    .HasComment("Дескриптор");

                entity.Property(e => e.Result)
                    .HasColumnName("result")
                    .HasComment("Результат");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус");

                entity.Property(e => e.Uip)
                    .HasMaxLength(255)
                    .HasColumnName("uip")
                    .HasComment("Уникальный идентификатор платежа");

                entity.Property(e => e.Version)
                    .HasMaxLength(255)
                    .HasColumnName("version")
                    .HasComment("Версия");

                entity.HasOne(d => d.DataServicesElplat)
                    .WithMany(p => p.DataServicesElplatInfos)
                    .HasForeignKey(d => d.DataServicesElplatId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("data_services_elplat_info_data_services_elplat_id_fkey");
            });

            modelBuilder.Entity<DataServicesFile>(entity =>
            {
                entity.ToTable("data_services_file");

                entity.HasComment("Ссылки на электроные образы документов к услугам");

                entity.HasIndex(e => e.Id, "data_services_file_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.DataServicesTableId }, "data_services_file_idx2");

                entity.HasIndex(e => new { e.DataServicesTableId, e.SprEmployeesMfcFtpId }, "data_services_file_idx3");

                entity.HasIndex(e => new { e.DataServicesTableId, e.DateEnter }, "data_services_file_idx4");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateEnter }, "data_services_file_idx5");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "data_services_file_idx6");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_file_idx7");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_services_file_idx8");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, связь с data_services_info id");

                entity.Property(e => e.DataServicesTableId)
                    .HasColumnName("data_services_table_id")
                    .HasComment("связь или с документом(data_services_document_id) или с услугой(data_services_id)");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата ввода");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasColumnType("character varying")
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("расширение файла");

                entity.Property(e => e.FileFlag)
                    .HasColumnName("file_flag")
                    .HasDefaultValueSql("1")
                    .HasComment("0 файла нет , 1 есть на фтп");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("file_name")
                    .HasComment("имя файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("размер файла");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsPaid)
                    .HasColumnName("is_paid")
                    .HasDefaultValueSql("true")
                    .HasComment("Признак оплачиваемости файла");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees_ id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("связь с сервером где храняться файлы.spr_employees_mfc_ftp_id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.TypeAddFile)
                    .HasColumnName("type_add_file")
                    .HasComment("1 - Сканирование 2 - с рабочего стола 3 - с архива 4 - служебный файл");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesFiles)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_file_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesFiles)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_file_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.DataServicesFiles)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_file_spr_employees_mfc_ftp_id_fkey");
            });

            modelBuilder.Entity<DataServicesFileResult>(entity =>
            {
                entity.ToTable("data_services_file_result");

                entity.HasComment("Удалить");

                entity.HasIndex(e => e.Id, "data_services_file_result_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesId, "data_services_file_result_idx2");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "data_services_file_result_idx3");

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_file_result_idx4");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_file_result_idx5");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_services_file_result_idx6");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_services_file_result_idx7");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Услуга");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время ввода");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("Кто добавил");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(255)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("Тип файла");

                entity.Property(e => e.FileFlag)
                    .HasColumnName("file_flag")
                    .HasDefaultValueSql("1")
                    .HasComment("0 файла нет, 1 есть фтп");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasColumnName("file_name")
                    .HasComment("Наименование файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("Размер файла");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("id должности");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("FTP сервер");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("id мфц");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesFileResults)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_file_result_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesFileResults)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_file_result_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataServicesFileResults)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .HasConstraintName("data_services_file_result_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.DataServicesFileResults)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .HasConstraintName("data_services_file_result_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataServicesFileResults)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .HasConstraintName("data_services_file_result_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataServicesIncomingSmevRequest>(entity =>
            {
                entity.ToTable("data_services_incoming_smev_request");

                entity.HasComment("Таблица для входящих запросов СМЭВ");

                entity.HasIndex(e => e.DataServicesId, "fki_data_services_Incoming_smev_request_data_services_id_fke");

                entity.HasIndex(e => e.SprSmevRequestId, "fki_data_services_Incoming_smev_request_spr_smev_request_id_");

                entity.HasIndex(e => e.DataServicesInfoId, "fki_data_services_incoming_smev_request_data_services_info_i");

                entity.HasIndex(e => e.SprEmployeesId, "fki_data_services_incoming_smev_request_spr_employees_id_fke");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Связь с услугой, data_services -> id");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Cвязь с номером обращения, data_services_info id");

                entity.Property(e => e.DateRequest)
                    .HasColumnType("date")
                    .HasColumnName("date_request")
                    .HasComment("Дата запроса");

                entity.Property(e => e.DateResponse)
                    .HasColumnType("date")
                    .HasColumnName("date_response")
                    .HasComment("Дата ответа");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(20)
                    .HasColumnName("oktmo")
                    .HasComment("ОКТМО направления запроса");

                entity.Property(e => e.RequestData)
                    .HasColumnName("request_data")
                    .HasComment("Сериализованный XML, описывающий данные запроса");

                entity.Property(e => e.ResponseData)
                    .HasColumnName("response_data")
                    .HasComment("Сериализованный XML, описывающий данные ответа");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Связь с сотрудником кто примет запрос, spr_employees -> id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("Cвязь с филиалом, spr_employees_mfc -> id");

                entity.Property(e => e.SprSmevRequestId)
                    .HasColumnName("spr_smev_request_id")
                    .HasComment("Связь с запросом, spr_smev_request -> id");

                entity.Property(e => e.TimeRequest)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_request")
                    .HasComment("Время запроса");

                entity.Property(e => e.TimeResponse)
                    .HasColumnType("time(6) without time zone")
                    .HasColumnName("time_response")
                    .HasComment("Время ответа");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesIncomingSmevRequests)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_incoming_smev_request_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesIncomingSmevRequests)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_incoming_smev_request_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesIncomingSmevRequests)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .HasConstraintName("data_services_incoming_smev_request_spr_employees_id_fkey");

                entity.HasOne(d => d.SprSmevRequest)
                    .WithMany(p => p.DataServicesIncomingSmevRequests)
                    .HasForeignKey(d => d.SprSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_incoming_smev_request_spr_smev_request_id_fkey");
            });

            modelBuilder.Entity<DataServicesInfo>(entity =>
            {
                entity.ToTable("data_services_info");

                entity.HasComment("Список текущих обращений");

                entity.HasIndex(e => e.Id, "data_services_info_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcRemoteWorkplaceId, "data_services_info_idx2");

                entity.HasIndex(e => new { e.Id, e.DateFinishTotal }, "data_services_info_idx3");

                entity.Property(e => e.Id)
                    .HasMaxLength(70)
                    .HasColumnName("id")
                    .HasComment("номер дела");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время добавления записи");

                entity.Property(e => e.DateFinishTotal)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_total")
                    .HasComment("дата регламентного окончания дела, обновляется в тригере");

                entity.Property(e => e.NumberTicketQueue)
                    .HasMaxLength(10)
                    .HasColumnName("number_ticket_queue")
                    .HasComment("номер талона электронной очереди");

                entity.Property(e => e.ServicesStart)
                    .HasColumnName("services_start")
                    .HasComment("Удалить");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Пока используется для МДМ. Хранит время когда была нажата кнопка Новое обращение");

                entity.Property(e => e.SmsRating)
                    .HasColumnName("sms_rating")
                    .HasComment("оценка полученая по смс с таблицы data_poll_region_sms");

                entity.Property(e => e.SprEmployeesMfcRemoteWorkplaceId)
                    .HasColumnName("spr_employees_mfc_remote_workplace_id")
                    .HasComment("удаленное рабочее место, связь с spr_employees_mfc_remote_workplace id, если нули то значит центральный офис");
            });

            modelBuilder.Entity<DataServicesInfoFavorite>(entity =>
            {
                entity.ToTable("data_services_info_favorites");

                entity.HasComment("Избранные обращения по сотрудникам");

                entity.HasIndex(e => e.Id, "data_services_info_favorites_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.DataServicesInfoId }, "data_services_info_favorites_idx2")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesId }, "data_services_info_favotites_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь с делом, data_services_info id");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления в избранное");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesInfoFavorites)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_info_favorites_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesInfoFavorites)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_info_favorites_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataServicesParametr>(entity =>
            {
                entity.ToTable("data_services_parametr");

                entity.HasComment("Параметры к текущей услуге\r\n-- Поля data_services_info_id и data_services_id сделал с каскадным удалением. 28.10.2019. Балахаев\r\n");

                entity.HasIndex(e => e.Id, "data_services_parametr_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_parametr_idx2");

                entity.HasIndex(e => e.DataServicesId, "data_services_parametr_idx3");

                entity.HasIndex(e => e.SprParametrId, "data_services_parametr_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Текущая услуга");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Текущее обращение");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Mnemo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("mnemo")
                    .HasComment("Мнемоника");

                entity.Property(e => e.ParametrName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("parametr_name")
                    .HasComment("Имя параметра");

                entity.Property(e => e.ParametrType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("parametr_type")
                    .HasComment("Тип параметра");

                entity.Property(e => e.ParametrValue)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("parametr_value")
                    .HasComment("Значение параметра");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprParametrId)
                    .HasColumnName("spr_parametr_id")
                    .HasComment("Параметр");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesParametrs)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_parametr_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesParametrs)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_parametr_data_services_info_id_fkey");

                entity.HasOne(d => d.SprParametr)
                    .WithMany(p => p.DataServicesParametrs)
                    .HasForeignKey(d => d.SprParametrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_parametr_spr_parametr_id_fkey");
            });

            modelBuilder.Entity<DataServicesParametr1>(entity =>
            {
                entity.ToTable("data_services_parametrs");

                entity.HasComment("Таблица хранения значений параметров для обращений");

                entity.HasIndex(e => e.Id, "data_services_parametrs_idx1");

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_parametrs_idx2");

                entity.HasIndex(e => e.DataServicesId, "data_services_parametrs_idx3");

                entity.HasIndex(e => e.ParametrMark, "data_services_parametrs_parametr_mark_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("Комментарий при изменении");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("Текущая услуга");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Номер обращения");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("Дата и время изменение записи");

                entity.Property(e => e.DdListParametrValues)
                    .HasColumnName("dd_list_parametr_values")
                    .HasComment("Список возможных значений параметра");

                entity.Property(e => e.EmployeesFioAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_add")
                    .HasComment("ФИО добавившего запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("ФИО сотрудника изменившего запись");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("group_name")
                    .HasComment("Наименование группы");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("IP адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("IP адрес изменившего запись");

                entity.Property(e => e.JsonValues)
                    .HasColumnName("json_values")
                    .HasComment("Список возможных значений параметра\r\n");

                entity.Property(e => e.ParametrMark)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mark")
                    .HasComment("Метка параметра");

                entity.Property(e => e.ParametrMask)
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mask")
                    .HasComment("Маска ввода параметра");

                entity.Property(e => e.ParametrName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("parametr_name")
                    .HasComment("Наименование параметра");

                entity.Property(e => e.ParametrType)
                    .HasColumnName("parametr_type")
                    .HasComment("Тип параметра");

                entity.Property(e => e.ParametrValue)
                    .HasMaxLength(500)
                    .HasColumnName("parametr_value")
                    .HasComment("Значение параметра");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("Признак удаления (1 - Запись удалена, 2 - Запись не удалена)");

                entity.Property(e => e.SprGroupParametrsId)
                    .HasColumnName("spr_group_parametrs_id")
                    .HasComment("Связь с таблицей spr_group_parametrs. Поле - ID");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesParametr1s)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_parametrs_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesParametr1s)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_parametrs_data_services_info_id_fkey");
            });

            modelBuilder.Entity<DataServicesPayment>(entity =>
            {
                entity.ToTable("data_services_payment");

                entity.HasComment("Оплата по услугам");

                entity.HasIndex(e => e.Id, "data_services_payment_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DataServicesId, e.SprEmployeesId }, "data_services_payment_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_payment_idx3");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_services_payment_idx4");

                entity.HasIndex(e => e.DataServicesCustomerId, "data_services_payment_idx5");

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_payment_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CodeCheckmaster)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("code_checkmaster")
                    .HasComment("Код чекмастера");

                entity.Property(e => e.CustomerFirstName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_first_name")
                    .HasComment("имя плательщика");

                entity.Property(e => e.CustomerInn)
                    .HasMaxLength(30)
                    .HasColumnName("customer_inn")
                    .HasComment("инн");

                entity.Property(e => e.CustomerLastName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_last_name")
                    .HasComment("фамилия плательщика");

                entity.Property(e => e.CustomerMiddleName)
                    .HasMaxLength(100)
                    .HasColumnName("customer_middle_name")
                    .HasComment("отчество плательщика");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("customer_name")
                    .HasComment("ФИО заявителя");

                entity.Property(e => e.CustomerSnils)
                    .HasMaxLength(30)
                    .HasColumnName("customer_snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.CustomerTel)
                    .HasMaxLength(20)
                    .HasColumnName("customer_tel")
                    .HasComment("Телефонв формате 9161234567");

                entity.Property(e => e.DataServicesCustomerId).HasColumnName("data_services_customer_id");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой ,data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("Номер обращения");

                entity.Property(e => e.DocumentCode)
                    .HasMaxLength(10)
                    .HasColumnName("document_code")
                    .HasComment("код документа плательщика,\r\n«01» – паспорт гражданина РФ;\r\n«02» – свидетельство органов ЗАГС о рождении гражданина;\r\n«03» – паспорт моряка;\r\n«04» – удостоверение личности военнослужащего;\r\n«05» – военный билет военнослужащего;\r\n«06» – временное удостоверение личности гражданина РФ;\r\n«07» – справка об освобождении из мест лишения свободы;\r\n«08» – паспорт иностранного гражданина;\r\n«09» – вид на жительство;\r\n«10» – разрешение на временное проживание;\r\n«11» – удостоверение беженца;\r\n«12» – миграционная карта;");

                entity.Property(e => e.DocumentInfo)
                    .HasMaxLength(255)
                    .HasColumnName("document_info")
                    .HasComment("Код документа серия и номер");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("document_number")
                    .HasComment("номер документа плательщика");

                entity.Property(e => e.DocumentSerial)
                    .HasMaxLength(10)
                    .HasColumnName("document_serial")
                    .HasComment("серия документа плательщика");

                entity.Property(e => e.PaymentAddress)
                    .HasMaxLength(255)
                    .HasColumnName("payment_address")
                    .HasComment("адрес плательщика");

                entity.Property(e => e.PaymentAgent)
                    .HasColumnName("payment_agent")
                    .HasDefaultValueSql("1")
                    .HasComment("платежный агент, 1- чемастер, 2 сотас");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(100)
                    .HasColumnName("payment_bank_name")
                    .HasComment("наименование банка");

                entity.Property(e => e.PaymentBik)
                    .HasMaxLength(20)
                    .HasColumnName("payment_bik")
                    .HasComment("бик");

                entity.Property(e => e.PaymentDate)
                    .HasColumnName("payment_date")
                    .HasComment("дата оплаты по платежу");

                entity.Property(e => e.PaymentDateEnter)
                    .HasColumnName("payment_date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время создания");

                entity.Property(e => e.PaymentIdParent)
                    .HasColumnName("payment_id_parent")
                    .HasDefaultValueSql("'00000000-0000-0000-0000-000000000000'::uuid")
                    .HasComment("Комбинированный платеж");

                entity.Property(e => e.PaymentInn)
                    .HasMaxLength(30)
                    .HasColumnName("payment_inn")
                    .HasComment("инн");

                entity.Property(e => e.PaymentKbk)
                    .HasMaxLength(30)
                    .HasColumnName("payment_kbk")
                    .HasComment("КБК");

                entity.Property(e => e.PaymentKpp)
                    .HasMaxLength(30)
                    .HasColumnName("payment_kpp")
                    .HasComment("кпп");

                entity.Property(e => e.PaymentKs)
                    .HasMaxLength(30)
                    .HasColumnName("payment_ks")
                    .HasComment("кор счет");

                entity.Property(e => e.PaymentNumber)
                    .HasColumnName("payment_number")
                    .HasComment("номер платежа");

                entity.Property(e => e.PaymentOktmo)
                    .HasMaxLength(30)
                    .HasColumnName("payment_oktmo")
                    .HasComment("октмо");

                entity.Property(e => e.PaymentOsmpId)
                    .HasMaxLength(20)
                    .HasColumnName("payment_osmp_id")
                    .HasComment("идентификатор платежа");

                entity.Property(e => e.PaymentPrvTxn)
                    .HasColumnName("payment_prv_txn")
                    .HasDefaultValueSql("0")
                    .HasComment("идентификатор платежа");

                entity.Property(e => e.PaymentPurpose)
                    .HasMaxLength(1500)
                    .HasColumnName("payment_purpose")
                    .HasComment("назначение платежа(название услуги)");

                entity.Property(e => e.PaymentRecipient)
                    .HasMaxLength(350)
                    .HasColumnName("payment_recipient")
                    .HasComment("получатель платежа(название органа власти)");

                entity.Property(e => e.PaymentRs)
                    .HasMaxLength(30)
                    .HasColumnName("payment_rs")
                    .HasComment("расчетный счет");

                entity.Property(e => e.PaymentSign)
                    .HasColumnName("payment_sign")
                    .HasDefaultValueSql("false")
                    .HasComment("признак платежа, оплачено или нет");

                entity.Property(e => e.PaymentValue)
                    .HasPrecision(15, 2)
                    .HasColumnName("payment_value")
                    .HasComment("сумма платежа");

                entity.Property(e => e.PersonalAccount)
                    .HasMaxLength(255)
                    .HasColumnName("personal_account")
                    .HasComment("Лицевой счет филиала");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связьс сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.Uin)
                    .HasMaxLength(255)
                    .HasColumnName("uin");

                entity.HasOne(d => d.DataServicesCustomer)
                    .WithMany(p => p.DataServicesPayments)
                    .HasForeignKey(d => d.DataServicesCustomerId)
                    .HasConstraintName("data_services_payment_data_services_customer_id_fkey");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesPayments)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_payment_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesPayments)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("data_services_payment_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesPayments)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_payment_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataServicesRating>(entity =>
            {
                entity.ToTable("data_services_rating");

                entity.HasComment("Таблица рейтинг услуг по мфц");

                entity.HasIndex(e => e.Id, "data_services_rating_idx1");

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprEmployeesMfcId }, "data_services_rating_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_services_rating_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Rating)
                    .HasColumnName("rating_")
                    .HasComment("рейтинг услуги, количество");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("сdязь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataServicesRatings)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_rating_spr_emloyees_mfc_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.DataServicesRatings)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_rating_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<DataServicesReestr>(entity =>
            {
                entity.ToTable("data_services_reestr");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CountDay)
                    .HasColumnName("count_day")
                    .HasComment("Общий срок обращения");

                entity.Property(e => e.CountDayStage)
                    .HasColumnName("count_day_stage")
                    .HasComment("Общий срок на этапе");

                entity.Property(e => e.CustomerFio)
                    .HasMaxLength(255)
                    .HasColumnName("customer_fio")
                    .HasComment("ФИО заявителя");

                entity.Property(e => e.DataReestrId)
                    .HasColumnName("data_reestr_id")
                    .HasComment("связь с data_reestr");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("ID Услуги. Связь data_services");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("ID услуги. Связь с data_services_id");

                entity.Property(e => e.DateEnter)
                    .HasColumnType("date")
                    .HasColumnName("date_enter")
                    .HasComment("Дата приема обращения");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника, принявшего заявку");

                entity.Property(e => e.EmployeesFioCurrent)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_current")
                    .HasComment("ФИО текущего сотрудник на услуге");

                entity.Property(e => e.ServicesName)
                    .HasMaxLength(1000)
                    .HasColumnName("services_name")
                    .HasComment("Наименование услуги");

                entity.Property(e => e.ServicesProviderName)
                    .HasMaxLength(255)
                    .HasColumnName("services_provider_name")
                    .HasComment("ОИВ (Орган исполнительной власти)");

                entity.Property(e => e.ServicesStatus)
                    .HasColumnName("services_status")
                    .HasComment("Статус");

                entity.HasOne(d => d.DataReestr)
                    .WithMany(p => p.DataServicesReestrs)
                    .HasForeignKey(d => d.DataReestrId)
                    .HasConstraintName("data_services_reestr_data_reestr_id_fkey");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesReestrs)
                    .HasForeignKey(d => d.DataServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("data_services_reestr_data_services_id_fkey");
            });

            modelBuilder.Entity<DataServicesRoutesStage>(entity =>
            {
                entity.ToTable("data_services_routes_stage");

                entity.HasComment("Таблица с текущим положеним услуги на маршруте");

                entity.HasIndex(e => e.Id, "data_services_routes_stage_cur_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateFinishFact, e.CountDayFact, e.SprRoutesStageId, e.SprEmployeesJobPosId }, "data_services_routes_stage_cur_idx10");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprRoutesStageId, e.SprEmployeesJobPosId, e.DateStart }, "data_services_routes_stage_cur_idx11");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprRoutesStageId, e.DateFinishFact, e.SprEmployeesMfcId }, "data_services_routes_stage_cur_idx12");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.SprRoutesStageId, e.CountDayFact, e.CountDayExecution, e.DateFinishFact, e.DataServicesId }, "data_services_routes_stage_cur_idx13");

                entity.HasIndex(e => new { e.DataServicesId, e.DateStart, e.TimeStart }, "data_services_routes_stage_cur_idx14");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_services_routes_stage_cur_idx15");

                entity.HasIndex(e => e.SprRoutesStageId, "data_services_routes_stage_cur_idx16");

                entity.HasIndex(e => e.SprServicesSubWeekId, "data_services_routes_stage_cur_idx17");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesJobPosId, e.SprRoutesStageId, e.DateStart }, "data_services_routes_stage_cur_idx18");

                entity.HasIndex(e => new { e.DataServicesId, e.SprRoutesStageId, e.DateFinishFact, e.DateFinishReg }, "data_services_routes_stage_cur_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.SprRoutesStageId, e.TimeFinishFact, e.DateFinishReg }, "data_services_routes_stage_cur_idx3");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.SprRoutesStageId, e.DateFinishFact, e.DataServicesId }, "data_services_routes_stage_cur_idx4");

                entity.HasIndex(e => new { e.DataServicesId, e.DateFinishReg, e.TimeFinishFact }, "data_services_routes_stage_cur_idx5");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprRoutesStageId, e.DateFinishFact, e.DateFinishReg, e.DataServicesId }, "data_services_routes_stage_cur_idx6");

                entity.HasIndex(e => new { e.DataServicesInfoId, e.SprEmployeesMfcId, e.SprEmployeesId }, "data_services_routes_stage_cur_idx7");

                entity.HasIndex(e => new { e.DataServicesId, e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateStart, e.TimeStart }, "data_services_routes_stage_cur_idx8");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateStart, e.TimeStart }, "data_services_routes_stage_cur_idx9");

                entity.HasIndex(e => e.DateFinishFact, "data_services_routes_stage_idx19");

                entity.HasIndex(e => new { e.DataServicesId, e.DateStart, e.TimeStart }, "data_services_routes_stage_unq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("количество дней на исполнение этапа");

                entity.Property(e => e.CountDayFact)
                    .HasColumnName("count_day_fact")
                    .HasComment("фактическое пройденное количество дней на этап");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesIdParent)
                    .HasColumnName("data_services_id_parent")
                    .HasComment("связь с id parent услуги, data_sevices id_parent");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер дела, data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateFinishFact)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_fact")
                    .HasComment("Фактическая дата окончания этапа");

                entity.Property(e => e.DateFinishReg)
                    .HasColumnType("date")
                    .HasColumnName("date_finish_reg")
                    .HasComment("Регламентная дата окончания этапа");

                entity.Property(e => e.DateRead)
                    .HasPrecision(0)
                    .HasColumnName("date_read")
                    .HasComment("дата получения этапа или отметки о получении, если null то новый этап");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasDefaultValueSql("('now'::text)::date")
                    .HasComment("дата начала этапа");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioFact)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_fact")
                    .HasComment("кто фактически добавил этап");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("Кто изменил запись");

                entity.Property(e => e.EmployeesFioRead)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_read")
                    .HasComment("кто отметил этап как прочитанный");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(255)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.PassAutomatically)
                    .HasColumnName("pass_automatically")
                    .HasComment("Передача сотруднику была автоматически или в ручную");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Удалить");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("должность сотрудника,связь spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("связь с названием точки(этапа), spr_routes_stage id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("связь с типом расчета дней, spr_services_sub_week id");

                entity.Property(e => e.TimeFinishFact)
                    .HasColumnType("time without time zone")
                    .HasColumnName("time_finish_fact")
                    .HasComment("Фактическое время окончания этапа");

                entity.Property(e => e.TimeStart)
                    .HasColumnType("time without time zone")
                    .HasColumnName("time_start")
                    .HasDefaultValueSql("('now'::text)::time with time zone")
                    .HasComment("время начала этапа");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_routes_stage_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_routes_stage_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_routes_stage_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_routes_stage_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_routes_stage_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_routes_stage_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.DataServicesRoutesStages)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_routes_stage_spr_services_sub_week_id_fkey");
            });

            modelBuilder.Entity<DataServicesSmevRequest>(entity =>
            {
                entity.ToTable("data_services_smev_request");

                entity.HasComment("Таблица запросов  СМЭВ\r\n-- Добавил поле repeat. 22.08.2019 Балахаев");

                entity.HasIndex(e => e.Id, "data_services_smev_request_idx1");

                entity.HasIndex(e => e.RequestIdRef, "data_services_smev_request_idx10");

                entity.HasIndex(e => new { e.DataServicesId, e.SprSmevRequestId }, "data_services_smev_request_idx2");

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_smev_request_idx3");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesJobPosId, e.DateResponse }, "data_services_smev_request_idx4");

                entity.HasIndex(e => new { e.DateRequest, e.SprSmevRequestId, e.SprEmployeesMfcId, e.SprEmployeesId }, "data_services_smev_request_idx5");

                entity.HasIndex(e => e.SprSmevRequestId, "data_services_smev_request_idx6");

                entity.HasIndex(e => e.MessageId, "data_services_smev_request_idx7");

                entity.HasIndex(e => e.DateRequest, "data_services_smev_request_idx8");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_smev_request_idx9");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("кол-во дней на исполнение");

                entity.Property(e => e.DataServicesId)
                    .HasColumnName("data_services_id")
                    .HasComment("связь с услугой, data_services id");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("связь с номером обращения, data_services_info id");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateRead)
                    .HasPrecision(0)
                    .HasColumnName("date_read")
                    .HasDefaultValueSql("'0001-01-01'::date")
                    .HasComment("дата чтения, пришел эответ и его кто когда заметил");

                entity.Property(e => e.DateRequest)
                    .HasColumnType("date")
                    .HasColumnName("date_request")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата запроса");

                entity.Property(e => e.DateResponse)
                    .HasColumnType("date")
                    .HasColumnName("date_response")
                    .HasComment("дата ответа");

                entity.Property(e => e.DateResponseReg)
                    .HasColumnType("date")
                    .HasColumnName("date_response_reg")
                    .HasComment("дата ответа по регламенту на запрос");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("кто отправил запрос");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioRead)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_read")
                    .HasComment("кто прочитал");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("должность сотрудника");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("ID сообщения");

                entity.Property(e => e.MessageIdProvider)
                    .HasMaxLength(70)
                    .HasColumnName("message_id_provider")
                    .HasComment("ID поставщика");

                entity.Property(e => e.Repeat)
                    .HasColumnName("repeat")
                    .HasComment("Является ли запрос повторным?");

                entity.Property(e => e.RequestHtml)
                    .HasColumnName("request_html")
                    .HasComment("Сериализованный XML, описывающий HTML отчет для запроса.");

                entity.Property(e => e.RequestIdRef)
                    .HasMaxLength(70)
                    .HasColumnName("request_id_ref")
                    .HasComment("id запроса для повторного запроса сведений");

                entity.Property(e => e.ResponseFileName)
                    .HasMaxLength(255)
                    .HasColumnName("response_file_name")
                    .HasComment("имя файла в котором храниться ответ");

                entity.Property(e => e.ResponseHtml)
                    .HasColumnName("response_html")
                    .HasComment("Сериализованный XML, описывающий HTML отчет для окончательного ответа.");

                entity.Property(e => e.ResponseHtmlInt)
                    .HasColumnName("response_html_int")
                    .HasComment("Сериализованный XML, описывающий HTML отчет для промежуточного ответа, полученного после выполнения первой фазы асинхронного запроса.");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником кто отправил запрос, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("тип отсчета дней, spr_servicers_sub_week id");

                entity.Property(e => e.SprSmevRequestId)
                    .HasColumnName("spr_smev_request_id")
                    .HasComment("связь с запросом, spr_smev_request id");

                entity.Property(e => e.TimeRequest)
                    .HasColumnType("time without time zone")
                    .HasColumnName("time_request")
                    .HasDefaultValueSql("now()")
                    .HasComment("время запроса");

                entity.Property(e => e.TimeResponse)
                    .HasColumnType("time without time zone")
                    .HasColumnName("time_response")
                    .HasComment("время ответа");

                entity.HasOne(d => d.DataServices)
                    .WithMany(p => p.DataServicesSmevRequests)
                    .HasForeignKey(d => d.DataServicesId)
                    .HasConstraintName("data_services_smev_request_data_services_id_fkey");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesSmevRequests)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_smev_request_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesSmevRequests)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_smev_request_spr_employees_id_fkey");

                entity.HasOne(d => d.SprSmevRequest)
                    .WithMany(p => p.DataServicesSmevRequests)
                    .HasForeignKey(d => d.SprSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_smev_request_spr_smev_request_id_fkey");
            });

            modelBuilder.Entity<DataServicesSmevRequestStatus>(entity =>
            {
                entity.ToTable("data_services_smev_request_status");

                entity.HasComment("Таблица запросов результата для асинхронных сервисев ");

                entity.HasIndex(e => e.Id, "data_services_smev_request_status_idx1");

                entity.HasIndex(e => e.DataServicesSmevRequestId, "data_services_smev_request_status_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DataServicesSmevRequestId)
                    .HasColumnName("data_services_smev_request_id")
                    .HasComment("связь с запросом, data_services_smev_request id");

                entity.Property(e => e.DateRequest)
                    .HasColumnType("date")
                    .HasColumnName("date_request")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата запроса");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(70)
                    .HasColumnName("message_id")
                    .HasComment("id сообщения");

                entity.Property(e => e.RequestIdRef)
                    .HasMaxLength(70)
                    .HasColumnName("request_id_ref")
                    .HasComment("id запроса для повторного запроса сведений");

                entity.Property(e => e.TimeRequest)
                    .HasColumnType("time without time zone")
                    .HasColumnName("time_request")
                    .HasDefaultValueSql("now()")
                    .HasComment("время запроса");

                entity.HasOne(d => d.DataServicesSmevRequest)
                    .WithMany(p => p.DataServicesSmevRequestStatuses)
                    .HasForeignKey(d => d.DataServicesSmevRequestId)
                    .HasConstraintName("data_services_smev_request_st_data_services_smev_request_i_fkey");
            });

            modelBuilder.Entity<DataServicesTempStatistic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("data_services_temp_statistics");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата ввода");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");
            });

            modelBuilder.Entity<DataServicesViewLog>(entity =>
            {
                entity.ToTable("data_services_view_log");

                entity.HasComment("История просмотров услуг сотрудниками");

                entity.HasIndex(e => e.Id, "data_services_view_log_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataServicesInfoId, "data_services_view_log_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_services_view_log_idx3");

                entity.HasIndex(e => e.SetDate, "data_services_view_log_set_date_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DataServicesInfoId)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("data_services_info_id")
                    .HasComment("номер обращения, связь с data_services_info id");

                entity.Property(e => e.EmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeesJobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("мфц сотрудника");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником,spr_employees id");

                entity.HasOne(d => d.DataServicesInfo)
                    .WithMany(p => p.DataServicesViewLogs)
                    .HasForeignKey(d => d.DataServicesInfoId)
                    .HasConstraintName("data_services_view_log_data_services_info_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataServicesViewLogs)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_services_view_log_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataTaskboard>(entity =>
            {
                entity.ToTable("data_taskboard");

                entity.HasComment("Задачи");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasComment("Позиция");

                entity.Property(e => e.SetDate)
                    .HasPrecision(0)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата ввода");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .HasColumnName("status")
                    .HasDefaultValueSql("NULL::character varying")
                    .HasComment("Статус");

                entity.Property(e => e.TaskText)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("task_text")
                    .HasComment("Текст задачи");
            });

            modelBuilder.Entity<DataTest>(entity =>
            {
                entity.ToTable("data_test");

                entity.HasComment("Тест\r\n-- Добавил поле с временем на тест. 18.09.2019");

                entity.HasIndex(e => e.Id, "data_test_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_test_idx2");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_test_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CountQuestion)
                    .HasColumnName("count_question")
                    .HasComment("Количество вопросов");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStartTest)
                    .HasColumnName("date_start_test")
                    .HasComment("Дата и время начала теста");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsRemove)
                    .HasColumnName("is_remove")
                    .HasDefaultValueSql("false")
                    .HasComment("признак удаления");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("Должность");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.TestName)
                    .HasMaxLength(255)
                    .HasColumnName("test_name")
                    .HasComment("Наименование теста");

                entity.Property(e => e.TestNumber)
                    .HasColumnName("test_number")
                    .HasDefaultValueSql("nextval('data_test_seq'::regclass)")
                    .HasComment("Номер теста");

                entity.Property(e => e.TestTime)
                    .HasColumnName("test_time")
                    .HasDefaultValueSql("60")
                    .HasComment("Время на тест в минутах");

                entity.Property(e => e.TestType)
                    .HasColumnName("test_type")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип теста (1- месячный 2 - итоговый)");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataTests)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .HasConstraintName("data_test_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataTests)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .HasConstraintName("data_test_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<DataTestDirection>(entity =>
            {
                entity.ToTable("data_test_direction");

                entity.HasComment("Направления к тесту");

                entity.HasIndex(e => e.Id, "data_test_direction_idx_1")
                    .IsUnique();

                entity.HasIndex(e => e.DataTestId, "data_test_direction_idx_2");

                entity.HasIndex(e => e.SprTestDirectionId, "data_test_direction_idx_3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataTestId)
                    .HasColumnName("data_test_id")
                    .HasComment("Тест");

                entity.Property(e => e.SprTestDirectionId)
                    .HasColumnName("spr_test_direction_id")
                    .HasComment("Направление");

                entity.HasOne(d => d.DataTest)
                    .WithMany(p => p.DataTestDirections)
                    .HasForeignKey(d => d.DataTestId)
                    .HasConstraintName("data_test_direction_data_test_id_fkey");

                entity.HasOne(d => d.SprTestDirection)
                    .WithMany(p => p.DataTestDirections)
                    .HasForeignKey(d => d.SprTestDirectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_direction_spr_direction_id_fkey");
            });

            modelBuilder.Entity<DataTestEmployee>(entity =>
            {
                entity.ToTable("data_test_employees");

                entity.HasComment(" Сотрудники тесту");

                entity.HasIndex(e => e.Id, "data_test_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataTestId, "data_test_employees_idx2");

                entity.HasIndex(e => e.SprEmployeesId, "data_test_employees_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataTestId)
                    .HasColumnName("data_test_id")
                    .HasComment("Тест");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");

                entity.HasOne(d => d.DataTest)
                    .WithMany(p => p.DataTestEmployees)
                    .HasForeignKey(d => d.DataTestId)
                    .HasConstraintName("data_test_employees_data_test_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataTestEmployees)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_employees_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataTestPrepared>(entity =>
            {
                entity.ToTable("data_test_prepared");

                entity.HasComment("Тест с правильными ответами");

                entity.HasIndex(e => e.DataTestId, "data_test_prepared_data_test_id_idx");

                entity.HasIndex(e => e.SprEmployeesId, "data_test_prepared_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичый ключ");

                entity.Property(e => e.DataTestId)
                    .HasColumnName("data_test_id")
                    .HasComment("Тест");

                entity.Property(e => e.PercentTrue)
                    .HasPrecision(32)
                    .HasColumnName("percent_true")
                    .HasComment("Процент правильных");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.TrueQuestion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("true_question")
                    .HasComment("Правильные ответы");

                entity.HasOne(d => d.DataTest)
                    .WithMany(p => p.DataTestPrepareds)
                    .HasForeignKey(d => d.DataTestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_prepared_data_test_id_fkey");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.DataTestPrepareds)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .HasConstraintName("data_test_prepared_spr_employees_id_fkey");
            });

            modelBuilder.Entity<DataTestQuestion>(entity =>
            {
                entity.ToTable("data_test_question");

                entity.HasComment("Вопросы к тесту");

                entity.HasIndex(e => e.Id, "data_test_question_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataTestId, "data_test_question_idx2");

                entity.HasIndex(e => e.SprTestQuestionId, "data_test_question_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataTestId)
                    .HasColumnName("data_test_id")
                    .HasComment("Тест");

                entity.Property(e => e.SprTestQuestionId)
                    .HasColumnName("spr_test_question_id")
                    .HasComment("Вопрос");

                entity.HasOne(d => d.DataTest)
                    .WithMany(p => p.DataTestQuestions)
                    .HasForeignKey(d => d.DataTestId)
                    .HasConstraintName("data_test_question_data_test_id_fkey");

                entity.HasOne(d => d.SprTestQuestion)
                    .WithMany(p => p.DataTestQuestions)
                    .HasForeignKey(d => d.SprTestQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_question_spr_question_id_fkey");
            });

            modelBuilder.Entity<DataTestQuestionEmployee>(entity =>
            {
                entity.ToTable("data_test_question_employees");

                entity.HasComment("Вопросы к сотруднику");

                entity.HasIndex(e => e.Id, "data_test_question_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprTestDirectionId, "data_test_question_employees_idx4");

                entity.HasIndex(e => e.SprTestQuestionId, "data_test_question_employees_idx5");

                entity.HasIndex(e => e.SprEmployeesJobPosId, "data_test_question_employees_idx6");

                entity.HasIndex(e => e.SprEmployeesMfcId, "data_test_question_employees_idx7");

                entity.HasIndex(e => e.DataTestEmployeesId, "data_test_question_employees_idx8");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DataTestEmployeesId)
                    .HasColumnName("data_test_employees_id")
                    .HasComment("Сотрудник к тесту");

                entity.Property(e => e.DateQuestion)
                    .HasColumnName("date_question")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время вопроса");

                entity.Property(e => e.DirectionName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("direction_name")
                    .HasComment("Наименование направления");

                entity.Property(e => e.EmployeeFio)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employee_fio")
                    .HasComment("Сотрудник");

                entity.Property(e => e.IsTrueAnswer)
                    .HasColumnName("is_true_answer")
                    .HasComment("Правильно ли ответил сотрудник");

                entity.Property(e => e.JobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("job_pos_name")
                    .HasComment("Наименование должности");

                entity.Property(e => e.MfcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("mfc_name")
                    .HasComment("Наименование мфц");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .HasColumnName("question")
                    .HasComment("Вопрос");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("Должность");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.SprTestDirectionId)
                    .HasColumnName("spr_test_direction_id")
                    .HasComment("Направление");

                entity.Property(e => e.SprTestQuestionId)
                    .HasColumnName("spr_test_question_id")
                    .HasComment("Вопрос");

                entity.Property(e => e.TestName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("test_name")
                    .HasComment("Наименование теста");

                entity.Property(e => e.TestNumber)
                    .HasColumnName("test_number")
                    .HasComment("Номер теста");

                entity.Property(e => e.Type)
                    .HasColumnName("type_")
                    .HasComment("Тип вопроса (1- с одним ответом 2- с несколькими ответами)");

                entity.HasOne(d => d.DataTestEmployees)
                    .WithMany(p => p.DataTestQuestionEmployees)
                    .HasForeignKey(d => d.DataTestEmployeesId)
                    .HasConstraintName("data_test_question_employees_data_test_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.DataTestQuestionEmployees)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_question_employees_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.DataTestQuestionEmployees)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_question_employees_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprTestDirection)
                    .WithMany(p => p.DataTestQuestionEmployees)
                    .HasForeignKey(d => d.SprTestDirectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_question_employees_spr_test_direction_id_fkey");

                entity.HasOne(d => d.SprTestQuestion)
                    .WithMany(p => p.DataTestQuestionEmployees)
                    .HasForeignKey(d => d.SprTestQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_question_employees_spr_question_id_fkey");
            });

            modelBuilder.Entity<DataTestQuestionEmployeesAnswer>(entity =>
            {
                entity.ToTable("data_test_question_employees_answer");

                entity.HasComment("Ответы к вопросам отвеченных сотдурниками");

                entity.HasIndex(e => e.Id, "data_test_question_employees_answer_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DataTestQuestionEmployeesId, "data_test_question_employees_answer_idx2");

                entity.HasIndex(e => e.SprTestAnswerId, "data_test_question_employees_answer_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Answer)
                    .HasMaxLength(1000)
                    .HasColumnName("answer")
                    .HasComment("Ответ");

                entity.Property(e => e.DataTestQuestionEmployeesId)
                    .HasColumnName("data_test_question_employees_id")
                    .HasComment("Вопросы к сотруднику");

                entity.Property(e => e.DateAnswer)
                    .HasColumnName("date_answer")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата и время ответа");

                entity.Property(e => e.IsTrue)
                    .HasColumnName("is_true")
                    .HasComment("Правильность данного варианта ответа");

                entity.Property(e => e.SprTestAnswerId)
                    .HasColumnName("spr_test_answer_id")
                    .HasComment("Ответ");

                entity.HasOne(d => d.DataTestQuestionEmployees)
                    .WithMany(p => p.DataTestQuestionEmployeesAnswers)
                    .HasForeignKey(d => d.DataTestQuestionEmployeesId)
                    .HasConstraintName("data_test_question_employees__data_test_question_employees_fkey");

                entity.HasOne(d => d.SprTestAnswer)
                    .WithMany(p => p.DataTestQuestionEmployeesAnswers)
                    .HasForeignKey(d => d.SprTestAnswerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("data_test_question_employees_answer_spr_test_answer_id_fkey");
            });

            modelBuilder.Entity<DeleteComment>(entity =>
            {
                entity.ToTable("delete_comment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt");
            });

            modelBuilder.Entity<ErrorMessage>(entity =>
            {
                entity.ToTable("error_messages");

                entity.HasComment("Сообщения об ошибках");

                entity.HasIndex(e => e.ErrorCode, "error_messages_error_code_idx");

                entity.HasIndex(e => e.Id, "error_messages_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesFio, e.Date }, "error_messages_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата ");

                entity.Property(e => e.ErrorCode)
                    .HasMaxLength(24)
                    .HasColumnName("error_code")
                    .HasComment("Код ошибки");

                entity.Property(e => e.InnerException)
                    .HasColumnName("inner_exception")
                    .HasComment("Текст системной ошибки");

                entity.Property(e => e.Message)
                    .HasColumnName("message")
                    .HasComment("Текст сообщения");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasComment("Признак удаления");

                entity.Property(e => e.SprEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("spr_employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.StackTrace)
                    .HasColumnName("stack_trace")
                    .HasComment("Путь");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(100)
                    .HasColumnName("type_code")
                    .HasComment("Тип кода");
            });

            modelBuilder.Entity<FnsDebit>(entity =>
            {
                entity.ToTable("fns_debit");

                entity.HasIndex(e => e.Id, "fns_debit_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address")
                    .HasComment("адрес");

                entity.Property(e => e.DebitValue)
                    .HasPrecision(15, 2)
                    .HasColumnName("debit_value")
                    .HasComment("сумма долга");

                entity.Property(e => e.Inn)
                    .HasMaxLength(30)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.PayerName)
                    .HasMaxLength(50)
                    .HasColumnName("payer_name")
                    .HasComment("плательщик");

                entity.Property(e => e.TaxName)
                    .HasMaxLength(255)
                    .HasColumnName("tax_name")
                    .HasComment("Наименование налога");
            });

            modelBuilder.Entity<PgBuffercache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pg_buffercache");

                entity.Property(e => e.Bufferid).HasColumnName("bufferid");

                entity.Property(e => e.Isdirty).HasColumnName("isdirty");

                entity.Property(e => e.PinningBackends).HasColumnName("pinning_backends");

                entity.Property(e => e.Relblocknumber).HasColumnName("relblocknumber");

                entity.Property(e => e.Reldatabase)
                    .HasColumnType("oid")
                    .HasColumnName("reldatabase");

                entity.Property(e => e.Relfilenode)
                    .HasColumnType("oid")
                    .HasColumnName("relfilenode");

                entity.Property(e => e.Relforknumber).HasColumnName("relforknumber");

                entity.Property(e => e.Reltablespace)
                    .HasColumnType("oid")
                    .HasColumnName("reltablespace");

                entity.Property(e => e.Usagecount).HasColumnName("usagecount");
            });

            modelBuilder.Entity<PgStatStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pg_stat_statements");

                entity.Property(e => e.BlkReadTime).HasColumnName("blk_read_time");

                entity.Property(e => e.BlkWriteTime).HasColumnName("blk_write_time");

                entity.Property(e => e.Calls).HasColumnName("calls");

                entity.Property(e => e.Dbid)
                    .HasColumnType("oid")
                    .HasColumnName("dbid");

                entity.Property(e => e.LocalBlksDirtied).HasColumnName("local_blks_dirtied");

                entity.Property(e => e.LocalBlksHit).HasColumnName("local_blks_hit");

                entity.Property(e => e.LocalBlksRead).HasColumnName("local_blks_read");

                entity.Property(e => e.LocalBlksWritten).HasColumnName("local_blks_written");

                entity.Property(e => e.MaxTime).HasColumnName("max_time");

                entity.Property(e => e.MeanTime).HasColumnName("mean_time");

                entity.Property(e => e.MinTime).HasColumnName("min_time");

                entity.Property(e => e.Query).HasColumnName("query");

                entity.Property(e => e.Queryid).HasColumnName("queryid");

                entity.Property(e => e.Rows).HasColumnName("rows");

                entity.Property(e => e.SharedBlksDirtied).HasColumnName("shared_blks_dirtied");

                entity.Property(e => e.SharedBlksHit).HasColumnName("shared_blks_hit");

                entity.Property(e => e.SharedBlksRead).HasColumnName("shared_blks_read");

                entity.Property(e => e.SharedBlksWritten).HasColumnName("shared_blks_written");

                entity.Property(e => e.StddevTime).HasColumnName("stddev_time");

                entity.Property(e => e.TempBlksRead).HasColumnName("temp_blks_read");

                entity.Property(e => e.TempBlksWritten).HasColumnName("temp_blks_written");

                entity.Property(e => e.TotalTime).HasColumnName("total_time");

                entity.Property(e => e.Userid)
                    .HasColumnType("oid")
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.ToTable("refresh_tokens");

                entity.HasIndex(e => e.SprEmployeesId, "refresh_tokens_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ExpireTime)
                    .HasPrecision(6)
                    .HasColumnName("expire_time")
                    .HasComment("Дата и время до которой действителен токен обновления");

                entity.Property(e => e.RefreshToken1)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("refresh_token")
                    .HasComment("Токен обновления");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Идентификатор сотрудника");

                entity.Property(e => e.Used)
                    .HasColumnName("used")
                    .HasComment("Статус токена: использован или нет");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.RefreshTokens)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("refresh_tokens_spr_employees_id_fkey");
            });

            modelBuilder.Entity<SprAlert>(entity =>
            {
                entity.ToTable("spr_alert");

                entity.HasComment("Способы оповещения заявителей по услуге");

                entity.HasIndex(e => e.Id, "spr_services_alert_idx1");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.AlertName)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("alert_name")
                    .HasComment("ноименование способа оповещения");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");
            });

            modelBuilder.Entity<SprAlertEmployee>(entity =>
            {
                entity.ToTable("spr_alert_employee");

                entity.HasComment("Уведомления для сотрудников");

                entity.HasIndex(e => e.Id, "spr_alert_employee_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AlertName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("alert_name")
                    .HasComment("Текст уведомления");
            });

            modelBuilder.Entity<SprBlank>(entity =>
            {
                entity.ToTable("spr_blank");

                entity.HasComment("Справочник бланков");

                entity.HasIndex(e => e.Id, "spr_blank_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.BlankName)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("blank_name");
            });

            modelBuilder.Entity<SprCoverLetterTemplate>(entity =>
            {
                entity.ToTable("spr_cover_letter_template");

                entity.HasComment("Таблица хранения шаблонов сопроводительных писем сотрудников");

                entity.HasIndex(e => e.Id, "spr_cover_letter_template_id_idx")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "spr_cover_letter_template_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasComment("Время добавления записи");

                entity.Property(e => e.EmployeeFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employee_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.JsonData)
                    .HasColumnType("jsonb")
                    .HasColumnName("json_data")
                    .HasComment("Информация для письма");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Связь со справочником сотрудников");

                entity.Property(e => e.TemplateName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("template_name")
                    .HasComment("Шаблон письма");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprCoverLetterTemplates)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_cover_letter_template_spr_employees_id_fkey");
            });

            modelBuilder.Entity<SprDocument>(entity =>
            {
                entity.ToTable("spr_documents");

                entity.HasComment("справочник документов");

                entity.HasIndex(e => e.Id, "spr_documents_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DocumentDescription)
                    .HasColumnName("document_description")
                    .HasComment("описание документа");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(2500)
                    .HasColumnName("document_name")
                    .HasComment("наименование документа");

                entity.Property(e => e.DocumentSample)
                    .HasColumnName("document_sample")
                    .HasComment("образец документа");

                entity.Property(e => e.DocumentSpecification)
                    .HasMaxLength(2500)
                    .HasColumnName("document_specification")
                    .HasComment("требование к документу");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");
            });

            modelBuilder.Entity<SprDocumentCode>(entity =>
            {
                entity.ToTable("spr_document_code");

                entity.HasComment("Коды подразделений кто выдал документ");

                entity.HasIndex(e => e.Id, "spr_document_code_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.DocumentCode, "spr_document_code_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания названия");

                entity.Property(e => e.DocumentCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("document_code")
                    .HasComment("код документа");

                entity.Property(e => e.DocumentIssueBody)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_body")
                    .HasComment("кто выдал документ");
            });

            modelBuilder.Entity<SprDocumentCode2>(entity =>
            {
                entity.ToTable("spr_document_code_2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания названия");

                entity.Property(e => e.DocumentCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("document_code")
                    .HasComment("код документа");

                entity.Property(e => e.DocumentIssueBody)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_body")
                    .HasComment("кто выдал документ");
            });

            modelBuilder.Entity<SprDocumentIdentity>(entity =>
            {
                entity.ToTable("spr_document_identity");

                entity.HasComment("список документов удостоверяющих личность");

                entity.HasIndex(e => e.Id, "spr_document_identity_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("код документа");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("document_name")
                    .HasComment("наименование документа");

                entity.Property(e => e.DocumentNameSmall)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("document_name_small")
                    .HasComment("Краткое наименование документа");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");
            });

            modelBuilder.Entity<SprDocumentsSmevRequestJoin>(entity =>
            {
                entity.ToTable("spr_documents_smev_request_join");

                entity.HasComment("Список запросов СМЭВ к документу");

                entity.HasIndex(e => e.Id, "spr_documents_smev_request_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprDocumentsId, e.SprSmevRequestId }, "spr_documents_smev_request_join_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprDocumentsId)
                    .HasColumnName("spr_documents_id")
                    .HasComment("связь с документом, spr-documents id");

                entity.Property(e => e.SprSmevRequestId)
                    .HasColumnName("spr_smev_request_id")
                    .HasComment("связь с запросом, spr_smev_request id");

                entity.HasOne(d => d.SprDocuments)
                    .WithMany(p => p.SprDocumentsSmevRequestJoins)
                    .HasForeignKey(d => d.SprDocumentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_documents_smev_request_join_spr_documents_id_fkey");

                entity.HasOne(d => d.SprSmevRequest)
                    .WithMany(p => p.SprDocumentsSmevRequestJoins)
                    .HasForeignKey(d => d.SprSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_documents_smev_request_join_spr_smev_request_id_fkey");
            });

            modelBuilder.Entity<SprEmployee>(entity =>
            {
                entity.ToTable("spr_employees");

                entity.HasComment("справочник сотрудников\r\n-- Добавил поле employye_skill. 06.09.2019 Балахаев");

                entity.HasIndex(e => e.Id, "spr_employees_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.RowDel, "spr_employees_idx2");

                entity.HasIndex(e => e.EmployeeFio, "spr_employees_idx3");

                entity.HasIndex(e => e.EmployeeLogin, "spr_employees_idx4")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcRemoteWorkplaceId, "spr_employees_spr_employees_mfc_remote_workplace_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CertificateNumber)
                    .HasMaxLength(50)
                    .HasColumnName("certificate_number")
                    .HasComment("номер сертификата");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CountServices)
                    .HasColumnName("count_services")
                    .HasDefaultValueSql("0")
                    .HasComment("кол-во услуг на сотруднике");

                entity.Property(e => e.CountServicesDate)
                    .HasColumnType("date")
                    .HasColumnName("count_services_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата последней передачи услуги");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.Education)
                    .HasMaxLength(255)
                    .HasColumnName("education")
                    .HasComment("Образование");

                entity.Property(e => e.EmployeeDocBirthDate)
                    .HasColumnType("date")
                    .HasColumnName("employee_doc_birth_date")
                    .HasComment("дата рождения");

                entity.Property(e => e.EmployeeDocBirthPlace)
                    .HasMaxLength(255)
                    .HasColumnName("employee_doc_birth_place")
                    .HasComment("место рождения");

                entity.Property(e => e.EmployeeDocCode)
                    .HasMaxLength(30)
                    .HasColumnName("employee_doc_code")
                    .HasComment("код документа");

                entity.Property(e => e.EmployeeDocIssueBody)
                    .HasMaxLength(255)
                    .HasColumnName("employee_doc_issue_body")
                    .HasComment("место выдачи");

                entity.Property(e => e.EmployeeDocIssueDate)
                    .HasColumnType("date")
                    .HasColumnName("employee_doc_issue_date")
                    .HasComment("дата выдачи");

                entity.Property(e => e.EmployeeDocNumber)
                    .HasMaxLength(20)
                    .HasColumnName("employee_doc_number")
                    .HasComment("номер документа");

                entity.Property(e => e.EmployeeDocSerial)
                    .HasMaxLength(20)
                    .HasColumnName("employee_doc_serial")
                    .HasComment("серия документа");

                entity.Property(e => e.EmployeeEmail)
                    .HasMaxLength(70)
                    .HasColumnName("employee_email")
                    .HasComment("электронная почта");

                entity.Property(e => e.EmployeeFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("employee_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.EmployeeFoto)
                    .HasColumnName("employee_foto")
                    .HasComment("фото сотрудника");

                entity.Property(e => e.EmployeeInn)
                    .HasMaxLength(30)
                    .HasColumnName("employee_inn")
                    .HasComment("ИНН");

                entity.Property(e => e.EmployeeLogin)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("employee_login")
                    .HasComment("логин на вход");

                entity.Property(e => e.EmployeeMnemo)
                    .HasMaxLength(10)
                    .HasColumnName("employee_mnemo")
                    .HasComment("Табельный номер");

                entity.Property(e => e.EmployeePass)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employee_pass")
                    .HasComment("Пароль");

                entity.Property(e => e.EmployeePassHelp)
                    .HasMaxLength(100)
                    .HasColumnName("employee_pass_help")
                    .HasComment("подсказка к паролю");

                entity.Property(e => e.EmployeeSnils)
                    .HasMaxLength(30)
                    .HasColumnName("employee_snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.EmployeeTel)
                    .HasMaxLength(30)
                    .HasColumnName("employee_tel")
                    .HasComment("номер телефона");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployyeSkill)
                    .HasColumnName("employye_skill")
                    .HasDefaultValueSql("1")
                    .HasComment("Мастерство сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprEmployeesMfcRemoteWorkplaceId)
                    .HasColumnName("spr_employees_mfc_remote_workplace_id")
                    .HasComment("Отдаленные рабочие места МФЦ");

                entity.Property(e => e.WorkExperience)
                    .HasMaxLength(255)
                    .HasColumnName("work_experience")
                    .HasComment("Стаж работы");

                entity.HasOne(d => d.SprEmployeesMfcRemoteWorkplace)
                    .WithMany(p => p.SprEmployees)
                    .HasForeignKey(d => d.SprEmployeesMfcRemoteWorkplaceId)
                    .HasConstraintName("spr_employees_spr_employees_mfc_remote_workplace_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesAuthorizationLog>(entity =>
            {
                entity.ToTable("spr_employees_authorization_log");

                entity.HasComment("Лог авторизаций");

                entity.HasIndex(e => e.Id, "spr_employees_authorization_log_id_idx");

                entity.HasIndex(e => e.Id, "spr_employees_authorization_log_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.LogInDate, "spr_employees_authorization_log_log_in_date_idx");

                entity.HasIndex(e => e.LogInIpCallCenter, "spr_employees_authorization_log_log_in_ip_call_center_idx");

                entity.HasIndex(e => e.LogInIp, "spr_employees_authorization_log_log_in_ip_idx");

                entity.HasIndex(e => e.SprEmployeesId, "spr_employees_authorization_log_spr_employees_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.LogInBrowserName)
                    .HasMaxLength(70)
                    .HasColumnName("log_in_browser_name")
                    .HasComment("имя браузера");

                entity.Property(e => e.LogInBrowserVersion)
                    .HasMaxLength(20)
                    .HasColumnName("log_in_browser_version")
                    .HasComment("версия браузера");

                entity.Property(e => e.LogInDate)
                    .HasPrecision(0)
                    .HasColumnName("log_in_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата входа");

                entity.Property(e => e.LogInIp)
                    .HasMaxLength(20)
                    .HasColumnName("log_in_ip")
                    .HasComment("ip сотрудника");

                entity.Property(e => e.LogInIpCallCenter)
                    .HasMaxLength(255)
                    .HasColumnName("log_in_ip_call_center")
                    .HasComment("IP адрес сервера колцентра(Для джитси)");

                entity.Property(e => e.LogInProvider)
                    .HasMaxLength(255)
                    .HasColumnName("log_in_provider")
                    .HasComment("как был произведет вход");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника, spr_employees id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesAuthorizationLogs)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_authorization_log_spr_employees_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesExecution>(entity =>
            {
                entity.ToTable("spr_employees_execution");

                entity.HasComment("Статус исполнения услуг сотрудниками");

                entity.HasIndex(e => e.Id, "spr_employees_execution_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.DateStart, e.DateStop }, "spr_employees_execution_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания");

                entity.Property(e => e.EmployeesExecution)
                    .HasColumnName("employees_execution")
                    .HasComment("исполняет услуги ли нет");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата фактического ввода");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesMfcJoinId)
                    .HasColumnName("spr_employees_mfc_join_id")
                    .HasComment("Связь между мфц и сотрудником");

                entity.HasOne(d => d.SprEmployeesMfcJoin)
                    .WithMany(p => p.SprEmployeesExecutions)
                    .HasForeignKey(d => d.SprEmployeesMfcJoinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_execution_spr_employees_mfc_join_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesExecutorRole>(entity =>
            {
                entity.ToTable("spr_employees_executor_role");

                entity.HasComment("Роли исполнителя к сотруднику");

                entity.HasIndex(e => e.SprEmployeesId, "spr_employees_executor_role_spr_employees_id_idx");

                entity.HasIndex(e => e.SprExecutorRoleId, "spr_employees_executor_role_spr_executor_role_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления");

                entity.Property(e => e.EmployeesNameAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_name_add")
                    .HasComment("Кто добавил");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.SprExecutorRoleId)
                    .HasColumnName("spr_executor_role_id")
                    .HasComment("Роль исполнителя");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesExecutorRoles)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_executor_role_spr_employees_id_fkey");

                entity.HasOne(d => d.SprExecutorRole)
                    .WithMany(p => p.SprEmployeesExecutorRoles)
                    .HasForeignKey(d => d.SprExecutorRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_executor_role_spr_executor_role_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesFile>(entity =>
            {
                entity.ToTable("spr_employees_file");

                entity.HasComment("Список файлов к сотрудникам");

                entity.HasIndex(e => e.Id, "spr_employees_file_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasPrecision(6)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата ввода");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("расширение файла");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("file_name")
                    .HasComment("имя файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("размер файла");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesFileFolderId)
                    .HasColumnName("spr_employees_file_folder_id")
                    .HasComment("связь с папкой, spr_employee_file_folder id");

                entity.HasOne(d => d.SprEmployeesFileFolder)
                    .WithMany(p => p.SprEmployeesFiles)
                    .HasForeignKey(d => d.SprEmployeesFileFolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_file_spr_employees_file_folder_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesFileFolder>(entity =>
            {
                entity.ToTable("spr_employees_file_folder");

                entity.HasComment("Папки к сотрудникам с файлами");

                entity.HasIndex(e => e.Id, "spr_employees_file_folder_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "spr_employees_file_folder_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первияный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateEnter)
                    .HasColumnName("date_enter")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FolderName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("folder_name")
                    .HasComment("наименование папки");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("id сотрудника, spr_employees id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesFileFolders)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_file_folder_spr_employees_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesJobPo>(entity =>
            {
                entity.ToTable("spr_employees_job_pos");

                entity.HasComment("справочник должностей");

                entity.HasIndex(e => e.Id, "spr_employees_job_pos_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.JobPosName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.Sorting)
                    .HasColumnName("sorting_")
                    .HasComment("для сортировки в отчетах по зарплате");
            });

            modelBuilder.Entity<SprEmployeesJobPosCombination>(entity =>
            {
                entity.ToTable("spr_employees_job_pos_combination");

                entity.HasComment("Совмещение должностей сотрудниками");

                entity.HasIndex(e => e.Id, "spr_employees_job_pos_combination_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.SprEmployeesJobPosId }, "spr_employees_job_pos_combination_idx2");

                entity.HasIndex(e => e.Id, "spr_employees_job_pos_combination_uniq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата действия должности");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания действия должности");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesIntensity)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_intensity")
                    .HasComment("интенсивность ");

                entity.Property(e => e.EmployeesSalary)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_salary")
                    .HasComment("оклад сотрудника которого совмещают");

                entity.Property(e => e.EmployeesStake)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_stake")
                    .HasComment("ставка сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата установки");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто установил,ФИО");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью, spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcJoinId)
                    .HasColumnName("spr_employees_mfc_join_id")
                    .HasComment("связь с мфц сотрудника,spr_employees_mfc_join id");

                entity.Property(e => e.SprEmployeesRoleId)
                    .HasColumnName("spr_employees_role_id")
                    .HasComment("связь с ролью сотрудника , spr_employees_role id");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.SprEmployeesJobPosCombinations)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_job_pos_combination_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcJoin)
                    .WithMany(p => p.SprEmployeesJobPosCombinations)
                    .HasForeignKey(d => d.SprEmployeesMfcJoinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_job_pos_combinatio_spr_employees_mfc_join_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesJobPosFine>(entity =>
            {
                entity.ToTable("spr_employees_job_pos_fine");

                entity.HasComment("Сумма штрафов за один день просрочки по должностям");

                entity.HasIndex(e => e.Id, "spr_employees_job_pos_fine_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesJobPosId, "spr_employees_job_pos_fine_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("Дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("Дата окончания");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FineSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("fine_sum")
                    .HasComment("сумма штрафа за один день");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью , spr_employees_job_pos id");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.SprEmployeesJobPosFines)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_job_pos_fine_spr_employees_job_pos_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesJobPosSalary>(entity =>
            {
                entity.ToTable("spr_employees_job_pos_salary");

                entity.HasComment("Оклады к должности");

                entity.HasIndex(e => e.Id, "spr_employees_job_pos_salary_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CoefficientJobPos)
                    .HasPrecision(15, 2)
                    .HasColumnName("coefficient_job_pos")
                    .HasComment("Некий коэфицент должности");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CostMinute)
                    .HasPrecision(15, 2)
                    .HasColumnName("cost_minute")
                    .HasComment("стоимость минуты для должности");

                entity.Property(e => e.CostNormal)
                    .HasPrecision(15, 2)
                    .HasColumnName("cost_normal")
                    .HasComment("Норма стоимости ");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата  с которой действует оклад");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания действия рклада");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesIntensity)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_intensity")
                    .HasComment("интенсивность, напряженность");

                entity.Property(e => e.EmployeesRatio)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_ratio")
                    .HasComment("коэфицент");

                entity.Property(e => e.EmployeesSalary)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_salary")
                    .HasComment("оклад ");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с дожностью spr_employees_job_pos id");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.SprEmployeesJobPosSalaries)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_job_pos_salary_spr_emloyees_job_pos_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesMessageTemplate>(entity =>
            {
                entity.ToTable("spr_employees_message_template");

                entity.HasComment("Шаблоны сообщений по сотрудникам");

                entity.HasIndex(e => e.Id, "spr_employees_message_template_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesId, "spr_employees_message_template_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.MessageText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("message_text")
                    .HasComment("текст сообщения");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.Sort)
                    .HasColumnName("sort")
                    .HasDefaultValueSql("1")
                    .HasComment("Приоритет");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником?spr_employees  id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesMessageTemplates)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .HasConstraintName("spr_employees_message_template_spr_employees_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesMfc>(entity =>
            {
                entity.ToTable("spr_employees_mfc");

                entity.HasComment("справочник МФЦ");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.MfcMnemo, "spr_employees_mfc_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.MfcEpguId, "spr_employees_mfc_idx3")
                    .IsUnique();

                entity.HasIndex(e => e.MdmUid, "spr_employees_mfc_idx4");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EsiaOperatorSnils)
                    .HasMaxLength(20)
                    .HasColumnName("esia_operator_snils")
                    .HasComment("СНИЛС директора МФЦ для запросов ЕСИА");

                entity.Property(e => e.GeographicCoordinate)
                    .HasMaxLength(300)
                    .HasColumnName("geographic_coordinate")
                    .HasComment("широта долгота");

                entity.Property(e => e.HeadOperatorHall)
                    .HasColumnName("head_operator_hall")
                    .HasComment("есть начальник опер зала или нет в филиале, нужен для расчета зарплаты администратора");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsCallbackActive)
                    .HasColumnName("is_callback_active")
                    .HasComment("Активность сервиса обратного звонка для филиала МФЦ");

                entity.Property(e => e.MdmUid)
                    .HasMaxLength(255)
                    .HasColumnName("mdm_uid")
                    .HasComment("uid МФЦ в системе МДМ");

                entity.Property(e => e.MegalabsLogin)
                    .HasMaxLength(40)
                    .HasColumnName("megalabs_login")
                    .HasComment("Логин для шлюза смс рассылки");

                entity.Property(e => e.MegalabsPassword)
                    .HasMaxLength(40)
                    .HasColumnName("megalabs_password")
                    .HasComment("Пароль для шлюза смс рассылки");

                entity.Property(e => e.MegalabsSender)
                    .HasMaxLength(40)
                    .HasColumnName("megalabs_sender")
                    .HasComment("Имя отправителя СМС для Мегалабс");

                entity.Property(e => e.MfcAddress)
                    .HasMaxLength(100)
                    .HasColumnName("mfc_address")
                    .HasComment("адрес мфц");

                entity.Property(e => e.MfcCallServer)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_call_server")
                    .HasComment("сервер call центра");

                entity.Property(e => e.MfcCikId)
                    .HasMaxLength(20)
                    .HasColumnName("mfc_cik_id")
                    .HasComment("Идентификатор МФЦ в ЦИК (для ВС \"Вид сведений для приема через ЕПГУ и МФЦ заявлений о включении избирателя в список избирателей по месту нахождения в день голосования на выборах в Российской Федерации\"");

                entity.Property(e => e.MfcCikName)
                    .HasMaxLength(200)
                    .HasColumnName("mfc_cik_name")
                    .HasComment("Наименование МФЦ для ЦИК");

                entity.Property(e => e.MfcConvenience)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_convenience")
                    .HasComment("удобства в МФЦ");

                entity.Property(e => e.MfcCountPopulation)
                    .HasColumnName("mfc_count_population")
                    .HasComment("количество населения в населенном пункте в котором находиться мфц");

                entity.Property(e => e.MfcCountWindows)
                    .HasColumnName("mfc_count_windows")
                    .HasComment("количество окон в мфц");

                entity.Property(e => e.MfcEmail)
                    .HasMaxLength(70)
                    .HasColumnName("mfc_email")
                    .HasComment("официальная почта мфц");

                entity.Property(e => e.MfcEmailLogin)
                    .HasMaxLength(70)
                    .HasColumnName("mfc_email_login")
                    .HasComment("почта для рассылок мфц");

                entity.Property(e => e.MfcEmailPass)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_email_pass")
                    .HasComment("пароль на почту для рассылок");

                entity.Property(e => e.MfcEmailPort)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_email_port")
                    .HasComment("порт почты рассылок");

                entity.Property(e => e.MfcEmailServer)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_email_server")
                    .HasComment("сервер почты рассылок");

                entity.Property(e => e.MfcEpguId)
                    .HasMaxLength(20)
                    .HasColumnName("mfc_epgu_id")
                    .HasComment("Идентификатор МФЦ на ЕПГУ (интеграция с системой ЭОС Дело)");

                entity.Property(e => e.MfcEpguSmevId)
                    .HasMaxLength(32)
                    .HasColumnName("mfc_epgu_smev_id")
                    .HasComment("Идентификатор СМЭВ на ЕПГУ");

                entity.Property(e => e.MfcEsiaCentrId)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_esia_centr_id")
                    .HasComment("ЕСИА центр ID");

                entity.Property(e => e.MfcFrguId)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_frgu_id")
                    .HasComment("Идентификатор МФЦ ФРГУ");

                entity.Property(e => e.MfcHeadName)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_head_name")
                    .HasComment("Директор МФЦ");

                entity.Property(e => e.MfcInn)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_inn")
                    .HasComment("ИНН мфц");

                entity.Property(e => e.MfcKpp)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_kpp")
                    .HasComment("КПП МФЦ");

                entity.Property(e => e.MfcLogo)
                    .HasColumnName("mfc_logo")
                    .HasComment("логтип мфц");

                entity.Property(e => e.MfcLogoName)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_logo_name")
                    .HasDefaultValueSql("'mydocument'::character varying")
                    .HasComment("название логотипа");

                entity.Property(e => e.MfcMnemo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("mfc_mnemo")
                    .HasComment("мнемоника МФЦ");

                entity.Property(e => e.MfcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("mfc_name")
                    .HasComment("нименование мфц");

                entity.Property(e => e.MfcNameSmall)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("mfc_name_small")
                    .HasComment("краткое наименование мфц");

                entity.Property(e => e.MfcNum)
                    .HasMaxLength(10)
                    .HasColumnName("mfc_num")
                    .HasComment("номер мфц");

                entity.Property(e => e.MfcNumPfr)
                    .HasMaxLength(10)
                    .HasColumnName("mfc_num_pfr")
                    .HasComment("номер мфц для ПФР");

                entity.Property(e => e.MfcOgrn)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_ogrn")
                    .HasComment("ОГРН МФЦ");

                entity.Property(e => e.MfcOkato)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_okato")
                    .HasComment("окато мфц");

                entity.Property(e => e.MfcOktmo)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_oktmo")
                    .HasComment("ОКТМО МФЦ");

                entity.Property(e => e.MfcSchedule)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_schedule")
                    .HasComment("график работы мфц");

                entity.Property(e => e.MfcSkype)
                    .HasMaxLength(50)
                    .HasColumnName("mfc_skype")
                    .HasComment("скайп (бесплатная консультация юриста)");

                entity.Property(e => e.MfcTel)
                    .HasMaxLength(30)
                    .HasColumnName("mfc_tel")
                    .HasComment("номер телефона мфц");

                entity.Property(e => e.MfcTosp)
                    .HasMaxLength(500)
                    .HasColumnName("mfc_tosp")
                    .HasComment("перечень ТОСПов");

                entity.Property(e => e.MfcUrlQueueImage)
                    .HasColumnType("character varying")
                    .HasColumnName("mfc_url_queue_image")
                    .HasComment("Ссылка на картинку с очередью на сайте МФЦ РД");

                entity.Property(e => e.MfcVendorId)
                    .HasColumnName("mfc_vendor_id")
                    .HasComment("номер для ИАС МКГУ");

                entity.Property(e => e.MfcWebsite)
                    .HasMaxLength(70)
                    .HasColumnName("mfc_website")
                    .HasComment("сайт мфц");

                entity.Property(e => e.MinTrudRequestNum)
                    .HasColumnName("min_trud_request_num")
                    .HasDefaultValueSql("1")
                    .HasComment("Номер запроса для интеграции с Мин Трудом");

                entity.Property(e => e.MvdOpvMfcId)
                    .HasMaxLength(20)
                    .HasColumnName("mvd_opv_mfc_id")
                    .HasComment("Для загран паспорта");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasComment("Порядковый номер МФЦ");

                entity.Property(e => e.PfrMnemo)
                    .HasMaxLength(4)
                    .HasColumnName("pfr_mnemo")
                    .HasComment("удалить");

                entity.Property(e => e.PfrMnemoMfc)
                    .HasMaxLength(4)
                    .HasColumnName("pfr_mnemo_mfc")
                    .HasComment("мнемоника мфц для пенсионного фонда");

                entity.Property(e => e.QueueId)
                    .HasColumnName("queue_id")
                    .HasComment("id мфц в электронной очереди для загрузки данных о среднем времени ожидания");

                entity.Property(e => e.QueueIp)
                    .HasMaxLength(30)
                    .HasColumnName("queue_ip")
                    .HasComment("ip адрес сервера электронной очереди");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprEmployeesMfcTypeId)
                    .HasColumnName("spr_employees_mfc_type_id")
                    .HasComment("Тип мфц");

                entity.Property(e => e.StructuralSubdivision)
                    .HasColumnName("structural_subdivision")
                    .HasDefaultValueSql("false")
                    .HasComment("структурное подразделение: да/нет");

                entity.HasOne(d => d.SprEmployeesMfcType)
                    .WithMany(p => p.SprEmployeesMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcTypeId)
                    .HasConstraintName("spr_employees_mfc_spr_employees_mfc_type_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesMfcCurator>(entity =>
            {
                entity.ToTable("spr_employees_mfc_curator");

                entity.HasComment("Справочник кураторов мфц");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_curator_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesId, e.DateStart, e.DateStop }, "spr_employees_mfc_curator_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата с которой действует куратор в этом мфц, вы бирает сотрудник при вводе");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания действий куратора в этом мфц");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("наименование мфц");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("фатическая дата и время  вввода");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто занес запись");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesMfcCurators)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_curator_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprEmployeesMfcCurators)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_curator_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesMfcFtp>(entity =>
            {
                entity.ToTable("spr_employees_mfc_ftp");

                entity.HasComment("справочник серверов FTP для МФЦ");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_ftp_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.MfcFtpServer, "spr_employees_mfc_ftp_mfc_ftp_server_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.MfcFtpFolder)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("mfc_ftp_folder")
                    .HasComment("папка на FTP");

                entity.Property(e => e.MfcFtpLogin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("mfc_ftp_login")
                    .HasComment("логин на FTP");

                entity.Property(e => e.MfcFtpPass)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("mfc_ftp_pass")
                    .HasComment("пароль на FTP");

                entity.Property(e => e.MfcFtpServer)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("mfc_ftp_server")
                    .HasComment("сервер FTP");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время установки FTP");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("ФИО сотрудника установившего FTP");
            });

            modelBuilder.Entity<SprEmployeesMfcFtpJoin>(entity =>
            {
                entity.ToTable("spr_employees_mfc_ftp_join");

                entity.HasComment("справочник связей между мфц и FTP серверами");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_ftp_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.SprEmployeesMfcFtpId }, "spr_employees_mfc_ftp_join_idx2");

                entity.HasIndex(e => e.SprEmployeesMfcFtpId, "spr_employees_mfc_ftp_join_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время установки");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("фио сотрудника , кто установил FTP");

                entity.Property(e => e.SprEmployeesMfcFtpId)
                    .HasColumnName("spr_employees_mfc_ftp_id")
                    .HasComment("связь с FTP, spr_employees_mfc_ftp id");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("свзяь с мфц, spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfcFtp)
                    .WithMany(p => p.SprEmployeesMfcFtpJoins)
                    .HasForeignKey(d => d.SprEmployeesMfcFtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_ftp_join_spr_employees_mfc_ftp_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprEmployeesMfcFtpJoins)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_ftp_join_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesMfcJoin>(entity =>
            {
                entity.ToTable("spr_employees_mfc_join");

                entity.HasComment("Связь между мфц и сотрудником");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateStart, e.DateStop }, "spr_employees_mfc_join_idx2");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesMfcId, e.DateStart, e.DateStop }, "spr_employees_mfc_join_idx3");

                entity.HasIndex(e => new { e.SprEmployeesMfcId, e.DateStart, e.DateStop, e.SprEmployeesId }, "spr_employees_mfc_join_idx4");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_join_unq1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesId, e.DateStart }, "spr_employees_mfc_join_unq2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комменатрий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания");

                entity.Property(e => e.EmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio")
                    .HasComment("ФИО сотрудника");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(100)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Нименование МФЦ");

                entity.Property(e => e.EmployeesStake)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_stake")
                    .HasComment("удалить");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("удалить");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesMfcJoins)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_join_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.SprEmployeesMfcJoins)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .HasConstraintName("spr_employees_mfc_join_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprEmployeesMfcJoins)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_join_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesMfcRemoteWorkplace>(entity =>
            {
                entity.ToTable("spr_employees_mfc_remote_workplace");

                entity.HasComment("Отдаленные рабочие места МФЦ");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_remote_workplace_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesMfcId, "spr_employees_mfc_remote_workplace_idx2");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_remote_workplace_uniq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesMfcName)
                    .HasMaxLength(500)
                    .HasColumnName("employees_mfc_name")
                    .HasComment("Наименование МФЦ");

                entity.Property(e => e.FrguCode)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_code")
                    .HasComment("Код ФРГУ");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.MdmUuid)
                    .HasColumnName("mdm_uuid")
                    .HasComment("Идентификатор в системе МДМ");

                entity.Property(e => e.MrsCode)
                    .HasMaxLength(32)
                    .HasColumnName("mrs_code")
                    .HasComment("Код МРС");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(32)
                    .HasColumnName("oktmo")
                    .HasComment("ОКТМО");

                entity.Property(e => e.RemoteWorkplaceName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("remote_workplace_name")
                    .HasComment("наименование отдаленного рабочего места");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprEmployeesMfcRemoteWorkplaces)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_mfc_remote_workplace_fk");
            });

            modelBuilder.Entity<SprEmployeesMfcType>(entity =>
            {
                entity.ToTable("spr_employees_mfc_type");

                entity.HasComment("Тип мфц");

                entity.HasIndex(e => e.Id, "spr_employees_mfc_type_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("type_name")
                    .HasComment("Наименование типа");
            });

            modelBuilder.Entity<SprEmployeesRole>(entity =>
            {
                entity.ToTable("spr_employees_role");

                entity.HasComment("справочник ролей");

                entity.HasIndex(e => e.Id, "spr_employees_role_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("role_name")
                    .HasComment("наименование роли");
            });

            modelBuilder.Entity<SprEmployeesRoleJoin>(entity =>
            {
                entity.ToTable("spr_employees_role_join");

                entity.HasComment("справочник связей между сотрудниками и ролями");

                entity.HasIndex(e => e.Id, "spr_employees_role_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.SprEmployeesRoleId, e.DateStart, e.DateStop }, "spr_employees_role_join_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.DateStart, e.DateStop }, "spr_employees_role_join_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время установки ");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто установил роль, ФИО");

                entity.Property(e => e.SprEmployeesMfcJoinId)
                    .HasColumnName("spr_employees_mfc_join_id")
                    .HasComment("связь с мфц сотрудника, spr_employees_mfc_join id");

                entity.Property(e => e.SprEmployeesRoleId)
                    .HasColumnName("spr_employees_role_id")
                    .HasComment("связь с ролью, spr_employees_role id");

                entity.HasOne(d => d.SprEmployeesMfcJoin)
                    .WithMany(p => p.SprEmployeesRoleJoins)
                    .HasForeignKey(d => d.SprEmployeesMfcJoinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_role_join_spr_employees_mfc_join_id_fkey");

                entity.HasOne(d => d.SprEmployeesRole)
                    .WithMany(p => p.SprEmployeesRoleJoins)
                    .HasForeignKey(d => d.SprEmployeesRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_role_join_spr_employees_role_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesSalary>(entity =>
            {
                entity.ToTable("spr_employees_salary");

                entity.HasComment("Оклады сотрудников");

                entity.HasIndex(e => e.Id, "spr_employees_salary_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.DateStart, e.DateStop }, "spr_employees_salary_idx2");

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.SprEmployeesJobPosId, e.DateStart, e.DateStop }, "spr_employees_salary_idx3")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CostMinute)
                    .HasPrecision(15, 2)
                    .HasColumnName("cost_minute")
                    .HasComment("стоимость минуты");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EmployeesIntensity)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_intensity")
                    .HasComment("интенсивность");

                entity.Property(e => e.EmployeesJobPosName)
                    .HasColumnType("character varying")
                    .HasColumnName("employees_job_pos_name")
                    .HasComment("наименование должности");

                entity.Property(e => e.EmployeesSalary)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_salary")
                    .HasComment("оклад");

                entity.Property(e => e.EmployeesStake)
                    .HasPrecision(15, 2)
                    .HasColumnName("employees_stake")
                    .HasComment("ставка сотрудника");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должностью, spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesMfcJoinId)
                    .HasColumnName("spr_employees_mfc_join_id")
                    .HasComment("связь с мфц, spr_employees_mfc_join id");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.SprEmployeesSalaries)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_salary_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfcJoin)
                    .WithMany(p => p.SprEmployeesSalaries)
                    .HasForeignKey(d => d.SprEmployeesMfcJoinId)
                    .HasConstraintName("spr_employees_salary_spr_employees_mfc_join_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesStatus>(entity =>
            {
                entity.ToTable("spr_employees_status");

                entity.HasComment("статусы сотрудника");

                entity.HasIndex(e => e.Id, "spr_employees_status_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SortId)
                    .HasColumnName("sort_id")
                    .HasComment("Сортировка");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("status_name")
                    .HasComment("наименование статуса");
            });

            modelBuilder.Entity<SprEmployeesStatusJoin>(entity =>
            {
                entity.ToTable("spr_employees_status_join");

                entity.HasComment("сваязь статусов и сотрудников");

                entity.HasIndex(e => e.Id, "spr_employees_status_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.DateStart, e.DateStop, e.SprEmployeesStatusId }, "spr_employees_status_join_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "spr_employees_status_join_unq1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprEmployeesMfcJoinId, e.SprEmployeesStatusId, e.DateStart }, "spr_employees_status_join_unq2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата установки");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто установил");

                entity.Property(e => e.SprEmployeesMfcJoinId)
                    .HasColumnName("spr_employees_mfc_join_id")
                    .HasComment("связь с мфц сотрудника, spr_employees_mfc_join id");

                entity.Property(e => e.SprEmployeesStatusId)
                    .HasColumnName("spr_employees_status_id")
                    .HasComment("связь со статусом, spr_employees_status id");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(70)
                    .HasColumnName("status_name")
                    .HasComment("наименование статуса");

                entity.HasOne(d => d.SprEmployeesMfcJoin)
                    .WithMany(p => p.SprEmployeesStatusJoins)
                    .HasForeignKey(d => d.SprEmployeesMfcJoinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_status_join_spr_employees_mfc_join_id_fkey");

                entity.HasOne(d => d.SprEmployeesStatus)
                    .WithMany(p => p.SprEmployeesStatusJoins)
                    .HasForeignKey(d => d.SprEmployeesStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_status_join_spr_employees_status_id_fkey");
            });

            modelBuilder.Entity<SprEmployeesWorkingTime>(entity =>
            {
                entity.ToTable("spr_employees_working_time");

                entity.HasComment("Статусы рабочего времени");

                entity.HasIndex(e => e.Id, "spr_employees_working_time_idx1");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Mnemo)
                    .HasMaxLength(10)
                    .HasColumnName("mnemo")
                    .HasComment("мнемоника");

                entity.Property(e => e.Sorting)
                    .HasColumnName("sorting_")
                    .HasComment("поле сортировки");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("status_name")
                    .HasComment("наименование статуса");
            });

            modelBuilder.Entity<SprEmployeesWorkingTimeJoin>(entity =>
            {
                entity.ToTable("spr_employees_working_time_join");

                entity.HasComment("Табель учета рабочего времени");

                entity.HasIndex(e => e.Date, "spr_employees_working_time_join_date__idx");

                entity.HasIndex(e => e.Id, "spr_employees_working_time_join_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "spr_employees_working_time_join_idx1");

                entity.HasIndex(e => new { e.SprEmployeesId, e.SprEmployeesWorkingTimeId, e.Date }, "spr_employees_working_time_join_idx2");

                entity.HasIndex(e => e.SprEmployeesWorkingTimeId, "spr_employees_working_time_join_idx3");

                entity.HasIndex(e => e.SetDate, "spr_employees_working_time_join_set_date_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date_")
                    .HasComment("дата статуса");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время фактического добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("фио сотрудника");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("связь с сотрудником, spr_employees id");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("связь с должнотью , spr_employees_job_pos id");

                entity.Property(e => e.SprEmployeesJobPosName)
                    .HasMaxLength(300)
                    .HasColumnName("spr_employees_job_pos_name")
                    .HasComment("название должности");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с spr_employees_mfc");

                entity.Property(e => e.SprEmployeesMfcJoinId)
                    .HasColumnName("spr_employees_mfc_join_id")
                    .HasComment("связь с mfc_join");

                entity.Property(e => e.SprEmployeesSalaryId)
                    .HasColumnName("spr_employees_salary_id")
                    .HasComment("связь с spr_employees_salary");

                entity.Property(e => e.SprEmployeesWorkingTimeId)
                    .HasColumnName("spr_employees_working_time_id")
                    .HasComment("связь с статусом, spr_employees_working_time id");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.SprEmployeesWorkingTimeJoins)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .HasConstraintName("spr_employees_working_time_join_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesWorkingTime)
                    .WithMany(p => p.SprEmployeesWorkingTimeJoins)
                    .HasForeignKey(d => d.SprEmployeesWorkingTimeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_employees_working_time_jo_spr_employees_working_time_i_fkey");
            });

            modelBuilder.Entity<SprExecutorRole>(entity =>
            {
                entity.ToTable("spr_executor_role");

                entity.HasComment("Справочник Роли исполнителя");

                entity.HasIndex(e => e.Id, "spr_executor_role_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления");

                entity.Property(e => e.EmployeesNameAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_name_add")
                    .HasComment("Кто добавил");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("role_name")
                    .HasComment("Наименование роли");
            });

            modelBuilder.Entity<SprFeedbackQuestionType>(entity =>
            {
                entity.ToTable("spr_feedback_question_type");

                entity.HasComment("Типы вопрос от сотрудников");

                entity.HasIndex(e => e.Id, "spr_feedback_question_type_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("type_name")
                    .HasComment("Наименование типа");
            });

            modelBuilder.Entity<SprForm>(entity =>
            {
                entity.ToTable("spr_forms");

                entity.HasComment("Справочник бланков");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(500)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.FormsName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("forms_name")
                    .HasComment("Наименование бланков");
            });

            modelBuilder.Entity<SprGroupParametr>(entity =>
            {
                entity.ToTable("spr_group_parametrs");

                entity.HasComment("Справочник групп параметров.");

                entity.HasIndex(e => e.GroupName, "spr_group_parametrs_group_name_key")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "spr_group_parametrs_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("nextval('spr_group_parametrs_seq'::regclass)")
                    .HasComment("id");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("Комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(0)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("Дата и время изменение записи");

                entity.Property(e => e.EmployeesFioAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_add")
                    .HasComment("ФИО добавившего запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("ФИО сотрудника изменившего запись");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("group_name")
                    .HasComment("Наименование группы");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("IP адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("IP адрес изменившего запись");

                entity.Property(e => e.ParametrMask)
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mask")
                    .HasComment("Маска ввода параметра");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("Признак удаления (1 - Запись удалена, 2 - Запись не удалена)");

                entity.Property(e => e.SortField)
                    .HasColumnName("sort_field")
                    .HasComment("Поле для сортировки");
            });

            modelBuilder.Entity<SprGroupParametrsJoin>(entity =>
            {
                entity.ToTable("spr_group_parametrs_join");

                entity.HasComment("связка группы с параметром");

                entity.HasIndex(e => e.Id, "spr_group_parametrs_join_id_idx")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("nextval('spr_group_parametrs_join_seq'::regclass)")
                    .HasComment("ID");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("Комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(0)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("('now'::text)::timestamp(3) with time zone")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("Дата и время изменение записи");

                entity.Property(e => e.EmployeesFioAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_add")
                    .HasComment("ФИО добавившего запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("ФИО сотрудника изменившего запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("IP адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("IP адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("Признак удаления (1 - Запись удалена, 2 - Запись не удалена)");

                entity.Property(e => e.SprGroupParametrsId)
                    .HasColumnName("spr_group_parametrs_id")
                    .HasComment("Связь с таблицей spr_group_parametrs_id, Поле - ID");

                entity.Property(e => e.SprParametrsId)
                    .HasColumnName("spr_parametrs_id")
                    .HasComment("Связь с таблицей spr_parametrs_id, Поле - ID");

                entity.HasOne(d => d.SprGroupParametrs)
                    .WithMany(p => p.SprGroupParametrsJoins)
                    .HasForeignKey(d => d.SprGroupParametrsId)
                    .HasConstraintName("spr_group_parametrs_join_spr_group_parametrs_id_fkey");

                entity.HasOne(d => d.SprParametrs)
                    .WithMany(p => p.SprGroupParametrsJoins)
                    .HasForeignKey(d => d.SprParametrsId)
                    .HasConstraintName("spr_group_parametrs_join_spr_parametrs_id_fkey");
            });

            modelBuilder.Entity<SprIasMkguCategory>(entity =>
            {
                entity.ToTable("spr_ias_mkgu_category");

                entity.HasComment("Источники оценок ИАС МКГУ");

                entity.HasIndex(e => e.Id, "spr_ias_mkgu_category_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("category_name")
                    .HasComment("Наименование категории");
            });

            modelBuilder.Entity<SprIasMkguIndicator>(entity =>
            {
                entity.ToTable("spr_ias_mkgu_indicator");

                entity.HasComment("Идентификатор оцениваемого критерия (показателя) ИАС МКГУ");

                entity.HasIndex(e => e.Id, "spr_ias_mkgu_indicator_idx1");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.IndicatorName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("indicator_name")
                    .HasComment("Наименование индикатора");
            });

            modelBuilder.Entity<SprIasMkguQuestion>(entity =>
            {
                entity.ToTable("spr_ias_mkgu_question");

                entity.HasComment("Вопросы ИАС МКГУ для терминала");

                entity.HasIndex(e => e.Id, "spr_ias_mkgu_question_idx")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("question")
                    .HasComment("вопрос");
            });

            modelBuilder.Entity<SprIasMkguQuestionAnswer>(entity =>
            {
                entity.ToTable("spr_ias_mkgu_question_answer");

                entity.HasComment("Варианты ответов на вопросы ИАС МКГУ для терминалов");

                entity.HasIndex(e => e.Id, "spr_ias_mkgu_question_answer_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprIasMkguQuestionId, "spr_ias_mkgu_question_answer_idx2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Answer)
                    .HasMaxLength(255)
                    .HasColumnName("answer")
                    .HasComment("полный ответ");

                entity.Property(e => e.AnswerRating)
                    .HasColumnName("answer_rating")
                    .HasComment("оценка по 5-ти бальной шкале");

                entity.Property(e => e.AnswerSmall)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("answer_small")
                    .HasComment("короткий ответ");

                entity.Property(e => e.SprIasMkguQuestionId)
                    .HasColumnName("spr_ias_mkgu_question_id")
                    .HasComment("связь с вопросом, spr_ias_mkgu_question  id");

                entity.HasOne(d => d.SprIasMkguQuestion)
                    .WithMany(p => p.SprIasMkguQuestionAnswers)
                    .HasForeignKey(d => d.SprIasMkguQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_ias_mkgu_question_answer_spr_ias_mkgu_question_id_fkey");
            });

            modelBuilder.Entity<SprList>(entity =>
            {
                entity.ToTable("spr_lists");

                entity.HasComment("Таблица хранения списков к доп параметрам");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.ListName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("list_name")
                    .HasComment("Наименование списка");
            });

            modelBuilder.Entity<SprListsValue>(entity =>
            {
                entity.ToTable("spr_lists_values");

                entity.HasComment("Таблица хранения значений списков");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Key)
                    .HasColumnName("key")
                    .HasComment("Ключ");

                entity.Property(e => e.SprListsId)
                    .HasColumnName("spr_lists_id")
                    .HasComment("Связь со списком");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("value")
                    .HasComment("Значение");

                entity.HasOne(d => d.SprLists)
                    .WithMany(p => p.SprListsValues)
                    .HasForeignKey(d => d.SprListsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_lists_values_spr_lists_id_fkey");
            });

            modelBuilder.Entity<SprMdmObjectAttribute>(entity =>
            {
                entity.ToTable("spr_mdm_object_attribute");

                entity.HasComment("Справочник аттрибутов объектов для отправки в МДМ.");

                entity.HasIndex(e => e.SprMdmObjectTypeId, "fki_spr_mdm_object_attribute_type_fk");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Идентификатор аттрибута.");

                entity.Property(e => e.IsObjectUuid)
                    .HasColumnName("is_object_uuid")
                    .HasComment("Является ли значение аттрибута UUID его объекта.");

                entity.Property(e => e.ObjectAttributeMnemo)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("object_attribute_mnemo")
                    .HasComment("Мнемоника аттрибута объекта МДМ.");

                entity.Property(e => e.ObjectAttributeName)
                    .HasMaxLength(200)
                    .HasColumnName("object_attribute_name")
                    .HasComment("Наименовение аттрибута объекта МДМ.");

                entity.Property(e => e.ObjectAttributeRegex)
                    .HasMaxLength(150)
                    .HasColumnName("object_attribute_regex")
                    .HasComment("Правило проверки значения аттрибута по Regex.");

                entity.Property(e => e.SprMdmObjectTypeId)
                    .HasColumnName("spr_mdm_object_type_id")
                    .HasComment("Ссылка на тип объекта МДМ, которому принадлежит аттрибут.");

                entity.HasOne(d => d.SprMdmObjectType)
                    .WithMany(p => p.SprMdmObjectAttributes)
                    .HasForeignKey(d => d.SprMdmObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_mdm_object_attribute_spr_mdm_object_type_id_fkey");
            });

            modelBuilder.Entity<SprMdmObjectAttributeV2>(entity =>
            {
                entity.ToTable("spr_mdm_object_attribute_v2");

                entity.HasComment("Справочник аттрибутов объектов для отправки в МДМ.");

                entity.HasIndex(e => e.SprMdmObjectTypeV2Id, "spr_mdm_object_attribute_v2_spr_mdm_object_type_id_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Идентификатор аттрибута.");

                entity.Property(e => e.IsObjectUuid)
                    .HasColumnName("is_object_uuid")
                    .HasComment("Является ли значение аттрибута UUID его объекта.");

                entity.Property(e => e.ObjectAttributeMnemo)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("object_attribute_mnemo")
                    .HasComment("Мнемоника аттрибута объекта МДМ.");

                entity.Property(e => e.ObjectAttributeName)
                    .HasMaxLength(500)
                    .HasColumnName("object_attribute_name")
                    .HasComment("Наименовение аттрибута объекта МДМ.");

                entity.Property(e => e.ObjectAttributeRegex)
                    .HasMaxLength(150)
                    .HasColumnName("object_attribute_regex")
                    .HasComment("Правило проверки значения аттрибута по Regex.");

                entity.Property(e => e.SprMdmObjectTypeV2Id)
                    .HasColumnName("spr_mdm_object_type_v2_id")
                    .HasComment("Ссылка на тип объекта МДМ, которому принадлежит аттрибут.");

                entity.HasOne(d => d.SprMdmObjectTypeV2)
                    .WithMany(p => p.SprMdmObjectAttributeV2s)
                    .HasForeignKey(d => d.SprMdmObjectTypeV2Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_mdm_object_attribute_v2_spr_mdm_object_type_id_fkey");
            });

            modelBuilder.Entity<SprMdmObjectType>(entity =>
            {
                entity.ToTable("spr_mdm_object_type");

                entity.HasComment("Справочник типов объектов, передаваемых в МДМ.");

                entity.HasIndex(e => e.ObjectTypeMnemo, "spr_mdm_object_type_object_type_mnemo_key")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ, идентификатор типа объекта.");

                entity.Property(e => e.ObjectTypeMnemo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("object_type_mnemo")
                    .HasComment("Мнемоника типа объекта МДМ.");

                entity.Property(e => e.ObjectTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("object_type_name")
                    .HasComment("Наименование типа объекта МДМ.");
            });

            modelBuilder.Entity<SprMdmObjectTypeV2>(entity =>
            {
                entity.ToTable("spr_mdm_object_type_v2");

                entity.HasComment("Справочник типов объектов, передаваемых в МДМ.");

                entity.HasIndex(e => e.ObjectTypeMnemo, "spr_mdm_object_type_copy1_object_type_mnemo_key")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ, идентификатор типа объекта.");

                entity.Property(e => e.ObjectTypeMnemo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("object_type_mnemo")
                    .HasComment("Мнемоника типа объекта МДМ.");

                entity.Property(e => e.ObjectTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("object_type_name")
                    .HasComment("Наименование типа объекта МДМ.");
            });

            modelBuilder.Entity<SprMfcZag>(entity =>
            {
                entity.ToTable("spr_mfc_zags");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .HasColumnName("phone");

                entity.Property(e => e.RowDel).HasColumnName("row_del");

                entity.Property(e => e.SprEmployeesMfcId).HasColumnName("spr_employees_mfc_id");

                entity.Property(e => e.ZagsCode)
                    .HasMaxLength(8)
                    .HasColumnName("zags_code");

                entity.Property(e => e.ZagsName)
                    .HasMaxLength(500)
                    .HasColumnName("zags_name");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprMfcZags)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_mfc_zags_fk");
            });

            modelBuilder.Entity<SprMinobrCamp>(entity =>
            {
                entity.ToTable("spr_minobr_camp");

                entity.HasComment("Справочник оздоровительных учреждений для запросов через МинОбр VipNet");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CampId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("camp_id")
                    .HasComment("Идентификатор оздоровительного учреждения для випнета");

                entity.Property(e => e.CampName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("camp_name")
                    .HasComment("Наименование оздоровительного учреждения");

                entity.Property(e => e.Shift1)
                    .HasColumnName("shift_1")
                    .HasComment("Разрешена ли запись на 1 смену");

                entity.Property(e => e.Shift2)
                    .HasColumnName("shift_2")
                    .HasComment("Разрешена ли запись на 2 смену");

                entity.Property(e => e.Shift3)
                    .HasColumnName("shift_3")
                    .HasComment("Разрешена ли запись на 3 смену");
            });

            modelBuilder.Entity<SprParametr>(entity =>
            {
                entity.ToTable("spr_parametr");

                entity.HasComment("Параметры (Метки)");

                entity.HasIndex(e => e.Id, "spr_parametr_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Mnemo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("mnemo")
                    .HasComment("Мнемоника");

                entity.Property(e => e.ParametrName)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("parametr_name")
                    .HasComment("Наименование параметра");

                entity.Property(e => e.ParametrType)
                    .HasColumnName("parametr_type")
                    .HasComment("1-Строка 2- Дата 3- Число");
            });

            modelBuilder.Entity<SprParametr1>(entity =>
            {
                entity.ToTable("spr_parametrs");

                entity.HasComment("Справочник параметров и по совместительству справочник меток");

                entity.HasIndex(e => e.Id, "spr_parametrs_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.ParametrMark, "spr_parametrs_parametr_mark_key")
                    .IsUnique();

                entity.HasIndex(e => e.ParametrName, "spr_parametrs_parametr_name_key")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("nextval('spr_parametrs_seq'::regclass)")
                    .HasComment("ID");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("Комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("Дата и время изменение записи");

                entity.Property(e => e.DdListParametrValues)
                    .HasColumnName("dd_list_parametr_values")
                    .HasComment("Список возможных значений параметра\r\n");

                entity.Property(e => e.EmployeesFioAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_add")
                    .HasComment("ФИО добавившего запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("ФИО сотрудника изменившего запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("IP адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("IP адрес изменившего запись");

                entity.Property(e => e.JsonValues)
                    .HasColumnName("json_values")
                    .HasComment("Список возможных значений параметра\r\n");

                entity.Property(e => e.ParametrMark)
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mark")
                    .HasComment("Метка параметра (уникальное)");

                entity.Property(e => e.ParametrMask)
                    .HasMaxLength(100)
                    .HasColumnName("parametr_mask")
                    .HasComment("Маска ввода параметра");

                entity.Property(e => e.ParametrName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("parametr_name")
                    .HasComment("Название параметра");

                entity.Property(e => e.ParametrType)
                    .HasColumnName("parametr_type")
                    .HasComment("Тип параметра (1 - Строка, 2 - Дата, 3 - Число, 4 - Выпадающий список, 5 - Выпадающий список chekbox, 6 - Выпадающий список radiobutton)");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("Признак удаления (1 - Запись удалена, 2 - Запись не удалена)");
            });

            modelBuilder.Entity<SprPeriod>(entity =>
            {
                entity.ToTable("spr_period");

                entity.HasComment("Периоды отчетов");

                entity.HasIndex(e => e.Id, "spr_period_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.PeriodName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("period_name")
                    .HasComment("Наименование периода");
            });

            modelBuilder.Entity<SprPfrDepartment>(entity =>
            {
                entity.ToTable("spr_pfr_department");

                entity.HasComment("Мнемоники территориальных подразделений Пенсионного фонда ");

                entity.HasIndex(e => e.Id, "spr_pfr_department_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комменатрий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DckNumber)
                    .HasColumnName("dck_number")
                    .HasDefaultValueSql("1")
                    .HasComment("Номер пачки для интеграции с ПФР");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Okato)
                    .HasMaxLength(11)
                    .HasColumnName("okato")
                    .HasComment("ОКАТО");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(11)
                    .HasColumnName("oktmo")
                    .HasComment("OKTMO");

                entity.Property(e => e.PfrMnemo)
                    .HasMaxLength(10)
                    .HasColumnName("pfr_mnemo")
                    .HasComment("мнемоника отделения");

                entity.Property(e => e.PfrName)
                    .HasMaxLength(100)
                    .HasColumnName("pfr_name")
                    .HasComment("наименование отделения");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");
            });

            modelBuilder.Entity<SprQueueJoinMfc>(entity =>
            {
                entity.ToTable("spr_queue_join_mfc");

                entity.HasComment("соответствие  ключей с электронной очередью");

                entity.HasIndex(e => e.Id, "spr_queue_join_mfc_id_idx")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SprEmployeesMfc)
                    .HasColumnName("spr_employees_mfc")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprMfcId)
                    .HasColumnName("spr_mfc_id")
                    .HasComment("старый id мфц, в электронной очереди");

                entity.HasOne(d => d.SprEmployeesMfcNavigation)
                    .WithMany(p => p.SprQueueJoinMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfc)
                    .HasConstraintName("spr_queue_join_mfc_spr_employees_mfc_fkey");
            });

            modelBuilder.Entity<SprRosreestrEmployee>(entity =>
            {
                entity.ToTable("spr_rosreestr_employees");

                entity.HasComment("Таблица для россреестра");

                entity.HasIndex(e => e.Id, "spr_rosreestr_employees_idx1");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.AgentKind)
                    .HasMaxLength(12)
                    .HasColumnName("agent_kind")
                    .HasComment("Тип агента");

                entity.Property(e => e.Apartment)
                    .HasMaxLength(30)
                    .HasColumnName("apartment")
                    .HasComment("Квартира");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(30)
                    .HasColumnName("apartment_type")
                    .HasComment("Тип квартиры");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.CityType)
                    .HasMaxLength(30)
                    .HasColumnName("city_type")
                    .HasComment("Тип города");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.District)
                    .HasMaxLength(30)
                    .HasColumnName("district")
                    .HasComment("Район");

                entity.Property(e => e.DistrictType)
                    .HasMaxLength(30)
                    .HasColumnName("district_type")
                    .HasComment("Тип района");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .HasColumnName("email")
                    .HasComment("Электронная почта");

                entity.Property(e => e.Kladr)
                    .HasMaxLength(20)
                    .HasColumnName("kladr")
                    .HasComment("КЛАДР");

                entity.Property(e => e.Level1)
                    .HasMaxLength(30)
                    .HasColumnName("level1")
                    .HasComment("Номер сооружения");

                entity.Property(e => e.Level1Type)
                    .HasMaxLength(30)
                    .HasColumnName("level1_type")
                    .HasComment("Тип сооружения");

                entity.Property(e => e.Level2)
                    .HasMaxLength(30)
                    .HasColumnName("level2")
                    .HasComment("Номер сооружения 2го уровня");

                entity.Property(e => e.Level2Type)
                    .HasMaxLength(30)
                    .HasColumnName("level2_type")
                    .HasComment("Тип сооружения 2го уровня");

                entity.Property(e => e.Level3)
                    .HasMaxLength(30)
                    .HasColumnName("level3")
                    .HasComment("Номер сооружения 3го уровня");

                entity.Property(e => e.Level3Type)
                    .HasMaxLength(30)
                    .HasColumnName("level3_type")
                    .HasComment("Тип сооружения 3го уровня");

                entity.Property(e => e.Locality)
                    .HasMaxLength(30)
                    .HasColumnName("locality")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.LocalityType)
                    .HasMaxLength(30)
                    .HasColumnName("locality_type")
                    .HasComment("Тип населенного пункта");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .HasColumnName("note")
                    .HasComment("Запись");

                entity.Property(e => e.Other)
                    .HasMaxLength(255)
                    .HasColumnName("other")
                    .HasComment("Другое");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("postal_code")
                    .HasComment("Индекс");

                entity.Property(e => e.Region)
                    .HasMaxLength(4)
                    .HasColumnName("region")
                    .HasComment("Регион");

                entity.Property(e => e.Snils)
                    .HasMaxLength(11)
                    .HasColumnName("snils")
                    .HasComment("Снилс");

                entity.Property(e => e.SovietVillage)
                    .HasMaxLength(30)
                    .HasColumnName("soviet_village")
                    .HasComment("Советская деревня");

                entity.Property(e => e.SovietVillageType)
                    .HasMaxLength(30)
                    .HasColumnName("soviet_village_type")
                    .HasComment("Тип советской деревни");

                entity.Property(e => e.Street)
                    .HasMaxLength(30)
                    .HasColumnName("street")
                    .HasComment("Улица");

                entity.Property(e => e.StreetType)
                    .HasMaxLength(30)
                    .HasColumnName("street_type")
                    .HasComment("Тип улицы");

                entity.Property(e => e.Tel)
                    .HasMaxLength(30)
                    .HasColumnName("tel")
                    .HasComment("Номер телефона");

                entity.Property(e => e.UrbanDistrict)
                    .HasMaxLength(30)
                    .HasColumnName("urban_district")
                    .HasComment("Городской округ");

                entity.Property(e => e.UrbanDistrictType)
                    .HasMaxLength(30)
                    .HasColumnName("urban_district_type")
                    .HasComment("Тип городского округа");
            });

            modelBuilder.Entity<SprRosreestrMfc>(entity =>
            {
                entity.ToTable("spr_rosreestr_mfc");

                entity.HasComment("Таблица для россреестра");

                entity.HasIndex(e => e.Id, "spr_rosreestr_mfc_idx1");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Apartment)
                    .HasMaxLength(30)
                    .HasColumnName("apartment")
                    .HasComment("квартира");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(30)
                    .HasColumnName("apartment_type")
                    .HasComment("Тип квартиры");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.CityType)
                    .HasMaxLength(30)
                    .HasColumnName("city_type")
                    .HasComment("Тип города");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("Комментарий");

                entity.Property(e => e.DeclarantKind)
                    .HasMaxLength(30)
                    .HasColumnName("declarant_kind")
                    .HasComment("Тип декларанта");

                entity.Property(e => e.DeclarantName)
                    .HasMaxLength(100)
                    .HasColumnName("declarant_name")
                    .HasComment("Имя декларанта");

                entity.Property(e => e.District)
                    .HasMaxLength(30)
                    .HasColumnName("district")
                    .HasComment("район");

                entity.Property(e => e.DistrictType)
                    .HasMaxLength(30)
                    .HasColumnName("district_type")
                    .HasComment("тип района");

                entity.Property(e => e.Kladr)
                    .HasMaxLength(20)
                    .HasColumnName("kladr")
                    .HasComment("КЛАДР");

                entity.Property(e => e.Level1)
                    .HasMaxLength(30)
                    .HasColumnName("level1")
                    .HasComment("level1");

                entity.Property(e => e.Level1Type)
                    .HasMaxLength(30)
                    .HasColumnName("level1_type")
                    .HasComment("тип сооружения");

                entity.Property(e => e.Level2)
                    .HasMaxLength(30)
                    .HasColumnName("level2")
                    .HasComment("номер сооружения 2го уровня");

                entity.Property(e => e.Level2Type)
                    .HasMaxLength(30)
                    .HasColumnName("level2_type")
                    .HasComment("тип сооружения 2го уровня");

                entity.Property(e => e.Level3)
                    .HasMaxLength(30)
                    .HasColumnName("level3")
                    .HasComment("номер сооружения 3го уровня");

                entity.Property(e => e.Level3Type)
                    .HasMaxLength(30)
                    .HasColumnName("level3_type")
                    .HasComment("тип сооружения 3го уровня");

                entity.Property(e => e.Locality)
                    .HasMaxLength(30)
                    .HasColumnName("locality")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.LocalityType)
                    .HasMaxLength(30)
                    .HasColumnName("locality_type")
                    .HasComment("Тип населенного пункта");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .HasColumnName("note")
                    .HasComment("Запись");

                entity.Property(e => e.Other)
                    .HasMaxLength(255)
                    .HasColumnName("other")
                    .HasComment("другое");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(10)
                    .HasColumnName("postal_code")
                    .HasComment("Индекс");

                entity.Property(e => e.Region)
                    .HasMaxLength(4)
                    .HasColumnName("region")
                    .HasComment("регион");

                entity.Property(e => e.SovietVillage)
                    .HasMaxLength(30)
                    .HasColumnName("soviet_village")
                    .HasComment("Советская деревня");

                entity.Property(e => e.SovietVillageType)
                    .HasMaxLength(30)
                    .HasColumnName("soviet_village_type")
                    .HasComment("Тип советской деревни");

                entity.Property(e => e.Street)
                    .HasMaxLength(30)
                    .HasColumnName("street")
                    .HasComment("Улица");

                entity.Property(e => e.StreetType)
                    .HasMaxLength(30)
                    .HasColumnName("street_type")
                    .HasComment("Тип улицы");

                entity.Property(e => e.UrbanDistrict)
                    .HasMaxLength(30)
                    .HasColumnName("urban_district")
                    .HasComment("Городской округ");

                entity.Property(e => e.UrbanDistrictType)
                    .HasMaxLength(30)
                    .HasColumnName("urban_district_type")
                    .HasComment("Тип городского округа");
            });

            modelBuilder.Entity<SprRoutesStage>(entity =>
            {
                entity.ToTable("spr_routes_stage");

                entity.HasComment("этапы выполнения услуги");

                entity.HasIndex(e => e.Id, "spr_routes_stage_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("количество дней на исполнение этапа");

                entity.Property(e => e.RecordNumber)
                    .HasColumnName("record_number")
                    .HasComment("порядковый номер записи");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.StageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("stage_name")
                    .HasComment("наименование этапа");
            });

            modelBuilder.Entity<SprRoutesStageNext>(entity =>
            {
                entity.ToTable("spr_routes_stage_next");

                entity.HasComment("Следующие этапы для этапа");

                entity.HasIndex(e => e.Id, "spr_routes_stage_next_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprRoutesStageId, e.SprRoutesStageNextId }, "spr_routes_stage_next_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комменатрий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("этап, связь  c spr_routes_stage id");

                entity.Property(e => e.SprRoutesStageNextId)
                    .HasColumnName("spr_routes_stage_next_id")
                    .HasComment("следующий этап , связь с  spr_routes_stage id");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.SprRoutesStageNextSprRoutesStages)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_routes_stage_next_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprRoutesStageNextNavigation)
                    .WithMany(p => p.SprRoutesStageNextSprRoutesStageNextNavigations)
                    .HasForeignKey(d => d.SprRoutesStageNextId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_routes_stage_next_spr_routes_stage_next_id_fkey");
            });

            modelBuilder.Entity<SprRoutesStageRoleJoin>(entity =>
            {
                entity.ToTable("spr_routes_stage_role_join");

                entity.HasComment("связь ролей и этапов");

                entity.HasIndex(e => e.Id, "spr_routes_stage_role_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprRoutesStageId, e.SprEmployeesRoleId }, "spr_routes_stage_role_join_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комменатрий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprEmployeesRoleId)
                    .HasColumnName("spr_employees_role_id")
                    .HasComment("связь с ролью, spr_employees_role_id");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("связь с этапом, spr_routes_stage id");

                entity.HasOne(d => d.SprEmployeesRole)
                    .WithMany(p => p.SprRoutesStageRoleJoinSprEmployeesRoles)
                    .HasForeignKey(d => d.SprEmployeesRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_routes_stage_role_join_spr_employees_role_id_fkey");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.SprRoutesStageRoleJoinSprRoutesStages)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_routes_stage_role_join_spr_routes_stage_id_fkey");
            });

            modelBuilder.Entity<SprService>(entity =>
            {
                entity.ToTable("spr_services");

                entity.HasComment("справочник услуг");

                entity.HasIndex(e => e.Id, "spr_services_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesProviderDepartmentId, e.FrguServicesId }, "spr_services_idx3");

                entity.HasIndex(e => e.SprServicesTypeId, "spr_services_idx4");

                entity.HasIndex(e => e.RowDel, "spr_services_idx5");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FrguProcedureId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_procedure_id")
                    .HasComment("Идентификатор процедуры ФРГУ");

                entity.Property(e => e.FrguServicesId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_id")
                    .HasComment("ID услуги ФРГУ");

                entity.Property(e => e.FrguServicesName)
                    .HasMaxLength(1500)
                    .HasColumnName("frgu_services_name")
                    .HasComment("фргу, название услуги");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.MdmUuid)
                    .HasColumnName("mdm_uuid")
                    .HasComment("Идентефикатор услуги в системе МДМ");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServiceMnemo)
                    .HasMaxLength(10)
                    .HasColumnName("service_mnemo")
                    .HasComment("мнемоника");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name")
                    .HasComment("наименование");

                entity.Property(e => e.ServiceNameSmall)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_name_small")
                    .HasComment("краткое наименование");

                entity.Property(e => e.ServiceRegulations)
                    .HasMaxLength(1500)
                    .HasColumnName("service_regulations")
                    .HasComment("Регламент услуги");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал ");

                entity.Property(e => e.SprServicesProviderDepartmentId)
                    .HasColumnName("spr_services_provider_department_id")
                    .HasComment("связь с отделом организации, spr_services_provider_department id");

                entity.Property(e => e.SprServicesTypeId)
                    .HasColumnName("spr_services_type_id")
                    .HasComment("тип услуги, связь с spr_services_type id");

                entity.HasOne(d => d.SprServicesProviderDepartment)
                    .WithMany(p => p.SprServices)
                    .HasForeignKey(d => d.SprServicesProviderDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_spr_services_provider_department_id_fkey");

                entity.HasOne(d => d.SprServicesType)
                    .WithMany(p => p.SprServices)
                    .HasForeignKey(d => d.SprServicesTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_spr_services_type_id_fkey");
            });

            modelBuilder.Entity<SprServicesForm>(entity =>
            {
                entity.ToTable("spr_services_forms");

                entity.HasComment("Бланки к подуслугам");

                entity.HasIndex(e => e.Id, "spr_services_forms_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_forms_idx2");

                entity.HasIndex(e => e.SprFormsId, "spr_services_forms_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время редактирования");

                entity.Property(e => e.SprFormsId)
                    .HasColumnName("spr_forms_id")
                    .HasComment("Бланк");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Подуслуга");

                entity.HasOne(d => d.SprForms)
                    .WithMany(p => p.SprServicesForms)
                    .HasForeignKey(d => d.SprFormsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_forms_spr_forms_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesForms)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_forms_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesProvider>(entity =>
            {
                entity.ToTable("spr_services_provider");

                entity.HasComment("справочник органов исполнительной власти");

                entity.HasIndex(e => e.Id, "spr_services_provider_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.FrguProviderId, "spr_services_provider_idx2");

                entity.HasIndex(e => e.RowDel, "spr_services_provider_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FrguProviderId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_provider_id")
                    .HasComment("ID ФРГУ, ID Поставщика");

                entity.Property(e => e.FrguProviderName)
                    .HasMaxLength(300)
                    .HasColumnName("frgu_provider_name")
                    .HasComment("фргу название органа власти");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.ProviderAddress)
                    .HasMaxLength(255)
                    .HasColumnName("provider_address")
                    .HasComment("адрес");

                entity.Property(e => e.ProviderDirector)
                    .HasMaxLength(70)
                    .HasColumnName("provider_director")
                    .HasComment("руководитель");

                entity.Property(e => e.ProviderEmail)
                    .HasMaxLength(70)
                    .HasColumnName("provider_email")
                    .HasComment("эл. почта");

                entity.Property(e => e.ProviderFax)
                    .HasMaxLength(70)
                    .HasColumnName("provider_fax")
                    .HasComment("факс организации");

                entity.Property(e => e.ProviderLogo)
                    .HasColumnName("provider_logo")
                    .HasComment("логотип");

                entity.Property(e => e.ProviderMnemo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("provider_mnemo")
                    .HasComment("мнемокод");

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("provider_name")
                    .HasComment("наименование");

                entity.Property(e => e.ProviderNameSmall)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("provider_name_small")
                    .HasComment("краткое наименование");

                entity.Property(e => e.ProviderTel)
                    .HasMaxLength(70)
                    .HasColumnName("provider_tel")
                    .HasComment("телефон");

                entity.Property(e => e.ProviderWebsite)
                    .HasMaxLength(70)
                    .HasColumnName("provider_website")
                    .HasComment("веб сайт");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добьавил запись");

                entity.Property(e => e.WorkShedule)
                    .HasMaxLength(255)
                    .HasColumnName("work_shedule")
                    .HasComment("график работы");
            });

            modelBuilder.Entity<SprServicesProviderDepartment>(entity =>
            {
                entity.ToTable("spr_services_provider_department");

                entity.HasComment("справочник отделов органов исполнительной власти");

                entity.HasIndex(e => e.Id, "spr_services_provider_department_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesProviderId, "spr_services_provider_department_idx2");

                entity.HasIndex(e => e.RowDel, "spr_services_provider_department_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DepartmentAddress)
                    .HasMaxLength(255)
                    .HasColumnName("department_address")
                    .HasComment("адрес");

                entity.Property(e => e.DepartmentDirector)
                    .HasMaxLength(70)
                    .HasColumnName("department_director")
                    .HasComment("руководитель");

                entity.Property(e => e.DepartmentEmail)
                    .HasMaxLength(70)
                    .HasColumnName("department_email")
                    .HasComment("эл. почта");

                entity.Property(e => e.DepartmentName)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("department_name")
                    .HasComment("наименование");

                entity.Property(e => e.DepartmentNameSmall)
                    .IsRequired()
                    .HasMaxLength(350)
                    .HasColumnName("department_name_small")
                    .HasComment("короткое наименование");

                entity.Property(e => e.DepartmentTel)
                    .HasMaxLength(70)
                    .HasColumnName("department_tel")
                    .HasComment("телефон");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FrguDepartmentId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_department_id")
                    .HasComment("id фргу");

                entity.Property(e => e.FrguDepartmentName)
                    .HasMaxLength(1500)
                    .HasColumnName("frgu_department_name")
                    .HasComment("фргу наименование органа власти");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnType("date")
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком, spr_services_provider id");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.SprServicesProviderDepartments)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_provider_department_spr_services_provider_id_fkey");
            });

            modelBuilder.Entity<SprServicesProviderMfc>(entity =>
            {
                entity.ToTable("spr_services_provider_mfc");

                entity.HasComment("Таблица связывающая ОИВ которые в таблице отделах и в таблицы ОИВ");

                entity.HasIndex(e => e.SprEmployeesMfcId, "spr_services_provider_mfc_spr_employees_mfc_id_idx");

                entity.HasIndex(e => e.SprServicesProviderId, "spr_services_provider_mfc_spr_services_provider_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("Отдел мфц");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("ОИВ");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprServicesProviderMfcs)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_provider_mfc_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.SprServicesProviderMfcs)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_provider_mfc_spr_services_provider_id_fkey");
            });

            modelBuilder.Entity<SprServicesProviderRecipientPayment>(entity =>
            {
                entity.ToTable("spr_services_provider_recipient_payment");

                entity.HasComment("Получатели госпошлин (пока не используется)");

                entity.HasIndex(e => e.Id, "spr_services_provider_inn_kpp_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesProviderId, e.SprEmployeesMfcId }, "spr_services_provider_inn_kpp_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "spr_services_provider_inn_kpp_uniq1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesProviderId, e.SprEmployeesMfcId }, "spr_services_provider_inn_kpp_uniq2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(70)
                    .HasColumnName("purpose")
                    .HasComment("Назначение платежа");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServicesProviderBankName)
                    .HasMaxLength(100)
                    .HasColumnName("services_provider_bank_name")
                    .HasComment("наименование банка");

                entity.Property(e => e.ServicesProviderBik)
                    .HasMaxLength(20)
                    .HasColumnName("services_provider_bik")
                    .HasComment("бик ");

                entity.Property(e => e.ServicesProviderInn)
                    .HasMaxLength(20)
                    .HasColumnName("services_provider_inn")
                    .HasComment("ИНН поставщика");

                entity.Property(e => e.ServicesProviderKpp)
                    .HasMaxLength(20)
                    .HasColumnName("services_provider_kpp")
                    .HasComment("КПП поставщика");

                entity.Property(e => e.ServicesProviderKs)
                    .HasMaxLength(30)
                    .HasColumnName("services_provider_ks")
                    .HasComment("Корреспондентский счёт");

                entity.Property(e => e.ServicesProviderOktmo)
                    .HasMaxLength(20)
                    .HasColumnName("services_provider_oktmo")
                    .HasComment("ОКТМО поставщика");

                entity.Property(e => e.ServicesProviderRs)
                    .HasMaxLength(30)
                    .HasColumnName("services_provider_rs")
                    .HasComment("расчетный счет");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц, spr_employees_mfc id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком,spr_services_provider id");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.SprServicesProviderRecipientPayments)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_provider_inn_kpp_spr_services_provider_id_fkey");
            });

            modelBuilder.Entity<SprServicesProviderVipnet>(entity =>
            {
                entity.ToTable("spr_services_provider_vipnet");

                entity.HasComment("Таблица адресов Vipnet");

                entity.HasIndex(e => e.Id, "spr_services_provider_vipnet_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.FtpIn)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ftp_in")
                    .HasComment("папка для входящих");

                entity.Property(e => e.FtpOut)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ftp_out")
                    .HasComment("папка для исходящих");

                entity.Property(e => e.FtpPass)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ftp_pass")
                    .HasComment("пароль");

                entity.Property(e => e.FtpServer)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ftp_server")
                    .HasComment("ftp сервер");

                entity.Property(e => e.FtpUnc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ftp_unc")
                    .HasComment("папка для неизвестных");

                entity.Property(e => e.FtpUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ftp_user")
                    .HasComment("имя пользователя");

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("provider_name")
                    .HasComment("наименование провайдера");
            });

            modelBuilder.Entity<SprServicesSub>(entity =>
            {
                entity.ToTable("spr_services_sub");

                entity.HasComment("справочник подуслуг\r\n-- Добавил поле level_difficulty. 06.09.2019 Балахаев");

                entity.HasIndex(e => e.Id, "spr_services_sub_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesId, e.IasMkgu }, "spr_services_sub_idx3");

                entity.HasIndex(e => e.SprServicesProviderId, "spr_services_sub_idx4");

                entity.HasIndex(e => e.RowDel, "spr_services_sub_idx5");

                entity.HasIndex(e => e.Hashtag, "spr_services_sub_idx6");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.AlertText)
                    .HasMaxLength(1000)
                    .HasColumnName("alert_text")
                    .HasComment("Текст уведомления для операторов во время добавления услуги");

                entity.Property(e => e.CodeCheckmaster)
                    .HasMaxLength(20)
                    .HasColumnName("code_checkmaster")
                    .HasComment("Коде чекмастера");

                entity.Property(e => e.CodeCheckmasterForMfc)
                    .HasMaxLength(20)
                    .HasColumnName("code_checkmaster_for_mfc")
                    .HasComment("Код чекмастера для части платы МФЦ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.EpguIdForm)
                    .HasMaxLength(30)
                    .HasColumnName("epgu_id_form")
                    .HasComment("id формы на ЕПГУ");

                entity.Property(e => e.FrguProcedureId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_procedure_id")
                    .HasComment("Идентификатор процедуры ФРГУ");

                entity.Property(e => e.FrguServicesSubId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_services_sub_id")
                    .HasComment(" ID ФРГУ подуслуги");

                entity.Property(e => e.FrguTargetId)
                    .HasMaxLength(30)
                    .HasColumnName("frgu_target_id")
                    .HasComment("id цели из ФРГУ");

                entity.Property(e => e.FrguTargetName)
                    .HasMaxLength(1500)
                    .HasColumnName("frgu_target_name")
                    .HasComment("фргу, название цели");

                entity.Property(e => e.Hashtag)
                    .HasMaxLength(255)
                    .HasColumnName("hashtag_")
                    .HasComment("хэштеги");

                entity.Property(e => e.IasMkgu)
                    .HasColumnName("ias_mkgu")
                    .HasComment("участие услуги в ИАС МКГУ");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsCalculatesStatistics)
                    .HasColumnName("is_calculates_statistics")
                    .HasComment("Для подсчета статистики. Наименование брать с услуги?");

                entity.Property(e => e.IsUinRequired)
                    .HasColumnName("is_uin_required")
                    .HasComment("Обязателен ли УИН для оплаты");

                entity.Property(e => e.KbkPayment)
                    .HasMaxLength(30)
                    .HasColumnName("kbk_payment")
                    .HasComment("кбк для взимания платы");

                entity.Property(e => e.LegalAct)
                    .HasMaxLength(1500)
                    .HasColumnName("legal_act")
                    .HasComment("Реквизиты НПА");

                entity.Property(e => e.LevelDifficulty)
                    .HasColumnName("level_difficulty")
                    .HasDefaultValueSql("1")
                    .HasComment("Уровень сложности");

                entity.Property(e => e.MdmUuid)
                    .HasColumnName("mdm_uuid")
                    .HasComment("Идентефикатор услуги в системе МДМ");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(1500)
                    .HasColumnName("purpose")
                    .HasComment("Назначение платежа");

                entity.Property(e => e.ReportSelect)
                    .HasColumnName("report_select")
                    .HasDefaultValueSql("false")
                    .HasComment("выводить в отчетах, да или нет");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServiceSubDescription)
                    .HasColumnName("service_sub_description")
                    .HasComment("описание подуслуги");

                entity.Property(e => e.ServiceSubMnemo)
                    .HasMaxLength(10)
                    .HasColumnName("service_sub_mnemo")
                    .HasComment("мнемоника");

                entity.Property(e => e.ServiceSubName)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_sub_name")
                    .HasComment("наименование");

                entity.Property(e => e.ServiceSubNameSmall)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("service_sub_name_small")
                    .HasComment("краткое наименование");

                entity.Property(e => e.ServiceSubParametrsJson)
                    .HasColumnType("jsonb")
                    .HasColumnName("service_sub_parametrs_json")
                    .HasComment("Список доп параметров к услуге");

                entity.Property(e => e.ServiceSubPosition)
                    .HasColumnName("service_sub_position")
                    .HasComment("Расположение услуги, 0 - Универсальная, 1- Только как Главная, 2- Только как Подуслуга");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprServicesId)
                    .HasColumnName("spr_services_id")
                    .HasComment("свзяь с услугой , spr_services id");

                entity.Property(e => e.SprServicesProviderId)
                    .HasColumnName("spr_services_provider_id")
                    .HasComment("связь с поставщиком , spr_services_provider id");

                entity.Property(e => e.TariffEdit)
                    .HasColumnName("tariff_edit")
                    .HasComment("возможность редактирования тарифа");

                entity.HasOne(d => d.SprServices)
                    .WithMany(p => p.SprServicesSubs)
                    .HasForeignKey(d => d.SprServicesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_spr_services_id_fkey");

                entity.HasOne(d => d.SprServicesProvider)
                    .WithMany(p => p.SprServicesSubs)
                    .HasForeignKey(d => d.SprServicesProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_spr_services_provider_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubActive>(entity =>
            {
                entity.ToTable("spr_services_sub_active");

                entity.HasComment("Таблица включения и отключения услуги");

                entity.HasIndex(e => e.Id, "spr_services_sub_active_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.DateStart, e.DateStop }, "spr_services_sub_active_idx2");

                entity.HasIndex(e => e.SprEmployeesMfcId, "spr_services_sub_active_spr_employees_mfc_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата  начала действия активности");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания действия активности");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServicesSubActive)
                    .HasColumnName("services_sub_active")
                    .HasComment("услуга включена / отключена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата фактической установки");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзязь  с подуслугой ,spr_services_sub id");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprServicesSubActives)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .HasConstraintName("spr_services_sub_active_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubActives)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_active_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubCommercial>(entity =>
            {
                entity.ToTable("spr_services_sub_commercial");

                entity.HasComment("Коммерческие услуги");

                entity.HasIndex(e => e.Id, "spr_services_sub_commercial_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_commercial_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.PercentDeputyDirector1240)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_deputy_director_12_40")
                    .HasComment("процент зам директору с окнами  более 11");

                entity.Property(e => e.PercentDirector11)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_director_11")
                    .HasComment("процент директору с окнами менее 11");

                entity.Property(e => e.PercentDirector1240)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_director_12_40")
                    .HasComment("процент директору с окнами более 11");

                entity.Property(e => e.PercentExecuted)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_executed")
                    .HasComment("процент за исполнение");

                entity.Property(e => e.PercentHeadOperatorHall)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_head_operator_hall")
                    .HasComment("процент начальнику опер зала");

                entity.Property(e => e.PercentReceived)
                    .HasPrecision(15, 2)
                    .HasColumnName("percent_received")
                    .HasComment("процент за прием");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой , spr_services_sub id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithOne(p => p.SprServicesSubCommercial)
                    .HasForeignKey<SprServicesSubCommercial>(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_commercial_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubCustomer>(entity =>
            {
                entity.ToTable("spr_services_sub_customer");

                entity.HasComment("Список типов получателей к подуслуге");

                entity.HasIndex(e => e.Id, "spr_services_sub_customer_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubTypeRecipientId }, "spr_services_sub_customer_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Representative)
                    .HasColumnName("representative")
                    .HasComment("возможность подачи заявления представителем");

                entity.Property(e => e.RepresentativeDocument)
                    .HasMaxLength(3000)
                    .HasColumnName("representative_document")
                    .HasComment("документ подтверждающий право представителя");

                entity.Property(e => e.RepresentativeList)
                    .HasMaxLength(5000)
                    .HasColumnName("representative_list")
                    .HasComment("перечень представителей");

                entity.Property(e => e.RepresentativeSpecification)
                    .HasMaxLength(5000)
                    .HasColumnName("representative_specification")
                    .HasComment("требование к документу");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзяь с подуслугой,spr_services_sub id");

                entity.Property(e => e.SprServicesSubTypeRecipientId)
                    .HasColumnName("spr_services_sub_type_recipient_id")
                    .HasComment("связь с типом получателей, spr_services_type_recipient id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubCustomers)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_customer_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubTypeRecipient)
                    .WithMany(p => p.SprServicesSubCustomers)
                    .HasForeignKey(d => d.SprServicesSubTypeRecipientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_customer_spr_services_sub_type_recipient__fkey");
            });

            modelBuilder.Entity<SprServicesSubDocument>(entity =>
            {
                entity.ToTable("spr_services_sub_document");

                entity.HasComment("справочник связи документов к услуге");

                entity.HasIndex(e => e.Id, "spr_services_sub_document_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_document_idx2");

                entity.HasIndex(e => e.SprDocumentsId, "spr_services_sub_document_idx3");

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprDocumentsId }, "spr_services_sub_document_spr_services_sub_id_spr_documents_key")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(5000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DocumentCount)
                    .HasColumnName("document_count")
                    .HasComment("количество копий документа");

                entity.Property(e => e.DocumentNeeds)
                    .HasColumnName("document_needs")
                    .HasComment("обязательный(0),не обязательный документ(1), при необходимости (2)");

                entity.Property(e => e.DocumentType)
                    .HasColumnName("document_type")
                    .HasComment("тип документа, 0- оригинал 1- копия");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата установки");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто установил , ФИО");

                entity.Property(e => e.SprDocumentsId)
                    .HasColumnName("spr_documents_id")
                    .HasComment("связь с документом, spr_docements id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.HasOne(d => d.SprDocuments)
                    .WithMany(p => p.SprServicesSubDocuments)
                    .HasForeignKey(d => d.SprDocumentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_document_spr_documents_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubDocuments)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_document_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubDocumentCustomer>(entity =>
            {
                entity.ToTable("spr_services_sub_document_customer");

                entity.HasComment("справочник связи документов к заявителю, какие документы предоставляет заявитель определенной категории");

                entity.HasIndex(e => e.Id, "spr_services_sub_document_cust_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubCustomerId, e.SprDocumentsId }, "spr_services_sub_document_cust_idx2")
                    .IsUnique();

                entity.HasIndex(e => e.SprDocumentsId, "spr_services_sub_document_cust_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DocumentCount)
                    .HasColumnName("document_count")
                    .HasComment("количество копий документа");

                entity.Property(e => e.DocumentNeeds)
                    .HasColumnName("document_needs")
                    .HasComment("обязательный(0),не обязательный документ(1), при наличии (2)");

                entity.Property(e => e.DocumentType)
                    .HasColumnName("document_type")
                    .HasComment("тип документа, 0- оригинал 1- копия");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата установки");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто установил , ФИО");

                entity.Property(e => e.SprDocumentsId)
                    .HasColumnName("spr_documents_id")
                    .HasComment("связь с документом, spr_docements id");

                entity.Property(e => e.SprServicesSubCustomerId)
                    .HasColumnName("spr_services_sub_customer_id")
                    .HasComment("связь с заявителем , spr_services_customer id");

                entity.HasOne(d => d.SprDocuments)
                    .WithMany(p => p.SprServicesSubDocumentCustomers)
                    .HasForeignKey(d => d.SprDocumentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_document_cust_spr_documents_id_fkey");

                entity.HasOne(d => d.SprServicesSubCustomer)
                    .WithMany(p => p.SprServicesSubDocumentCustomers)
                    .HasForeignKey(d => d.SprServicesSubCustomerId)
                    .HasConstraintName("spr_services_sub_document_cus_spr_services_sub_customer_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubExecutorRole>(entity =>
            {
                entity.ToTable("spr_services_sub_executor_role");

                entity.HasComment("справочник Роли исполнителя к услуге");

                entity.HasIndex(e => e.SprEmployeesMfcId, "spr_services_sub_executor_role_spr_employees_mfc_id_idx");

                entity.HasIndex(e => e.SprExecutorRoleId, "spr_services_sub_executor_role_spr_executer_role_id_idx");

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_executor_role_spr_services_sub_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления");

                entity.Property(e => e.EmployeesNameAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_name_add")
                    .HasComment("Кто добавил");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ");

                entity.Property(e => e.SprExecutorRoleId)
                    .HasColumnName("spr_executor_role_id")
                    .HasComment("Роль исполнителя");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Подуслуга");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.SprServicesSubExecutorRoles)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .HasConstraintName("spr_services_sub_executor_role_spr_employees_mfc_id_fkey");

                entity.HasOne(d => d.SprExecutorRole)
                    .WithMany(p => p.SprServicesSubExecutorRoles)
                    .HasForeignKey(d => d.SprExecutorRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_executor_role_spr_executer_role_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubExecutorRoles)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_executor_role_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubFailure>(entity =>
            {
                entity.ToTable("spr_services_sub_failure");

                entity.HasComment("Список оснований для отказов в предоставлении подуслуги");

                entity.HasIndex(e => e.Id, "spr_services_sub_failure_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_failure_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FailureText)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .HasColumnName("failure_text")
                    .HasComment("текст отказа");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.LegalAct)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .HasColumnName("legal_act")
                    .HasComment("Нормативно правовые акты");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил ФИО");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с подуслугой,spr_services_sub id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubFailures)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_failure_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubFailureDoc>(entity =>
            {
                entity.ToTable("spr_services_sub_failure_doc");

                entity.HasComment("Список оснований для отказов в приеме документов");

                entity.HasIndex(e => e.Id, "spr_services_sub_failure_doc_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_failure_doc_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FailureText)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .HasColumnName("failure_text")
                    .HasComment("текст отказа");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.LegalAct)
                    .HasMaxLength(1500)
                    .HasColumnName("legal_act")
                    .HasComment("Нормативно правовые акты");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил ФИО");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с подуслугой,spr_services_sub id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubFailureDocs)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_failure_doc_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubFile>(entity =>
            {
                entity.ToTable("spr_services_sub_file");

                entity.HasComment("список файлов к услуге");

                entity.HasIndex(e => e.Id, "spr_services_sub_file_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubFileFolderId, "spr_services_sub_file_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата установки");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто установил,фио");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("связь с мфц,spr_employees_mfc id");

                entity.Property(e => e.SprServicesSubFileFolderId)
                    .HasColumnName("spr_services_sub_file_folder_id")
                    .HasComment("связь с папкой подуслуги , spr_services_blank_folder id");

                entity.Property(e => e.SprStandardsFileId)
                    .HasColumnName("spr_standards_file_id")
                    .HasComment("связь с файлом, spr_standards_file id");

                entity.HasOne(d => d.SprServicesSubFileFolder)
                    .WithMany(p => p.SprServicesSubFiles)
                    .HasForeignKey(d => d.SprServicesSubFileFolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_file_spr_services_sub_file_folder_id_fkey");

                entity.HasOne(d => d.SprStandardsFile)
                    .WithMany(p => p.SprServicesSubFiles)
                    .HasForeignKey(d => d.SprStandardsFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_file_spr_standards__file_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubFileFolder>(entity =>
            {
                entity.ToTable("spr_services_sub_file_folder");

                entity.HasComment("таблица хранит папки для файлов подуслуг");

                entity.HasIndex(e => e.Id, "spr_services_sub_file_folder_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_file_folder_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FolderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("folder_name")
                    .HasComment("Наименование папки");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзяь с id подуслуги, spr_services_sub id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubFileFolders)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_file_folder_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubGroupParametrsJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_group_parametrs_join");

                entity.HasComment("Связка группы параметров с подуслугами");

                entity.HasIndex(e => e.Id, "spr_services_sub_group_parametrs_id_idx")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("nextval('spr_services_sub_group_parametrs_join_seq'::regclass)")
                    .HasComment("ID");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("Комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(0)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("Дата и время изменение записи");

                entity.Property(e => e.EmployeesFioAdd)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_add")
                    .HasComment("ФИО добавившего запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("ФИО сотрудника изменившего запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("IP адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("IP адрес изменившего запись");

                entity.Property(e => e.IsCopy)
                    .HasColumnName("is_copy")
                    .HasComment("разрешает/запрещает копирование группы параметров");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("Признак удаления (1 - Запись удалена, 2 - Запись не удалена)");

                entity.Property(e => e.SortField)
                    .HasColumnName("sort_field")
                    .HasComment("Позиция в списке отображения");

                entity.Property(e => e.SprGroupParametrsId)
                    .HasColumnName("spr_group_parametrs_id")
                    .HasDefaultValueSql("nextval('spr_services_sub_group_parametrs_join_seq'::regclass)")
                    .HasComment("Связь с таблицей spr_group_parametrs, Поле - ID");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Связь с таблицей spr_services_sub, Поле - ID");

                entity.HasOne(d => d.SprGroupParametrs)
                    .WithMany(p => p.SprServicesSubGroupParametrsJoins)
                    .HasForeignKey(d => d.SprGroupParametrsId)
                    .HasConstraintName("spr_services_sub_group_parametrs_spr_group_parametrs_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubGroupParametrsJoins)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_group_parametrs_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubHashtag>(entity =>
            {
                entity.ToTable("spr_services_sub_hashtag");

                entity.HasComment("Тэги к услугам");

                entity.HasIndex(e => e.Id, "spr_services_sub_hashtag_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("tag_name")
                    .HasComment("наименование тэга");
            });

            modelBuilder.Entity<SprServicesSubLivingSituation>(entity =>
            {
                entity.ToTable("spr_services_sub_living_situations");

                entity.HasComment("Жизненные ситуации ");

                entity.HasIndex(e => e.Id, "spr_services_sub_living_situations_idx1");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SituationName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("situation_name")
                    .HasComment("наименование ситуации");
            });

            modelBuilder.Entity<SprServicesSubLivingSituationsJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_living_situations_join");

                entity.HasComment("Связь между жизненными ситуациями и услугами");

                entity.HasIndex(e => e.Id, "spr_services_sub_living_situations_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubLivingSituationsId }, "spr_services_sub_living_situations_join_idx2")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubLivingSituationsId, e.SprServicesSubId }, "spr_services_sub_living_situations_join_idx3")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("ФИО добавившего");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Подуслуга");

                entity.Property(e => e.SprServicesSubLivingSituationsId)
                    .HasColumnName("spr_services_sub_living_situations_id")
                    .HasComment("жизненая ситуация");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubLivingSituationsJoins)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_living_situations_joi_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubLivingSituations)
                    .WithMany(p => p.SprServicesSubLivingSituationsJoins)
                    .HasForeignKey(d => d.SprServicesSubLivingSituationsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_living_situa_spr_services_sub_living_situ_fkey");
            });

            modelBuilder.Entity<SprServicesSubParametr>(entity =>
            {
                entity.ToTable("spr_services_sub_parametr");

                entity.HasComment("Параметры к подуслуге");

                entity.HasIndex(e => e.Id, "spr_services_sub_parametr_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_parametr_idx2");

                entity.HasIndex(e => e.SprParametrId, "spr_services_sub_parametr_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SprParametrId)
                    .HasColumnName("spr_parametr_id")
                    .HasComment("Параметр");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Подуслуга");

                entity.HasOne(d => d.SprParametr)
                    .WithMany(p => p.SprServicesSubParametrs)
                    .HasForeignKey(d => d.SprParametrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_parametr_spr_parametr_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubParametrs)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_parametr_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubPremium>(entity =>
            {
                entity.ToTable("spr_services_sub_premium");

                entity.HasComment("Данные об оплате сотрудникам за выполнение определенных действий");

                entity.HasIndex(e => e.Id, "spr_services_sub_premium_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.DateStart, e.DateStop }, "spr_services_sub_premium_idx3");

                entity.HasIndex(e => new { e.SprServicesSubId, e.DateStop }, "spr_services_sub_premium_idx4")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CallCustomer)
                    .HasPrecision(15, 2)
                    .HasColumnName("call_customer")
                    .HasComment("Звонок заявителю - 7");

                entity.Property(e => e.CommenttAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("commentt_add")
                    .HasComment("Добавление примечания - 9");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CustomerAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("customer_add")
                    .HasComment("Добавление заявителя - 3");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("дата начала");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("дата окончания");

                entity.Property(e => e.DocumentScan)
                    .HasPrecision(15, 2)
                    .HasColumnName("document_scan")
                    .HasComment("Сканирование документа - 4");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FormsAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("forms_add")
                    .HasComment("Добавление бланков - 11");

                entity.Property(e => e.IasMkguAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("ias_mkgu_add")
                    .HasComment("Добавление анкеты иас мкгу - 10");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.PkpvdAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("pkpvd_add")
                    .HasComment("Сумма за добавления дела в пкпвд - 12");

                entity.Property(e => e.ProcessingPremium)
                    .HasPrecision(15, 2)
                    .HasColumnName("processing_premium")
                    .HasComment("Обработка документов - 1");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServiceAdd)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_add")
                    .HasComment("Добавление услуги - 2");

                entity.Property(e => e.ServiceConsultation)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_consultation")
                    .HasComment("Консультация - 5");

                entity.Property(e => e.ServiceExecuted)
                    .HasPrecision(15, 2)
                    .HasColumnName("service_executed")
                    .HasComment("Исполнение услуги - 6");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата занесения записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SmevExecution)
                    .HasPrecision(15, 2)
                    .HasColumnName("smev_execution")
                    .HasComment("Выполнение запроса СМЭВ -13");

                entity.Property(e => e.SmsCustomer)
                    .HasPrecision(15, 2)
                    .HasColumnName("sms_customer")
                    .HasComment("СМС заявителю - 8");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой,spr_services_sub id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubPremia)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_premium_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubResultDoc>(entity =>
            {
                entity.ToTable("spr_services_sub_result_doc");

                entity.HasComment("таблица перечня результатов по подуслуге");

                entity.HasIndex(e => e.Id, "spr_services_sub_result_doc_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprDocumentsId, e.SprServicesSubId, e.DocumentResult }, "spr_services_sub_result_doc_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DocumentMethod)
                    .IsRequired()
                    .HasColumnName("document_method")
                    .HasComment("способы получения документа");

                entity.Property(e => e.DocumentPeriodMfc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("document_period_mfc")
                    .HasComment("срок хранения в мфц в днях");

                entity.Property(e => e.DocumentPeriodProvider)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("document_period_provider")
                    .HasComment("срок хранения в органе власти в днях");

                entity.Property(e => e.DocumentResult)
                    .HasColumnName("document_result")
                    .HasComment("результат положительный или отрицательный");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprDocumentsId)
                    .HasColumnName("spr_documents_id")
                    .HasComment("связь с документом spr_documents id");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с подуслугой spr_services_sub id");

                entity.HasOne(d => d.SprDocuments)
                    .WithMany(p => p.SprServicesSubResultDocs)
                    .HasForeignKey(d => d.SprDocumentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_result_doc_spr_documents_id_fkey");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubResultDocs)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_result_doc_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubSmevRequestJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_smev_request_join");

                entity.HasComment("связь услуг и запросов СМЭВ");

                entity.HasIndex(e => e.Id, "spr_services_sub_smev_request_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprSmevRequestId, e.SprServicesSubId }, "spr_services_sub_smev_request_join_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasPrecision(6)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой,spr_services_sub id");

                entity.Property(e => e.SprSmevRequestId)
                    .HasColumnName("spr_smev_request_id")
                    .HasComment("связь с запросом. spr_services_request id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubSmevRequestJoins)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_smev_request_join_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprSmevRequest)
                    .WithMany(p => p.SprServicesSubSmevRequestJoins)
                    .HasForeignKey(d => d.SprSmevRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_smev_request_join_spr_smev_request_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubStateTask>(entity =>
            {
                entity.ToTable("spr_services_sub_state_task");

                entity.HasComment("Гос задание для подуслуг");

                entity.HasIndex(e => e.Id, "spr_services_sub_state_task_id_idx");

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_state_task_spr_services_sub_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasColumnName("date_start")
                    .HasComment("Дата начала гос задания");

                entity.Property(e => e.DateStop)
                    .HasColumnType("date")
                    .HasColumnName("date_stop")
                    .HasComment("Дата окончания гос задания");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("Подуслуга");

                entity.Property(e => e.TaskCommentt)
                    .HasMaxLength(500)
                    .HasColumnName("task_commentt")
                    .HasComment("Основание для гос задания");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubStateTasks)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_state_task_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubStatus>(entity =>
            {
                entity.ToTable("spr_services_sub_status");

                entity.HasComment("список статусов к услуге");

                entity.HasIndex(e => e.Id, "spr_services_sub_status_id_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(30)
                    .HasColumnName("status_name")
                    .HasComment("наименрвание статуса");
            });

            modelBuilder.Entity<SprServicesSubStatusJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_status_join");

                entity.HasComment("Таблица статус к этапу\r\n-- Создал 20.09.2019 Балахаев\r\n");

                entity.HasIndex(e => e.Id, "spr_services_sub_status_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubStatusId, "spr_services_sub_status_join_idx2");

                entity.HasIndex(e => e.SprRoutesStageId, "spr_services_sub_status_join_idx3");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SprRoutesStageId)
                    .HasColumnName("spr_routes_stage_id")
                    .HasComment("Этап");

                entity.Property(e => e.SprServicesSubStatusId)
                    .HasColumnName("spr_services_sub_status_id")
                    .HasComment("Статусы");

                entity.HasOne(d => d.SprRoutesStage)
                    .WithMany(p => p.SprServicesSubStatusJoins)
                    .HasForeignKey(d => d.SprRoutesStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_status_join_spr_routes_stage_id_fkey");

                entity.HasOne(d => d.SprServicesSubStatus)
                    .WithMany(p => p.SprServicesSubStatusJoins)
                    .HasForeignKey(d => d.SprServicesSubStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_status_join_spr_services_sub_status_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubStop>(entity =>
            {
                entity.ToTable("spr_services_sub_stop");

                entity.HasComment("Основания для приостановки подуслуги");

                entity.HasIndex(e => e.Id, "spr_services_sub_stop_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubWeekId }, "spr_services_sub_stop_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(1000)
                    .HasColumnName("commentt")
                    .HasComment("комменатрий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CountDay)
                    .HasColumnName("count_day")
                    .HasComment("количество дней приостановки");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзяь с подуслугой,spr_services_sub id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("тип расчета дней для регламентного срока(count_day_order),count_day_processing и count_day_return всегда считаються по рабочим дням,spr_services_sub_week id");

                entity.Property(e => e.StopText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("stop_text")
                    .HasComment("текст приостановки");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubStops)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_stop_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.SprServicesSubStops)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_stop_spr_services_sub_week_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubSurveying>(entity =>
            {
                entity.ToTable("spr_services_sub_surveying");

                entity.HasComment("Услуги по межеванию");

                entity.HasIndex(e => e.Id, "spr_services_sub_surveying_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubId, "spr_services_sub_surveying_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первый ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CourierSurveying)
                    .HasPrecision(15, 2)
                    .HasColumnName("courier_surveying")
                    .HasComment("процент курьеру межевику");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.ExecOperator)
                    .HasPrecision(15, 2)
                    .HasColumnName("exec_operator")
                    .HasComment("сумма за исполнение оператору");

                entity.Property(e => e.ExecOperatorTosp)
                    .HasPrecision(15, 2)
                    .HasColumnName("exec_operator_tosp")
                    .HasComment("сумма за исполенение оператору");

                entity.Property(e => e.ExecSpecialist)
                    .HasPrecision(15, 2)
                    .HasColumnName("exec_specialist")
                    .HasComment("сумма за исполнение специалисту");

                entity.Property(e => e.ExecUniversalSpecialist)
                    .HasPrecision(15, 2)
                    .HasColumnName("exec_universal_specialist")
                    .HasComment("сумма за исполненеи унив спец");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RecDeputyDirector1040)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_deputy_director_10_40")
                    .HasComment("сумма за прием за зам директору  в  10 - 40 окон");

                entity.Property(e => e.RecDirector1040)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_director_10_40")
                    .HasComment("сумма за прием директору  в  10 - 40 окон");

                entity.Property(e => e.RecDirector38)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_director_3_8")
                    .HasComment("сумма за прием директору  в  3 - 8 окон");

                entity.Property(e => e.RecOperator)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_operator")
                    .HasComment("сумма за прием оператору");

                entity.Property(e => e.RecOperatorTosp)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_operator_tosp")
                    .HasComment("сумма за прием оператору тосп");

                entity.Property(e => e.RecSpecialist)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_specialist")
                    .HasComment("сумма за прием специалисту");

                entity.Property(e => e.RecUniversalSpecialist)
                    .HasPrecision(15, 2)
                    .HasColumnName("rec_universal_specialist")
                    .HasComment("сумма за прием унив спец");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnType("date")
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("связь с услугой, spr_services_sub id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithOne(p => p.SprServicesSubSurveying)
                    .HasForeignKey<SprServicesSubSurveying>(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_surveying_spr_services_sub_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubTariff>(entity =>
            {
                entity.ToTable("spr_services_sub_tariff");

                entity.HasComment("Справочник госпошлин к услуге");

                entity.HasIndex(e => new { e.Id, e.RowDel }, "spr_services_sub_tariff_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprServicesSubWeekId, "spr_services_sub_tariff_idx2");

                entity.HasIndex(e => e.SprServicesSubTariffTypeId, "spr_services_sub_tariff_idx3");

                entity.HasIndex(e => e.Id, "spr_services_sub_tariff_unq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(4000)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("количество дней на исполнение в органе власти");

                entity.Property(e => e.CountDayProcessing)
                    .HasColumnName("count_day_processing")
                    .HasComment("количество дней на обработку");

                entity.Property(e => e.CountDayReturn)
                    .HasColumnName("count_day_return")
                    .HasComment("количество дней на возврат документов с органа власти");

                entity.Property(e => e.DateAdd)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления записи");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubCustomerId)
                    .HasColumnName("spr_services_sub_customer_id")
                    .HasComment("связь с получателем услуги, spr_services_sub_customer id");

                entity.Property(e => e.SprServicesSubTariffTypeId)
                    .HasColumnName("spr_services_sub_tariff_type_id")
                    .HasComment("тип тарифа связь с spr_services_sub_tariff_type id");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("тип отсчета дней, spr_services_sub_week id");

                entity.Property(e => e.Tariff)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_")
                    .HasComment("гос пошлина");

                entity.Property(e => e.TariffMfc)
                    .HasPrecision(15, 2)
                    .HasColumnName("tariff_mfc")
                    .HasComment("Тариф для МФЦ");

                entity.HasOne(d => d.SprServicesSubCustomer)
                    .WithMany(p => p.SprServicesSubTariffs)
                    .HasForeignKey(d => d.SprServicesSubCustomerId)
                    .HasConstraintName("spr_services_sub_tariff_spr_services_sub_customer_id_fkey");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.SprServicesSubTariffs)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_tariff_spr_services_sub_week_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubTariffType>(entity =>
            {
                entity.ToTable("spr_services_sub_tariff_type");

                entity.HasComment("Типы тарифов");

                entity.HasIndex(e => e.Id, "spr_services_sub_tariff_type_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("type_name")
                    .HasComment("нименование типа");
            });

            modelBuilder.Entity<SprServicesSubTypeQuality>(entity =>
            {
                entity.ToTable("spr_services_sub_type_quality");

                entity.HasComment("Способы оценки качества услуг");

                entity.HasIndex(e => e.Id, "spr_services_sub_type_quality_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("type_name")
                    .HasComment("способ оценки качество услуг");
            });

            modelBuilder.Entity<SprServicesSubTypeQualityJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_type_quality_join");

                entity.HasComment("Свзяь типов оценки услуг с подуслугой");

                entity.HasIndex(e => e.Id, "spr_services_sub_type_quality_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubTypeQualityId }, "spr_services_sub_type_quality_join_idx2")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubTypeQualityId }, "spr_services_sub_type_quality_unq1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил ФИО");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзяь с подуслугой, spr_services_sub id");

                entity.Property(e => e.SprServicesSubTypeQualityId)
                    .HasColumnName("spr_services_sub_type_quality_id")
                    .HasComment("связь с методом оценки,spr_services_sub_type_quality id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubTypeQualityJoins)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_type_quality_join_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubTypeQuality)
                    .WithMany(p => p.SprServicesSubTypeQualityJoins)
                    .HasForeignKey(d => d.SprServicesSubTypeQualityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_type_quality_spr_services_sub_type_qualit_fkey");
            });

            modelBuilder.Entity<SprServicesSubTypeRecipient>(entity =>
            {
                entity.ToTable("spr_services_sub_type_recipient");

                entity.HasComment("справочник типов получателей услуг");

                entity.HasIndex(e => e.IdParent, "spr_services_sub_type_recipient_id_parent_idx");

                entity.HasIndex(e => e.Id, "spr_services_sub_type_recipient_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.IdParent)
                    .HasColumnName("id_parent")
                    .HasComment("свзяь с ролительским id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("type_name")
                    .HasComment("наименование получателя");
            });

            modelBuilder.Entity<SprServicesSubWayGet>(entity =>
            {
                entity.ToTable("spr_services_sub_way_get");

                entity.HasComment("Способы обращения за  получением услуги");

                entity.HasIndex(e => e.Id, "spr_services_sub_way_get_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.NameWay)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name_way")
                    .HasComment("наименование способа получения услуги");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");
            });

            modelBuilder.Entity<SprServicesSubWayGetJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_way_get_join");

                entity.HasComment("Связь способов обращения за услугой с услугой");

                entity.HasIndex(e => e.Id, "spr_services_sub_way_get_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubWayGetId }, "spr_services_sub_way_get_join_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзяь с подуслугой, spr_services_sub id");

                entity.Property(e => e.SprServicesSubWayGetId)
                    .HasColumnName("spr_services_sub_way_get_id")
                    .HasComment("свзязь со способом получения услуги,spr_services_sub_way_get id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubWayGetJoins)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_way_get_join_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubWayGet)
                    .WithMany(p => p.SprServicesSubWayGetJoins)
                    .HasForeignKey(d => d.SprServicesSubWayGetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_way_get_join_spr_services_sub_way_get_id_fkey");
            });

            modelBuilder.Entity<SprServicesSubWayGetResult>(entity =>
            {
                entity.ToTable("spr_services_sub_way_get_result");

                entity.HasComment("Способы получения результата услуги");

                entity.HasIndex(e => e.Id, "spr_services_sub_way_get_result_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.NameWay)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name_way")
                    .HasComment("способ получения результата");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");
            });

            modelBuilder.Entity<SprServicesSubWayGetResultJoin>(entity =>
            {
                entity.ToTable("spr_services_sub_way_get_result_join");

                entity.HasComment("Связь методов получения результата с подуслугой");

                entity.HasIndex(e => e.Id, "spr_services_sub_way_get_result_join_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprServicesSubId, e.SprServicesSubWayGetResultId }, "spr_services_sub_way_get_result_join_idx2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.SprServicesSubId)
                    .HasColumnName("spr_services_sub_id")
                    .HasComment("свзяь с подуслугой,spr_services_sub id");

                entity.Property(e => e.SprServicesSubWayGetResultId)
                    .HasColumnName("spr_services_sub_way_get_result_id")
                    .HasComment("связь со способом получения результата,spr_services_sub_way_get_result id");

                entity.HasOne(d => d.SprServicesSub)
                    .WithMany(p => p.SprServicesSubWayGetResultJoins)
                    .HasForeignKey(d => d.SprServicesSubId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_way_get_result_join_spr_services_sub_id_fkey");

                entity.HasOne(d => d.SprServicesSubWayGetResult)
                    .WithMany(p => p.SprServicesSubWayGetResultJoins)
                    .HasForeignKey(d => d.SprServicesSubWayGetResultId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_services_sub_way_get_resu_spr_services_sub_way_get_res_fkey");
            });

            modelBuilder.Entity<SprServicesSubWeek>(entity =>
            {
                entity.ToTable("spr_services_sub_week");

                entity.HasComment("справочник типов расчетов дней");

                entity.HasIndex(e => e.Id, "spr_services_sub_tariff_week_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(30)
                    .HasColumnName("type_name")
                    .HasComment("тип расчета дней");
            });

            modelBuilder.Entity<SprServicesType>(entity =>
            {
                entity.ToTable("spr_services_type");

                entity.HasComment("справочник типов услуг, государственная, муниципальная и т д");

                entity.HasIndex(e => e.Id, "spr_services_sub_type_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(30)
                    .HasColumnName("type_name")
                    .HasComment("наименование типа");
            });

            modelBuilder.Entity<SprSetting>(entity =>
            {
                entity.ToTable("spr_settings");

                entity.HasComment("настройки системы");

                entity.HasIndex(e => e.Id, "spr_settings_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментраий");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(70)
                    .HasColumnName("param_name")
                    .HasComment("наименование параметра");

                entity.Property(e => e.ParamValue)
                    .HasMaxLength(255)
                    .HasColumnName("param_value")
                    .HasComment("значение параметра");
            });

            modelBuilder.Entity<SprSmev>(entity =>
            {
                entity.ToTable("spr_smev");

                entity.HasComment("Справочник сервисов СМЭВ (Систе́ма межве́домственного электро́нного взаимоде́йствия)");

                entity.HasIndex(e => e.Id, "spr_smev_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.IsSmev3, "spr_smev_is_smev3_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsSmev3)
                    .HasColumnName("is_smev3")
                    .HasComment("смэв 3 запрос или нет");

                entity.Property(e => e.ProviderCode)
                    .HasMaxLength(30)
                    .HasColumnName("provider_code")
                    .HasComment("код поставщика, используется в запросе");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .HasColumnName("provider_name")
                    .HasComment("наименование поставщика, используеться в запросе");

                entity.Property(e => e.ProviderUrl)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("provider_url")
                    .HasComment("адрес сервиса СМЭВ");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SmevDescription)
                    .HasColumnName("smev_description")
                    .HasComment("описание сервиса");

                entity.Property(e => e.SmevMnemo)
                    .HasMaxLength(30)
                    .HasColumnName("smev_mnemo")
                    .HasComment("сид сервиса");

                entity.Property(e => e.SmevName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("smev_name")
                    .HasComment("наименование сервиса СМЭВ");

                entity.Property(e => e.SmevProvider)
                    .HasMaxLength(150)
                    .HasColumnName("smev_provider")
                    .HasComment("наименование органа власти ");
            });

            modelBuilder.Entity<SprSmevClassFnsReg>(entity =>
            {
                entity.ToTable("spr_smev_class_fns_reg");

                entity.HasComment("Справочник отделений ФНС (общероссийский классификатор организационно-правовых форм), осуществляющих государственную регистрацию.");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("code")
                    .HasComment("Код налогового органа или его территориального участка (подразделения), осуществляющего регистрацию");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasColumnName("name")
                    .HasComment("Сокращенное наименование РО");
            });

            modelBuilder.Entity<SprSmevClassOkopf>(entity =>
            {
                entity.ToTable("spr_smev_class_okopf");

                entity.HasComment("Справочник ОКОПФ (Общероссийский классификатор организационно-правовых форм)");

                entity.HasIndex(e => e.Code, "spr_smev_class_okopf_idx");

                entity.HasIndex(e => e.ParentId, "spr_smev_class_okopf_parent_id_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("code")
                    .HasComment("Код элемента справочника");

                entity.Property(e => e.Description)
                    .HasMaxLength(5000)
                    .HasColumnName("description")
                    .HasComment("Описание элемента справочника");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .HasColumnName("name")
                    .HasComment("Наименование элемента справочника");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Id родительской записи");
            });

            modelBuilder.Entity<SprSmevClassOkpd2>(entity =>
            {
                entity.ToTable("spr_smev_class_okpd2");

                entity.HasComment("Справочник ОКПД");

                entity.HasIndex(e => e.Code, "spr_smev_class_okpd2_idx");

                entity.HasIndex(e => e.ParentId, "spr_smev_class_okpd2_parent_id_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("code")
                    .HasComment("Код элемента справочника");

                entity.Property(e => e.Description)
                    .HasMaxLength(5000)
                    .HasColumnName("description")
                    .HasComment("Описание элемента справочника");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .HasColumnName("name")
                    .HasComment("Наименование элемента справочника");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Id родительской записи");
            });

            modelBuilder.Entity<SprSmevClassOkved2>(entity =>
            {
                entity.ToTable("spr_smev_class_okved2");

                entity.HasComment("Справочник ОКВЭД-2 (Общероссийский Классификатор Видов Экономической Деятельности)");

                entity.HasIndex(e => e.Code, "spr_smev_class_okved2_idx");

                entity.HasIndex(e => e.ParentId, "spr_smev_class_okved2_parent_id_idx");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("code")
                    .HasComment("Код элемента справочника");

                entity.Property(e => e.Description)
                    .HasMaxLength(10000)
                    .HasColumnName("description")
                    .HasComment("Описание элемента справочника");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .HasColumnName("name")
                    .HasComment("Наименование элемента справочника");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Id родительской записи");
            });

            modelBuilder.Entity<SprSmevClassOszn>(entity =>
            {
                entity.ToTable("spr_smev_class_oszn");

                entity.HasComment("Справочник осзн для минтруда");

                entity.HasIndex(e => e.Id, "spr_smev_class_oszn_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.OsznAddress)
                    .HasMaxLength(255)
                    .HasColumnName("oszn_address")
                    .HasComment("Адрес ОСЗН");

                entity.Property(e => e.OsznCode)
                    .HasColumnName("oszn_code")
                    .HasComment("Код осзн");

                entity.Property(e => e.OsznName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("oszn_name")
                    .HasComment("Наименование ОСЗН");

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("service_code")
                    .HasComment("Идентификатор цели услуги");
            });

            modelBuilder.Entity<SprSmevClassUik>(entity =>
            {
                entity.ToTable("spr_smev_class_uik");

                entity.HasComment("Справочник избирательных участков для СМЭВ (Система межведомственного электронного взаимодействия)");

                entity.HasIndex(e => e.CountryCode, "spr_smev_class_uik_idx1");

                entity.HasIndex(e => e.RegionCode, "spr_smev_class_uik_idx2");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(1000)
                    .HasColumnName("address")
                    .HasComment("Адрес избирательного участка");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .HasColumnName("country_code")
                    .HasComment("Код страны избирательного участка");

                entity.Property(e => e.Phone)
                    .HasMaxLength(120)
                    .HasColumnName("phone")
                    .HasComment("Телефон избирательного участка");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(10)
                    .HasColumnName("region_code")
                    .HasComment("Код региона избирательного участка");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name")
                    .HasComment("Наименование региона избирательного участка");

                entity.Property(e => e.UikNumber)
                    .HasMaxLength(10)
                    .HasColumnName("uik_number")
                    .HasComment("Код избирательного участка");
            });

            modelBuilder.Entity<SprSmevClassZag>(entity =>
            {
                entity.ToTable("spr_smev_class_zags");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .HasColumnName("address")
                    .HasComment("Адрес фактического расположения");

                entity.Property(e => e.Code)
                    .HasMaxLength(8)
                    .HasColumnName("code")
                    .HasComment("Код органа ЗАГС");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .HasColumnName("name")
                    .HasComment("Наименование органа ЗАГС");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .HasColumnName("phone")
                    .HasComment("Контактный телефон справочной службы");
            });

            modelBuilder.Entity<SprSmevRequest>(entity =>
            {
                entity.ToTable("spr_smev_request");

                entity.HasComment("Справочник запросов к сервисам СМЭВ (Систе́ма межве́домственного электро́нного взаимоде́йствия)");

                entity.HasIndex(e => e.Id, "spr_smev_request_idx1")
                    .IsUnique();

                entity.HasIndex(e => new { e.SprSmevId, e.SprServicesSubWeekId, e.SprSmevTypeRequestId, e.RequestActive }, "spr_smev_request_idx2");

                entity.HasIndex(e => new { e.SprSmevId, e.SprSmevTypeRequestId, e.RequestActive, e.Path }, "spr_smev_request_idx3");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ, для обработки  в модуле смэв");

                entity.Property(e => e.Commentt)
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.CountDayExecution)
                    .HasColumnName("count_day_execution")
                    .HasComment("количество дней на выполнение запроса");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IncludeInReport)
                    .IsRequired()
                    .HasColumnName("include_in_report")
                    .HasDefaultValueSql("true")
                    .HasComment("Показывать в отчетах?");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.Path)
                    .HasMaxLength(255)
                    .HasColumnName("path")
                    .HasComment("путь к сервису");

                entity.Property(e => e.RequestActive)
                    .HasColumnName("request_active")
                    .HasComment("активен запрос или нет");

                entity.Property(e => e.RequestName)
                    .HasMaxLength(350)
                    .HasColumnName("request_name")
                    .HasComment("наименование запроса");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.ServiceOrFunctionCode)
                    .HasMaxLength(20)
                    .HasColumnName("service_or_function_code")
                    .HasComment("Реестровый номер услуги. При наличии  - цель оказания государственной услуги. Из справочника Услуги ЕПГУ / ФРГУ. Заполняется в блоке атрибутов бизнес процесса СМЭВ 3.");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.SprServicesSubWeekId)
                    .HasColumnName("spr_services_sub_week_id")
                    .HasComment("тип отсчета дней, связь с spr_services_sub_week id");

                entity.Property(e => e.SprSmevId)
                    .HasColumnName("spr_smev_id")
                    .HasComment("связь с сервисем, spr_smev id");

                entity.Property(e => e.SprSmevTypeRequestId)
                    .HasColumnName("spr_smev_type_request_id")
                    .HasComment("тип запроса, связь с spr_smev_type_request id");

                entity.HasOne(d => d.SprServicesSubWeek)
                    .WithMany(p => p.SprSmevRequests)
                    .HasForeignKey(d => d.SprServicesSubWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_smev_request_spr_services_sub_week_id_fkey");

                entity.HasOne(d => d.SprSmev)
                    .WithMany(p => p.SprSmevRequests)
                    .HasForeignKey(d => d.SprSmevId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_smev_request_spr_smev_id_fkey");

                entity.HasOne(d => d.SprSmevTypeRequest)
                    .WithMany(p => p.SprSmevRequests)
                    .HasForeignKey(d => d.SprSmevTypeRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_smev_request_spr_smev_type_request_id_fkey");
            });

            modelBuilder.Entity<SprSmevSystemAccess>(entity =>
            {
                entity.ToTable("spr_smev_system_access");

                entity.HasComment("Cправочник систем СМЭВ 3 для доступа к эмулятору СМЭВ 3 на сервисе");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Certificate)
                    .HasColumnName("certificate")
                    .HasComment("открытая часть сертификата");

                entity.Property(e => e.ProductionAccess)
                    .HasColumnName("production_access")
                    .HasComment("разрешить продуктивный доступ");

                entity.Property(e => e.SmevMnemonic)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("smev_mnemonic")
                    .HasComment("мнемоника системы");

                entity.Property(e => e.SmevName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("smev_name")
                    .HasComment("наименовение системы");

                entity.Property(e => e.TestAccess)
                    .HasColumnName("test_access")
                    .HasComment("разрешить тестовый доступ");
            });

            modelBuilder.Entity<SprSmevTypeRequest>(entity =>
            {
                entity.ToTable("spr_smev_type_request");

                entity.HasComment("Типы запросов СМЭВ (Систе́ма межве́домственного электро́нного взаимоде́йствия)");

                entity.HasIndex(e => e.Id, "spr_smev_type_request_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("первичный ключ");

                entity.Property(e => e.Commentt)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата редактирования");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто редактировал");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("type_name")
                    .HasComment("наименование типа");
            });

            modelBuilder.Entity<SprStandardsFile>(entity =>
            {
                entity.ToTable("spr_standards_file");

                entity.HasComment("Нормативы и бланки для услуг");

                entity.HasIndex(e => e.Id, "spr_standarts_file_idx1");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Commentt)
                    .HasColumnType("character varying")
                    .HasColumnName("commentt")
                    .HasComment("комментарий");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.FileExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_ext")
                    .HasComment("расширение");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("file_name")
                    .HasComment("имя файла");

                entity.Property(e => e.FileSize)
                    .HasColumnName("file_size")
                    .HasComment("размер");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.RowDel)
                    .HasColumnName("row_del")
                    .HasDefaultValueSql("0")
                    .HasComment("признак удаления записи 0- не удалена, 1 - удалена");

                entity.Property(e => e.SetDate)
                    .HasColumnName("set_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления");

                entity.Property(e => e.SetEmployeesFio)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("set_employees_fio")
                    .HasComment("кто добавил");
            });

            modelBuilder.Entity<SprTestAnswer>(entity =>
            {
                entity.ToTable("spr_test_answer");

                entity.HasComment("Справочник ответов");

                entity.HasIndex(e => e.Id, "spr_test_answer_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprTestQuestionId, "spr_test_answer_idx2");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .HasColumnName("answer")
                    .HasComment("Ответ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsRemove)
                    .HasColumnName("is_remove")
                    .HasDefaultValueSql("false")
                    .HasComment("признак удаления");

                entity.Property(e => e.IsTrue)
                    .HasColumnName("is_true")
                    .HasComment("Правильность ответа");

                entity.Property(e => e.SprTestQuestionId)
                    .HasColumnName("spr_test_question_id")
                    .HasComment("Вопрос");

                entity.HasOne(d => d.SprTestQuestion)
                    .WithMany(p => p.SprTestAnswers)
                    .HasForeignKey(d => d.SprTestQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_test_answer_spr_test_question_id_fkey");
            });

            modelBuilder.Entity<SprTestDirection>(entity =>
            {
                entity.ToTable("spr_test_direction");

                entity.HasComment("Справочник направлений");

                entity.HasIndex(e => e.Id, "spr_test_direction_idx1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.DirectionName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("direction_name")
                    .HasComment("Наименование направления");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsRemove)
                    .HasColumnName("is_remove")
                    .HasDefaultValueSql("false")
                    .HasComment("признак удаления");
            });

            modelBuilder.Entity<SprTestQuestion>(entity =>
            {
                entity.ToTable("spr_test_question");

                entity.HasComment("Справочник вопросов");

                entity.HasIndex(e => e.Id, "spr_test_question_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprTestDirectionId, "spr_test_question_idx3");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Actuality)
                    .IsRequired()
                    .HasColumnName("actuality")
                    .HasDefaultValueSql("true")
                    .HasComment("Актуальность вопроса");

                entity.Property(e => e.CommenttModify)
                    .HasMaxLength(255)
                    .HasColumnName("commentt_modify")
                    .HasComment("комментарий при изменении");

                entity.Property(e => e.DateAdd)
                    .HasPrecision(6)
                    .HasColumnName("date_add")
                    .HasDefaultValueSql("now()")
                    .HasComment("дата и время добавления записи");

                entity.Property(e => e.DateModify)
                    .HasPrecision(6)
                    .HasColumnName("date_modify")
                    .HasComment("дата и время изменений");

                entity.Property(e => e.EmployeesFioAdd)
                    .HasMaxLength(70)
                    .HasColumnName("employees_fio_add")
                    .HasComment("кто добавил запись");

                entity.Property(e => e.EmployeesFioModify)
                    .HasMaxLength(255)
                    .HasColumnName("employees_fio_modify")
                    .HasComment("кто изменил запись");

                entity.Property(e => e.IpAddressAdd)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_add")
                    .HasComment("ip адрес добавившего запись");

                entity.Property(e => e.IpAddressModify)
                    .HasMaxLength(20)
                    .HasColumnName("ip_address_modify")
                    .HasComment("ip адрес изменившего запись");

                entity.Property(e => e.IsRemove)
                    .HasColumnName("is_remove")
                    .HasDefaultValueSql("false")
                    .HasComment("признак удаления");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .HasColumnName("question")
                    .HasComment("Вопрос");

                entity.Property(e => e.SprTestDirectionId)
                    .HasColumnName("spr_test_direction_id")
                    .HasComment("Направление");

                entity.Property(e => e.Type)
                    .HasColumnName("type_")
                    .HasComment("Тип вопроса (1- с одним ответом 2- с несколькими ответами)");

                entity.HasOne(d => d.SprTestDirection)
                    .WithMany(p => p.SprTestQuestions)
                    .HasForeignKey(d => d.SprTestDirectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_test_question_spr_test_direction_id_fkey");
            });

            modelBuilder.Entity<SprTestQuestionJobPo>(entity =>
            {
                entity.ToTable("spr_test_question_job_pos");

                entity.HasComment("Справочник должностей к вопросу");

                entity.HasIndex(e => e.Id, "spr_test_question_job_pos_idx1")
                    .IsUnique();

                entity.HasIndex(e => e.SprEmployeesJobPosId, "spr_test_question_job_pos_idx2");

                entity.HasIndex(e => e.SprTestQuestionId, "spr_test_question_job_pos_idx3");

                entity.HasIndex(e => new { e.SprEmployeesJobPosId, e.SprTestQuestionId }, "spr_test_question_job_pos_spr_employees_job_pos_id_spr_test_key")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.SprEmployeesJobPosId)
                    .HasColumnName("spr_employees_job_pos_id")
                    .HasComment("Должность");

                entity.Property(e => e.SprTestQuestionId)
                    .HasColumnName("spr_test_question_id")
                    .HasComment("Вопрос");

                entity.HasOne(d => d.SprEmployeesJobPos)
                    .WithMany(p => p.SprTestQuestionJobPos)
                    .HasForeignKey(d => d.SprEmployeesJobPosId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_test_question_job_pos_spr_employees_job_pos_id_fkey");

                entity.HasOne(d => d.SprTestQuestion)
                    .WithMany(p => p.SprTestQuestionJobPos)
                    .HasForeignKey(d => d.SprTestQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spr_test_question_job_pos_spr_test_question_id_fkey");
            });

            modelBuilder.Entity<StatisticsClick>(entity =>
            {
                entity.ToTable("statistics_click");

                entity.HasComment("Клики сотрудников\r\n1 - Новое обращение -> Услуга -> Выбор ОИВ\r\n2 - Новое обращение -> Услуга -> Хештеги \r\n3 - Новое обращение -> Услуга -> Популярные услуги\r\n4 - Новое обращение -> Документы -> Сканирование документов\r\n5 - Новое обращение -> Исполнение -> Печать заявления\r\n6 - Новое обращение -> Исполнение -> Печать расписки\r\n7 - Новое обращение -> Исполнение -> Сканирование заявления\r\n8 - Новое обращение -> Исполнение -> Оставить примечание\r\n9 - Новое обращение -> Исполнение -> Передать по этапам");

                entity.HasIndex(e => e.Id, "statistics_click_id_idx");

                entity.HasIndex(e => e.SprEmployeesId, "statistics_click_spr_employees_id_idx");

                entity.HasIndex(e => e.SprEmployeesMfcId, "statistics_click_spr_employees_mfc_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.DateClick)
                    .HasColumnType("date")
                    .HasColumnName("date_click")
                    .HasComment("Дата клика");

                entity.Property(e => e.SprEmployeesId)
                    .HasColumnName("spr_employees_id")
                    .HasComment("Сотрудник кликнувший");

                entity.Property(e => e.SprEmployeesMfcId)
                    .HasColumnName("spr_employees_mfc_id")
                    .HasComment("МФЦ кликнувшего");

                entity.Property(e => e.TypeClick)
                    .HasColumnName("type_click")
                    .HasComment("Тип клика");

                entity.HasOne(d => d.SprEmployees)
                    .WithMany(p => p.StatisticsClicks)
                    .HasForeignKey(d => d.SprEmployeesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("statistics_click_spr_employees_id_fkey");

                entity.HasOne(d => d.SprEmployeesMfc)
                    .WithMany(p => p.StatisticsClicks)
                    .HasForeignKey(d => d.SprEmployeesMfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("statistics_click_spr_employees_mfc_id_fkey");
            });

            modelBuilder.Entity<Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp");

                entity.HasIndex(e => e.Uuid1, "temp_uuid1_idx")
                    .IsUnique();

                entity.HasIndex(e => e.Uuid1, "temp_uuid1_key")
                    .IsUnique();

                entity.Property(e => e.Uuid1).HasColumnName("uuid1");

                entity.Property(e => e.Uuid2).HasColumnName("uuid2");
            });

            modelBuilder.Entity<TempOktmo>(entity =>
            {
                entity.ToTable("temp_oktmo");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Municipality)
                    .HasMaxLength(255)
                    .HasColumnName("municipality");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(10)
                    .HasColumnName("oktmo");
            });

            modelBuilder.Entity<Tempje>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempje");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("code_");

                entity.Property(e => e.Date)
                    .HasMaxLength(255)
                    .HasColumnName("date_");

                entity.Property(e => e.DateBirth)
                    .HasMaxLength(255)
                    .HasColumnName("date_birth");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .HasColumnName("number");

                entity.Property(e => e.Serial)
                    .HasMaxLength(255)
                    .HasColumnName("serial");
            });

            modelBuilder.Entity<Test1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test1");

                entity.Property(e => e.DocumentIssueDate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_date");

                entity.Property(e => e.АдрессРегистрации)
                    .HasMaxLength(255)
                    .HasColumnName("адресс регистрации ");

                entity.Property(e => e.ДатаРождения)
                    .HasMaxLength(255)
                    .HasColumnName("дата рождения");

                entity.Property(e => e.КемВыданДокумет)
                    .HasMaxLength(255)
                    .HasColumnName("кем выдан докумет ");

                entity.Property(e => e.КодПодразделения)
                    .HasMaxLength(255)
                    .HasColumnName("код подразделения ");

                entity.Property(e => e.МестоРождения)
                    .HasMaxLength(255)
                    .HasColumnName("место рождения ");

                entity.Property(e => e.НомерПаспорта)
                    .HasMaxLength(255)
                    .HasColumnName("Номер паспорта ");

                entity.Property(e => e.НомерТелефона)
                    .HasMaxLength(255)
                    .HasColumnName("Номер телефона");

                entity.Property(e => e.Пароль)
                    .HasMaxLength(255)
                    .HasColumnName("Пароль ");

                entity.Property(e => e.ПарольОтПочты)
                    .HasMaxLength(255)
                    .HasColumnName("Пароль от почты ");

                entity.Property(e => e.Почта)
                    .HasMaxLength(255)
                    .HasColumnName("Почта ");

                entity.Property(e => e.СерияПаспортаL)
                    .HasMaxLength(255)
                    .HasColumnName("серия паспорта l");

                entity.Property(e => e.Снилс)
                    .HasMaxLength(255)
                    .HasColumnName("СНИЛС ");

                entity.Property(e => e.ФиоЧеловека)
                    .HasMaxLength(255)
                    .HasColumnName("ФИО человека ");
            });

            modelBuilder.Entity<Test2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test2");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .HasColumnName("customer_address");

                entity.Property(e => e.DocumentBirthDate)
                    .HasMaxLength(255)
                    .HasColumnName("document_birth_date");

                entity.Property(e => e.DocumentBirthPlace)
                    .HasMaxLength(255)
                    .HasColumnName("document_birth_place");

                entity.Property(e => e.DocumentIssueBody)
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_body");

                entity.Property(e => e.DocumentIssueDate)
                    .HasMaxLength(255)
                    .HasColumnName("document_issue_date");

                entity.Property(e => e.КодПодразделения)
                    .HasMaxLength(255)
                    .HasColumnName("код подразделения");

                entity.Property(e => e.НомерТеелфона)
                    .HasMaxLength(255)
                    .HasColumnName("Номер теелфона ");

                entity.Property(e => e.Пароль)
                    .HasMaxLength(255)
                    .HasColumnName("Пароль ");

                entity.Property(e => e.ПарольОтПочты)
                    .HasMaxLength(255)
                    .HasColumnName("Пароль от почты ");

                entity.Property(e => e.Почта)
                    .HasMaxLength(255)
                    .HasColumnName("Почта ");

                entity.Property(e => e.СерияИНомер)
                    .HasMaxLength(255)
                    .HasColumnName("Серия и Номер ");

                entity.Property(e => e.Снилс)
                    .HasMaxLength(255)
                    .HasColumnName("СНИЛС ");

                entity.Property(e => e.Фио)
                    .HasMaxLength(255)
                    .HasColumnName("ФИО ");
            });

            modelBuilder.Entity<TestFataly>(entity =>
            {
                entity.ToTable("test_fataly");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("code");

                entity.Property(e => e.DateBirth)
                    .HasColumnType("date")
                    .HasColumnName("date_birth");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("date")
                    .HasColumnName("date_doc");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(255)
                    .HasColumnName("document_type");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio");

                entity.Property(e => e.Number)
                    .HasColumnType("character varying")
                    .HasColumnName("number");

                entity.Property(e => e.Serial)
                    .HasMaxLength(255)
                    .HasColumnName("serial");
            });

            modelBuilder.Entity<TestFtpFile>(entity =>
            {
                entity.HasKey(e => e.Id2)
                    .HasName("test_ftp_file_pkey");

                entity.ToTable("test_ftp_file");

                entity.Property(e => e.Id2)
                    .HasColumnName("id2")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(252)
                    .HasColumnName("data_services_info_id");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio");

                entity.Property(e => e.HasDownloaded)
                    .HasColumnName("has_downloaded")
                    .HasDefaultValueSql("false");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MfcFtpFolder)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_folder");

                entity.Property(e => e.MfcFtpLogin)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_login");

                entity.Property(e => e.MfcFtpPass)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_pass");

                entity.Property(e => e.MfcFtpServer)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_server");

                entity.Property(e => e.Snils)
                    .HasMaxLength(255)
                    .HasColumnName("snils");
            });

            modelBuilder.Entity<TestKamil>(entity =>
            {
                entity.HasKey(e => e.DataServicesInfoId)
                    .HasName("test_kamil_pkey");

                entity.ToTable("test_kamil");

                entity.Property(e => e.DataServicesInfoId)
                    .HasColumnType("character varying")
                    .HasColumnName("data_services_info_id");

                entity.Property(e => e.FtpFolder)
                    .HasMaxLength(255)
                    .HasColumnName("ftp_folder");

                entity.Property(e => e.FtpLogin)
                    .HasMaxLength(255)
                    .HasColumnName("ftp_login");

                entity.Property(e => e.FtpPassword)
                    .HasMaxLength(255)
                    .HasColumnName("ftp_password");

                entity.Property(e => e.FtpServer)
                    .HasMaxLength(255)
                    .HasColumnName("ftp_server");
            });

            modelBuilder.Entity<TestKamil1>(entity =>
            {
                entity.ToTable("test_kamil1");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.DataServicesInfoId)
                    .HasMaxLength(252)
                    .HasColumnName("data_services_info_id");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio");

                entity.Property(e => e.MfcFtpFolder)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_folder");

                entity.Property(e => e.MfcFtpLogin)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_login");

                entity.Property(e => e.MfcFtpPass)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_pass");

                entity.Property(e => e.MfcFtpServer)
                    .HasMaxLength(255)
                    .HasColumnName("mfc_ftp_server");
            });

            modelBuilder.Entity<ZEsium>(entity =>
            {
                entity.ToTable("z_esia");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("date")
                    .HasColumnName("birth_date");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(255)
                    .HasColumnName("birth_place");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("code");

                entity.Property(e => e.DocDate)
                    .HasColumnType("date")
                    .HasColumnName("doc_date");

                entity.Property(e => e.DocIssuer)
                    .HasMaxLength(255)
                    .HasColumnName("doc_issuer");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .HasColumnName("fio");

                entity.Property(e => e.Gender)
                    .HasMaxLength(5)
                    .HasColumnName("gender");

                entity.Property(e => e.Mail)
                    .HasMaxLength(255)
                    .HasColumnName("mail");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(255)
                    .HasColumnName("serial_number");

                entity.Property(e => e.Snils)
                    .HasMaxLength(255)
                    .HasColumnName("snils");
            });

            modelBuilder.Entity<Zzz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zzz");

                entity.Property(e => e.All).HasColumnName("all");

                entity.Property(e => e.Last).HasColumnName("last");

                entity.Property(e => e.Month).HasColumnName("month_");

                entity.Property(e => e.Percent).HasColumnName("percent");
            });

            modelBuilder.HasSequence("data_cik_seq_id").StartsAt(2);

            modelBuilder.HasSequence("data_elk_order_seq_id");

            modelBuilder.HasSequence("data_fssp_doc_seq_id");

            modelBuilder.HasSequence("data_gibdd_fism_seq_id");

            modelBuilder.HasSequence("data_mdm_objects_attributes_upload_id_seq");

            modelBuilder.HasSequence("data_mdm_objects_attributes_upload_v2_id_seq");

            modelBuilder.HasSequence("data_mdm_objects_upload_id_seq");

            modelBuilder.HasSequence("data_mdm_objects_upload_v2_id_seq");

            modelBuilder.HasSequence("data_mfc_pfr_fri_order_seq_id")
                .StartsAt(80)
                .HasMax(999999)
                .IsCyclic();

            modelBuilder.HasSequence("data_mfc_pfr_order_seq_id");

            modelBuilder.HasSequence("data_mfc_pfr_pension_order_seq_id")
                .HasMax(999)
                .IsCyclic();

            modelBuilder.HasSequence("data_msp_corp_seq_id");

            modelBuilder.HasSequence("data_msp_id").StartsAt(101);

            modelBuilder.HasSequence("data_mvd_ais_opv_seq_daily");

            modelBuilder.HasSequence("data_ppo_territoria_seq_id");

            modelBuilder.HasSequence("data_reestr_reestr_number_seq");

            modelBuilder.HasSequence("data_services_elplat_seq").HasMax(9999999999);

            modelBuilder.HasSequence("data_sovm_passport_rf_seq_id");

            modelBuilder.HasSequence("data_test_seq").IsCyclic();

            modelBuilder.HasSequence("s_services_sub_hashtag_seq").IsCyclic();

            modelBuilder.HasSequence("spr_dd_list_parametrs_seq")
                .HasMax(99999999999)
                .IsCyclic();

            modelBuilder.HasSequence("spr_employees_status_id_seq")
                .HasMin(0)
                .HasMax(2000000000);

            modelBuilder.HasSequence("spr_group_parametrs_join_seq").IsCyclic();

            modelBuilder.HasSequence("spr_group_parametrs_seq").IsCyclic();

            modelBuilder.HasSequence("spr_parametrs_seq").IsCyclic();

            modelBuilder.HasSequence("spr_services_sub_group_parametrs_join_seq").IsCyclic();

            modelBuilder.HasSequence("spr_smev_request_id_seq").HasMax(999999999999999999);

            modelBuilder.HasSequence("spr_working_time_status_id_seq");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
